Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.concat", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.diff", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.lit", "polars.map", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.get_categories", "polars.Series.cat.set_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.diff", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 91, 117, 132, 133, 236, 254, 268, 568, 639, 719, 745, 1051], "refer": [0, 31, 101, 102, 105, 138, 254, 348, 351, 440, 474, 516, 535, 536, 537, 540, 639, 829, 832, 940, 1006, 1007, 1008, 1011, 1051], "input": [0, 67, 73, 93, 101, 102, 105, 133, 134, 145, 157, 185, 200, 207, 221, 231, 234, 254, 261, 268, 363, 383, 434, 440, 449, 465, 506, 563, 564, 565, 566, 567, 568, 570, 573, 576, 577, 578, 579, 585, 586, 593, 594, 601, 602, 603, 605, 606, 607, 610, 611, 619, 622, 623, 624, 630, 639, 650, 653, 663, 670, 696, 702, 707, 713, 717, 735, 745, 861, 918, 919, 921, 1051], "output": [0, 26, 28, 31, 32, 33, 34, 105, 133, 158, 159, 170, 180, 185, 187, 196, 200, 227, 231, 254, 268, 438, 439, 448, 485, 487, 489, 491, 493, 499, 560, 568, 580, 588, 589, 605, 627, 639, 650, 671, 672, 681, 685, 686, 696, 713, 716, 719, 735, 745, 1039, 1051], "seri": [0, 1, 2, 23, 59, 68, 69, 70, 71, 74, 90, 92, 95, 97, 120, 124, 141, 149, 152, 154, 155, 159, 160, 163, 164, 166, 168, 176, 177, 181, 192, 193, 209, 213, 216, 219, 220, 235, 254, 267, 268, 279, 286, 294, 295, 297, 344, 366, 372, 381, 385, 387, 388, 389, 391, 392, 393, 405, 410, 413, 425, 426, 429, 430, 431, 436, 438, 468, 474, 475, 476, 477, 478, 480, 482, 488, 494, 495, 498, 509, 529, 535, 536, 537, 540, 544, 550, 551, 559, 564, 566, 568, 569, 570, 574, 575, 581, 583, 584, 585, 588, 589, 594, 595, 597, 599, 601, 602, 603, 604, 605, 606, 608, 609, 610, 612, 613, 615, 616, 619, 621, 622, 623, 625, 627, 628, 629, 631, 639, 650, 667, 672, 718, 735, 1043, 1045, 1047, 1050, 1052, 1055, 1056, 1057, 1059], "datafram": [0, 1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 73, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 114, 115, 116, 119, 121, 122, 130, 252, 253, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 346, 347, 348, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 591, 592, 593, 594, 595, 596, 597, 599, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 615, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 639, 650, 657, 659, 663, 664, 668, 671, 676, 677, 678, 679, 681, 685, 686, 690, 694, 701, 702, 708, 709, 710, 713, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 738, 744, 745, 759, 760, 770, 786, 787, 825, 857, 885, 886, 893, 938, 990, 1002, 1003, 1019, 1028, 1029, 1039, 1051, 1058, 1059], "lazyfram": [0, 1, 52, 53, 55, 57, 67, 68, 69, 70, 71, 73, 74, 112, 113, 114, 115, 116, 117, 119, 124, 174, 186, 254, 292, 369, 431, 639, 650, 734, 738, 1058, 1059], "express": [0, 47, 48, 73, 121, 124, 126, 133, 134, 145, 147, 149, 157, 183, 187, 195, 200, 207, 221, 231, 234, 236, 254, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 278, 279, 286, 288, 289, 290, 292, 298, 299, 300, 301, 302, 303, 309, 311, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 355, 356, 358, 359, 363, 365, 366, 368, 369, 373, 375, 376, 377, 381, 383, 385, 386, 387, 388, 390, 395, 398, 399, 403, 404, 406, 407, 409, 410, 414, 431, 436, 437, 438, 439, 440, 444, 445, 446, 447, 448, 449, 451, 453, 455, 457, 461, 462, 464, 465, 467, 468, 469, 470, 473, 477, 478, 480, 493, 494, 495, 497, 499, 501, 502, 504, 506, 509, 510, 511, 513, 515, 516, 517, 518, 519, 524, 525, 526, 529, 530, 531, 532, 546, 547, 550, 552, 553, 556, 557, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 603, 604, 605, 606, 607, 610, 611, 613, 615, 616, 617, 618, 619, 620, 622, 623, 624, 626, 627, 628, 630, 631, 638, 650, 653, 657, 662, 663, 664, 667, 670, 690, 696, 699, 700, 702, 707, 713, 714, 717, 719, 735, 738, 745, 775, 776, 777, 785, 795, 847, 861, 891, 893, 960, 967, 981, 982, 987, 988, 989, 990, 996, 997, 1051], "selector": [0, 623, 650], "extend": [0, 93, 229, 254, 366, 639, 650, 744, 847, 1051], "function": [0, 31, 67, 68, 69, 70, 71, 91, 97, 101, 102, 105, 112, 122, 133, 138, 144, 152, 179, 186, 187, 218, 222, 225, 226, 236, 254, 264, 268, 309, 345, 360, 361, 362, 431, 438, 439, 465, 467, 482, 483, 484, 485, 486, 487, 489, 490, 491, 503, 554, 564, 566, 568, 570, 583, 584, 585, 594, 595, 597, 603, 605, 606, 610, 615, 623, 639, 650, 681, 685, 689, 710, 719, 735, 745, 785, 826, 840, 841, 842, 843, 857, 915, 938, 948, 962, 963, 969, 974, 1033, 1051, 1059], "data": [0, 1, 6, 16, 19, 29, 30, 31, 32, 36, 47, 48, 52, 58, 67, 68, 70, 74, 75, 80, 81, 85, 87, 90, 91, 92, 93, 94, 95, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 119, 120, 122, 123, 124, 126, 132, 133, 136, 146, 156, 157, 158, 159, 170, 171, 172, 174, 185, 186, 190, 195, 196, 197, 205, 212, 217, 218, 222, 231, 233, 252, 254, 264, 265, 266, 268, 270, 271, 272, 273, 274, 275, 278, 281, 282, 283, 284, 286, 288, 289, 290, 293, 294, 301, 302, 311, 316, 317, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 349, 352, 353, 354, 355, 356, 358, 359, 365, 376, 377, 382, 383, 385, 386, 387, 388, 389, 391, 398, 403, 404, 406, 410, 414, 432, 437, 461, 462, 464, 465, 471, 473, 474, 477, 478, 480, 492, 493, 501, 502, 503, 509, 511, 513, 515, 516, 517, 519, 524, 529, 530, 531, 532, 535, 536, 537, 540, 550, 552, 553, 554, 556, 557, 560, 563, 568, 570, 577, 587, 588, 589, 590, 591, 601, 602, 604, 605, 613, 616, 626, 627, 628, 631, 639, 650, 655, 656, 664, 670, 671, 672, 689, 713, 735, 742, 743, 744, 745, 755, 759, 760, 761, 763, 767, 769, 774, 778, 786, 791, 793, 794, 797, 798, 799, 800, 801, 803, 804, 805, 806, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 830, 833, 834, 835, 836, 837, 845, 846, 857, 863, 865, 866, 868, 869, 871, 872, 873, 874, 878, 887, 888, 890, 894, 898, 916, 938, 940, 944, 946, 958, 959, 969, 974, 980, 981, 982, 984, 986, 987, 988, 990, 991, 994, 995, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1011, 1031, 1032, 1033, 1034, 1036, 1041, 1050, 1051, 1058], "type": [0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 80, 90, 92, 93, 94, 95, 96, 101, 102, 104, 105, 108, 109, 112, 113, 118, 119, 120, 123, 124, 133, 152, 156, 158, 159, 160, 171, 172, 212, 218, 220, 223, 254, 264, 266, 268, 270, 271, 272, 273, 274, 275, 278, 286, 288, 289, 290, 293, 294, 295, 298, 299, 300, 301, 302, 311, 316, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 352, 353, 354, 356, 363, 365, 378, 383, 385, 386, 387, 388, 403, 404, 406, 410, 414, 431, 440, 473, 477, 478, 480, 501, 502, 509, 511, 513, 515, 516, 517, 519, 524, 529, 530, 531, 532, 535, 550, 552, 553, 554, 560, 568, 570, 577, 587, 588, 589, 590, 591, 593, 594, 601, 602, 603, 604, 605, 613, 616, 626, 627, 628, 631, 639, 650, 657, 662, 664, 671, 672, 676, 690, 700, 708, 735, 742, 743, 755, 761, 763, 767, 769, 770, 775, 776, 777, 793, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 833, 834, 835, 837, 845, 855, 863, 865, 866, 868, 869, 871, 872, 873, 874, 878, 887, 888, 890, 894, 898, 915, 944, 946, 969, 980, 981, 982, 984, 986, 987, 988, 990, 991, 994, 995, 1000, 1001, 1002, 1003, 1006, 1031, 1032, 1034, 1042, 1051, 1058], "config": [0, 67, 200, 231, 254, 591, 650, 696, 713, 735], "except": [0, 161, 173, 175, 210, 254, 593, 650, 677, 735, 738, 856, 883, 1021, 1032, 1041, 1051], "test": [0, 103, 105, 650, 673, 680, 735], "util": [0, 97, 597, 650, 664, 735], "sql": [0, 29, 52, 56, 103, 172, 254, 620, 650], "These": [1, 31, 130, 222, 254, 352, 638, 826, 833], "allow": [1, 30, 31, 47, 48, 58, 80, 91, 112, 114, 115, 116, 117, 124, 126, 132, 170, 173, 174, 195, 196, 198, 217, 218, 223, 233, 254, 268, 341, 348, 351, 438, 476, 493, 535, 536, 537, 639, 676, 677, 681, 685, 708, 714, 735, 738, 745, 822, 829, 832, 942, 959, 961, 1006, 1007, 1008, 1033, 1051, 1059], "you": [1, 13, 31, 35, 48, 57, 67, 74, 90, 92, 93, 94, 96, 101, 102, 103, 105, 106, 108, 109, 110, 112, 119, 130, 133, 142, 146, 158, 159, 170, 183, 195, 196, 197, 214, 217, 222, 236, 254, 268, 298, 299, 300, 337, 338, 344, 348, 351, 352, 369, 383, 409, 431, 438, 440, 476, 481, 483, 484, 485, 486, 487, 489, 490, 491, 520, 523, 535, 537, 568, 583, 595, 613, 616, 631, 639, 657, 660, 671, 672, 673, 677, 680, 700, 719, 735, 738, 744, 745, 775, 776, 777, 818, 819, 825, 829, 832, 833, 846, 861, 893, 942, 947, 991, 994, 1006, 1008, 1032, 1041, 1051, 1059], "regist": [1, 52, 54, 55, 56, 57, 68, 69, 70, 71, 125, 127, 1058], "custom": [1, 31, 68, 69, 70, 71, 125, 126, 127, 133, 236, 254, 268, 348, 351, 431, 438, 482, 568, 605, 639, 681, 719, 735, 745, 829, 832, 915, 948, 1051, 1059], "dedic": [1, 91, 170, 196, 254], "namespac": [1, 253, 638, 650, 734], "underli": [1, 76, 83, 90, 92, 93, 94, 96, 108, 109, 110, 121, 124, 126, 146, 170, 171, 196, 212, 254, 287, 317, 318, 322, 326, 328, 329, 330, 332, 334, 336, 339, 342, 343, 344, 346, 353, 354, 355, 356, 476, 492, 510, 512, 639, 735, 738, 744, 762, 794, 795, 799, 803, 805, 806, 810, 812, 815, 817, 820, 823, 824, 825, 827, 834, 835, 836, 837, 846, 942, 958, 969, 981, 983, 1027, 1032, 1051], "polar": [1, 254, 638, 639, 644, 650, 735, 738, 1051, 1058], "class": [1, 2, 3, 4, 5, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 121, 122, 197, 218, 254, 627, 639, 644, 650, 735, 1031, 1032, 1051, 1058], "without": [1, 6, 97, 104, 107, 111, 113, 117, 225, 226, 254, 268, 309, 345, 483, 484, 485, 486, 487, 489, 490, 491, 619, 639, 710, 735, 785, 791, 826, 857, 938, 1032, 1051], "requir": [1, 30, 31, 35, 48, 67, 95, 119, 120, 134, 138, 195, 218, 221, 254, 284, 360, 361, 362, 432, 498, 535, 536, 537, 557, 616, 639, 653, 702, 707, 735, 760, 841, 842, 843, 916, 968, 1006, 1007, 1008, 1032, 1033, 1036, 1051], "subclass": [1, 254], "mixin": 1, "expr": [1, 67, 68, 69, 70, 71, 145, 147, 149, 172, 173, 183, 187, 195, 200, 231, 254, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 635, 639, 640, 641, 644, 645, 646, 647, 663, 665, 676, 677, 691, 696, 699, 713, 735, 785, 795, 848, 885, 886, 891, 893, 897, 910, 913, 967, 981, 985, 1004, 1022, 1051], "ar": [1, 6, 9, 11, 15, 18, 26, 30, 31, 47, 48, 57, 58, 67, 74, 75, 82, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 117, 119, 120, 122, 124, 130, 132, 133, 134, 138, 142, 144, 147, 151, 152, 157, 158, 159, 170, 172, 173, 174, 179, 180, 185, 187, 195, 196, 197, 200, 201, 207, 213, 218, 221, 226, 227, 231, 234, 254, 264, 266, 292, 305, 307, 308, 314, 315, 345, 352, 357, 359, 360, 361, 362, 383, 385, 387, 388, 389, 391, 392, 393, 396, 401, 431, 440, 462, 465, 474, 477, 478, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 500, 503, 505, 506, 518, 519, 520, 523, 524, 535, 537, 548, 564, 565, 566, 567, 573, 576, 578, 579, 580, 585, 586, 588, 589, 606, 607, 610, 611, 619, 622, 623, 624, 627, 628, 630, 632, 633, 635, 638, 639, 640, 641, 644, 645, 646, 647, 650, 653, 660, 665, 670, 671, 672, 673, 676, 677, 680, 681, 685, 686, 690, 693, 696, 697, 702, 707, 710, 713, 714, 717, 735, 738, 742, 744, 783, 784, 826, 833, 839, 840, 841, 842, 843, 854, 861, 865, 868, 869, 871, 872, 873, 874, 881, 885, 915, 940, 944, 948, 954, 971, 974, 989, 991, 994, 995, 1006, 1008, 1020, 1032, 1033, 1041, 1043, 1045, 1047, 1051, 1052, 1055, 1056, 1057, 1059], "all": [1, 8, 15, 18, 23, 26, 31, 36, 54, 67, 73, 90, 93, 95, 96, 101, 102, 104, 105, 106, 110, 112, 114, 115, 121, 122, 126, 139, 142, 148, 161, 166, 168, 170, 171, 174, 175, 179, 182, 183, 190, 195, 196, 197, 206, 210, 215, 217, 223, 225, 227, 254, 265, 266, 267, 285, 303, 309, 315, 316, 363, 368, 374, 378, 380, 382, 385, 388, 392, 393, 395, 399, 409, 414, 428, 431, 438, 439, 456, 463, 469, 474, 479, 498, 504, 506, 511, 517, 518, 519, 522, 525, 526, 528, 534, 547, 560, 565, 577, 585, 586, 588, 593, 595, 600, 615, 622, 623, 624, 630, 639, 644, 650, 657, 660, 662, 664, 666, 681, 685, 690, 700, 701, 708, 714, 735, 738, 785, 787, 791, 793, 856, 863, 878, 883, 893, 898, 912, 915, 940, 975, 982, 988, 989, 990, 993, 996, 997, 999, 1005, 1021, 1051, 1058, 1059], "support": [1, 30, 31, 35, 74, 90, 91, 92, 93, 94, 95, 96, 97, 103, 104, 105, 108, 109, 113, 121, 126, 130, 132, 170, 171, 172, 196, 197, 206, 207, 214, 218, 254, 426, 465, 504, 506, 529, 577, 639, 644, 676, 701, 702, 735, 738, 910, 975, 1000, 1033, 1051, 1058], "target": [1, 29, 30, 31, 72, 254, 516, 535, 536, 537, 588, 987, 1006, 1007, 1008], "thi": [1, 6, 8, 12, 13, 26, 28, 30, 31, 33, 35, 39, 47, 48, 52, 53, 57, 58, 67, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 126, 128, 130, 132, 133, 134, 138, 142, 143, 144, 146, 151, 152, 157, 158, 159, 160, 164, 166, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 185, 188, 189, 190, 195, 196, 197, 198, 200, 204, 206, 208, 209, 212, 214, 217, 218, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 236, 237, 253, 254, 264, 267, 268, 269, 278, 284, 291, 292, 294, 295, 303, 309, 316, 317, 329, 337, 338, 341, 344, 345, 348, 351, 355, 359, 365, 381, 382, 383, 387, 395, 399, 409, 410, 414, 421, 422, 423, 424, 427, 431, 432, 435, 436, 438, 444, 445, 446, 447, 448, 449, 459, 460, 462, 465, 469, 471, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 493, 495, 497, 498, 499, 504, 505, 506, 516, 521, 522, 527, 528, 534, 535, 537, 538, 543, 547, 555, 557, 558, 559, 560, 564, 566, 568, 569, 578, 581, 583, 585, 588, 589, 594, 595, 597, 603, 606, 610, 616, 619, 623, 627, 639, 650, 651, 653, 654, 657, 660, 662, 664, 670, 671, 672, 674, 676, 677, 681, 685, 686, 690, 693, 696, 699, 700, 701, 702, 707, 708, 710, 713, 714, 715, 716, 719, 720, 734, 735, 738, 744, 745, 754, 760, 766, 769, 770, 785, 791, 793, 794, 795, 806, 818, 819, 822, 825, 826, 829, 832, 836, 840, 845, 846, 853, 854, 857, 862, 867, 868, 870, 875, 877, 879, 880, 882, 893, 894, 898, 905, 906, 907, 908, 911, 916, 920, 922, 923, 924, 925, 927, 928, 930, 931, 933, 937, 938, 939, 940, 941, 942, 943, 944, 947, 948, 949, 950, 952, 955, 956, 957, 959, 962, 963, 964, 967, 968, 969, 970, 975, 976, 978, 987, 992, 993, 998, 999, 1005, 1006, 1008, 1009, 1014, 1015, 1019, 1020, 1027, 1029, 1031, 1032, 1033, 1035, 1036, 1038, 1040, 1041, 1051, 1058, 1059], "featur": [1, 35, 39, 58, 72, 254], "i": [1, 6, 12, 13, 15, 28, 30, 31, 32, 33, 34, 39, 47, 48, 52, 57, 58, 67, 72, 73, 74, 77, 79, 80, 82, 86, 88, 90, 91, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 121, 122, 123, 124, 126, 128, 132, 133, 134, 142, 144, 146, 153, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 177, 179, 180, 183, 185, 186, 187, 195, 196, 197, 198, 206, 207, 208, 209, 210, 212, 217, 218, 221, 222, 223, 225, 226, 227, 228, 233, 236, 237, 253, 254, 261, 264, 266, 267, 268, 269, 279, 292, 303, 309, 316, 318, 328, 341, 345, 348, 352, 360, 361, 362, 365, 378, 381, 383, 396, 402, 409, 412, 426, 430, 431, 435, 438, 440, 444, 447, 449, 465, 474, 476, 477, 478, 481, 483, 484, 485, 486, 487, 489, 490, 491, 493, 494, 495, 499, 500, 503, 504, 505, 506, 508, 510, 511, 516, 517, 519, 521, 522, 524, 525, 527, 528, 529, 532, 534, 535, 536, 537, 540, 543, 560, 561, 564, 566, 568, 569, 574, 577, 578, 580, 581, 583, 584, 585, 588, 589, 595, 604, 606, 610, 616, 617, 618, 619, 621, 623, 627, 629, 630, 639, 653, 657, 660, 662, 664, 670, 671, 672, 675, 676, 677, 679, 681, 685, 686, 690, 700, 701, 702, 703, 707, 708, 710, 711, 716, 719, 720, 735, 738, 743, 744, 745, 785, 793, 795, 805, 822, 826, 829, 833, 840, 841, 842, 843, 845, 846, 854, 855, 856, 857, 862, 864, 870, 875, 876, 877, 879, 880, 881, 883, 886, 893, 896, 910, 914, 915, 938, 940, 942, 944, 947, 955, 957, 959, 960, 961, 962, 963, 964, 970, 971, 974, 975, 978, 981, 982, 987, 988, 990, 992, 993, 995, 996, 998, 999, 1000, 1003, 1005, 1006, 1007, 1008, 1011, 1014, 1021, 1027, 1032, 1033, 1039, 1040, 1041, 1051, 1058, 1059], "primarili": 1, "intend": [1, 588], "us": [1, 10, 12, 13, 18, 23, 24, 28, 29, 31, 35, 38, 48, 52, 53, 54, 55, 57, 58, 67, 74, 91, 93, 94, 96, 98, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 121, 122, 123, 124, 125, 126, 128, 133, 140, 142, 147, 148, 152, 157, 158, 159, 166, 168, 170, 171, 173, 177, 179, 182, 183, 185, 186, 187, 195, 196, 197, 198, 200, 207, 208, 209, 214, 215, 216, 217, 218, 222, 223, 225, 226, 227, 228, 231, 234, 236, 254, 262, 268, 269, 279, 287, 288, 295, 309, 314, 315, 344, 348, 351, 352, 355, 357, 360, 361, 362, 368, 369, 382, 383, 396, 409, 431, 438, 440, 443, 465, 471, 474, 476, 478, 481, 483, 484, 485, 486, 487, 489, 490, 491, 493, 495, 498, 499, 503, 505, 506, 508, 510, 512, 513, 514, 516, 517, 518, 520, 521, 525, 527, 529, 531, 533, 535, 536, 537, 540, 561, 564, 565, 566, 567, 568, 569, 577, 579, 580, 583, 585, 586, 588, 589, 595, 597, 604, 606, 607, 610, 611, 613, 616, 617, 618, 619, 621, 622, 623, 624, 627, 629, 631, 638, 639, 649, 650, 657, 659, 660, 665, 666, 670, 671, 672, 673, 677, 679, 680, 685, 696, 702, 703, 708, 710, 711, 713, 717, 719, 735, 738, 744, 745, 762, 763, 770, 785, 786, 825, 829, 832, 833, 836, 839, 841, 842, 843, 848, 849, 854, 857, 860, 861, 881, 893, 915, 921, 938, 940, 942, 944, 947, 959, 962, 963, 964, 968, 970, 974, 978, 981, 983, 984, 987, 988, 989, 991, 992, 996, 998, 1000, 1002, 1006, 1007, 1008, 1011, 1022, 1028, 1030, 1031, 1032, 1033, 1040, 1041, 1051, 1058, 1059], "librari": [1, 76, 83, 438, 639, 1059], "author": 1, "domain": [1, 517, 988], "specif": [1, 26, 30, 31, 90, 92, 94, 96, 101, 103, 104, 108, 109, 113, 123, 124, 170, 254, 348, 351, 482, 535, 536, 537, 540, 639, 735, 738, 829, 832, 948, 1006, 1007, 1008, 1011, 1051, 1059], "capabl": [1, 31, 254], "which": [1, 9, 18, 27, 28, 31, 32, 33, 34, 35, 47, 48, 67, 68, 69, 70, 71, 93, 101, 102, 103, 104, 105, 112, 113, 119, 125, 127, 134, 142, 146, 147, 157, 158, 159, 173, 217, 221, 223, 227, 254, 264, 292, 341, 345, 348, 352, 366, 383, 385, 388, 389, 391, 392, 393, 431, 449, 481, 483, 484, 485, 486, 487, 489, 490, 491, 524, 570, 588, 589, 627, 628, 630, 639, 653, 660, 662, 671, 672, 677, 707, 708, 716, 735, 744, 822, 826, 829, 833, 846, 847, 861, 865, 869, 871, 872, 873, 874, 915, 947, 962, 995, 1032, 1051, 1059], "mai": [1, 30, 39, 48, 74, 90, 92, 93, 94, 96, 101, 104, 106, 108, 109, 113, 114, 117, 133, 144, 146, 158, 159, 173, 203, 204, 218, 225, 226, 227, 254, 268, 309, 316, 317, 329, 341, 345, 352, 425, 430, 431, 438, 448, 483, 484, 485, 486, 487, 489, 490, 491, 496, 497, 535, 537, 583, 584, 588, 595, 615, 639, 671, 672, 677, 681, 698, 699, 710, 715, 719, 735, 744, 745, 785, 793, 794, 806, 822, 826, 833, 840, 846, 857, 909, 914, 938, 966, 967, 1006, 1008, 1032, 1051, 1059], "exist": [1, 29, 30, 31, 67, 104, 113, 124, 222, 231, 254, 263, 286, 289, 290, 318, 639, 713, 735, 795], "belong": [1, 158, 254, 671, 735], "core": [1, 218, 254, 1059], "cannot": [1, 91, 101, 102, 105, 106, 119, 128, 133, 197, 198, 236, 254, 268, 287, 440, 493, 512, 531, 545, 568, 639, 700, 719, 735, 745, 762, 959, 983, 1002, 1051], "overrid": [1, 31, 90, 92, 93, 94, 95, 96, 101, 108, 109, 121, 122, 126, 128, 254, 440, 639, 735, 921, 1051], "str": [1, 7, 9, 12, 14, 15, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 47, 48, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 75, 90, 92, 93, 94, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 121, 122, 124, 125, 126, 127, 130, 134, 137, 139, 140, 141, 142, 143, 144, 145, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 166, 168, 169, 170, 172, 173, 176, 177, 178, 179, 180, 181, 183, 185, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 261, 262, 263, 268, 286, 288, 289, 290, 294, 310, 313, 319, 341, 344, 345, 348, 351, 352, 363, 365, 369, 371, 375, 381, 383, 390, 405, 406, 412, 413, 414, 426, 429, 431, 439, 440, 448, 450, 451, 453, 465, 467, 469, 471, 477, 479, 481, 483, 484, 485, 486, 487, 489, 490, 491, 497, 498, 505, 506, 544, 545, 547, 550, 562, 563, 565, 567, 568, 569, 571, 572, 575, 577, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 603, 605, 607, 608, 609, 611, 612, 614, 615, 616, 617, 618, 620, 621, 622, 624, 625, 626, 627, 628, 629, 639, 645, 653, 657, 658, 659, 660, 662, 663, 664, 667, 669, 670, 671, 672, 674, 676, 677, 685, 686, 690, 692, 693, 694, 697, 699, 700, 701, 702, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 738, 741, 767, 769, 786, 787, 796, 822, 825, 826, 829, 832, 833, 845, 849, 890, 891, 898, 915, 921, 930, 931, 938, 943, 962, 963, 1015, 1017, 1028, 1029, 1030, 1051, 1055, 1058, 1059], "dt": [1, 67, 159, 254, 588, 591, 647, 672, 735, 738, 1057], "attempt": [1, 217, 254, 588, 589], "do": [1, 31, 47, 48, 67, 73, 74, 112, 146, 158, 159, 173, 187, 212, 222, 225, 254, 309, 409, 465, 522, 528, 534, 613, 616, 631, 639, 657, 662, 671, 672, 677, 681, 690, 700, 735, 738, 744, 785, 846, 893, 993, 999, 1005, 1032, 1041, 1051], "so": [1, 58, 103, 112, 128, 156, 158, 159, 187, 254, 279, 292, 383, 412, 431, 522, 528, 534, 639, 671, 672, 735, 896, 993, 999, 1005], "rais": [1, 14, 18, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 119, 120, 187, 195, 254, 287, 344, 352, 430, 448, 510, 512, 524, 535, 536, 537, 540, 604, 762, 825, 833, 914, 981, 983, 995, 1006, 1007, 1008, 1011, 1032, 1041, 1051], "an": [1, 6, 26, 29, 30, 31, 39, 68, 70, 71, 73, 76, 80, 81, 83, 90, 101, 102, 103, 104, 105, 107, 110, 112, 114, 122, 124, 126, 133, 135, 136, 144, 147, 149, 152, 158, 159, 170, 171, 173, 183, 187, 193, 195, 212, 217, 222, 225, 231, 236, 254, 263, 264, 268, 287, 293, 298, 299, 300, 304, 305, 306, 307, 308, 309, 318, 319, 344, 348, 355, 366, 368, 369, 375, 395, 407, 409, 412, 430, 431, 438, 439, 449, 470, 478, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 510, 512, 517, 535, 536, 537, 540, 550, 556, 564, 566, 570, 574, 577, 585, 588, 589, 592, 597, 601, 602, 604, 606, 610, 613, 615, 616, 619, 622, 623, 627, 628, 630, 631, 639, 650, 655, 656, 657, 662, 664, 667, 671, 672, 677, 681, 690, 700, 713, 714, 719, 735, 738, 745, 762, 767, 774, 775, 776, 777, 778, 781, 782, 783, 784, 785, 795, 829, 836, 840, 847, 870, 891, 893, 896, 914, 947, 948, 949, 950, 951, 952, 953, 955, 956, 957, 962, 963, 981, 983, 988, 1006, 1007, 1008, 1011, 1032, 1041, 1051, 1058], "attributeerror": 1, "howev": [1, 93, 133, 144, 217, 254, 588, 840, 1051], "can": [1, 13, 31, 35, 38, 57, 67, 81, 93, 101, 102, 105, 106, 110, 112, 114, 116, 117, 122, 123, 124, 126, 128, 130, 133, 134, 135, 143, 152, 157, 158, 159, 166, 168, 183, 187, 197, 200, 207, 217, 221, 222, 225, 231, 236, 254, 268, 305, 308, 309, 337, 338, 341, 344, 352, 366, 383, 395, 409, 431, 448, 456, 465, 469, 471, 476, 483, 484, 485, 486, 487, 489, 490, 491, 493, 495, 498, 499, 500, 503, 506, 519, 522, 528, 534, 535, 537, 547, 560, 573, 577, 595, 597, 630, 638, 639, 649, 653, 657, 662, 671, 672, 696, 702, 707, 713, 715, 735, 738, 745, 785, 818, 819, 822, 825, 826, 833, 847, 861, 893, 915, 926, 938, 942, 962, 963, 964, 968, 971, 974, 990, 993, 999, 1005, 1006, 1008, 1032, 1051, 1058], "other": [1, 18, 31, 35, 57, 101, 102, 105, 112, 119, 120, 142, 146, 153, 172, 173, 179, 180, 195, 197, 200, 226, 229, 231, 252, 254, 261, 265, 267, 279, 298, 299, 300, 313, 358, 359, 373, 376, 377, 383, 387, 398, 405, 421, 422, 423, 424, 437, 440, 444, 447, 455, 457, 461, 462, 464, 506, 546, 554, 556, 563, 564, 565, 566, 567, 576, 578, 579, 585, 586, 588, 606, 607, 610, 611, 619, 622, 623, 624, 639, 650, 660, 676, 677, 685, 686, 696, 710, 713, 714, 735, 738, 744, 775, 776, 777, 789, 846, 868, 889, 905, 906, 907, 908, 961, 1034, 1042, 1050, 1051], "onli": [1, 18, 26, 31, 52, 54, 58, 67, 72, 74, 101, 102, 104, 105, 106, 110, 112, 113, 114, 115, 116, 124, 126, 130, 133, 142, 146, 158, 159, 170, 172, 173, 177, 196, 197, 209, 214, 216, 217, 227, 236, 254, 262, 268, 279, 292, 297, 298, 299, 300, 341, 349, 363, 372, 395, 465, 469, 476, 483, 484, 485, 486, 487, 489, 490, 491, 547, 558, 568, 588, 589, 639, 657, 660, 671, 672, 673, 676, 677, 680, 719, 735, 744, 745, 772, 775, 776, 777, 786, 822, 846, 852, 870, 938, 942, 1027, 1030, 1051, 1058, 1059], "gener": [1, 103, 121, 122, 123, 124, 126, 138, 187, 198, 215, 217, 222, 254, 493, 499, 570, 588, 601, 602, 616, 627, 628, 639, 735, 959, 970, 1028, 1051, 1059], "userwarn": 1, "pl": [1, 2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 31, 32, 33, 34, 35, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 67, 68, 69, 70, 71, 74, 75, 90, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 126, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 639, 651, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 738, 741, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 766, 767, 769, 770, 771, 772, 773, 774, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 842, 843, 846, 847, 848, 849, 850, 852, 855, 856, 857, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 882, 885, 886, 892, 893, 894, 897, 898, 900, 905, 906, 908, 909, 910, 911, 913, 915, 920, 921, 922, 923, 924, 925, 926, 927, 928, 934, 935, 936, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 966, 970, 971, 972, 973, 975, 976, 977, 978, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1051, 1058, 1059], "register_expr_namespac": [1, 68, 70, 71], "greet": 1, "def": [1, 68, 69, 70, 71, 122, 123, 124, 126, 130, 186, 222, 254, 261, 467, 517, 563, 605, 639, 689, 735, 738, 988, 1059], "__init__": [1, 2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 121, 1058], "self": [1, 53, 54, 55, 57, 68, 69, 70, 71, 73, 135, 136, 139, 146, 161, 163, 164, 175, 176, 177, 178, 179, 181, 184, 185, 187, 189, 190, 192, 193, 198, 203, 205, 206, 208, 209, 210, 215, 222, 224, 227, 228, 229, 232, 233, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 285, 291, 292, 293, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 639, 653, 654, 656, 657, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 735, 744, 745, 767, 778, 846, 850, 858, 920, 921, 932, 935, 936, 941, 962, 963, 964, 976, 1038, 1042, 1051], "_expr": [1, 69], "hello": [1, 18, 53, 56, 522, 528, 534, 898, 993, 999, 1005], "return": [1, 9, 26, 28, 31, 32, 33, 34, 47, 48, 52, 56, 67, 68, 69, 70, 71, 72, 73, 82, 84, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 123, 129, 133, 134, 135, 138, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 156, 157, 158, 159, 161, 163, 169, 170, 171, 172, 174, 175, 182, 183, 185, 186, 187, 195, 196, 197, 198, 210, 211, 217, 218, 221, 222, 223, 227, 231, 236, 239, 243, 248, 254, 264, 266, 270, 271, 272, 273, 274, 275, 278, 279, 286, 288, 289, 290, 291, 301, 302, 311, 316, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 349, 350, 352, 353, 354, 356, 365, 379, 383, 385, 386, 387, 388, 389, 391, 392, 393, 400, 403, 404, 406, 410, 412, 413, 414, 429, 430, 436, 440, 449, 451, 456, 467, 473, 477, 478, 480, 493, 494, 500, 501, 502, 509, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 527, 529, 530, 531, 532, 543, 549, 550, 551, 552, 553, 555, 556, 558, 559, 560, 563, 564, 568, 570, 571, 572, 573, 574, 577, 587, 588, 589, 590, 591, 597, 599, 601, 602, 604, 605, 613, 616, 619, 622, 625, 626, 627, 628, 630, 631, 639, 653, 655, 657, 660, 661, 662, 664, 671, 672, 673, 679, 680, 681, 689, 690, 700, 705, 706, 707, 708, 713, 716, 722, 726, 731, 735, 738, 742, 743, 744, 745, 752, 753, 755, 756, 761, 763, 766, 774, 786, 787, 793, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 830, 831, 833, 834, 835, 837, 840, 845, 846, 854, 856, 857, 863, 865, 866, 868, 869, 871, 872, 873, 874, 878, 880, 883, 887, 888, 890, 894, 896, 897, 898, 913, 914, 920, 921, 926, 938, 944, 945, 946, 947, 959, 960, 961, 963, 971, 980, 981, 982, 984, 986, 987, 988, 990, 991, 992, 994, 995, 998, 1000, 1001, 1002, 1003, 1014, 1021, 1023, 1035, 1037, 1038, 1042, 1051, 1058, 1059], "lit": [1, 263, 383, 395, 583, 595, 613, 616, 630, 631, 639, 849, 1051], "alia": [1, 12, 67, 69, 71, 158, 159, 175, 224, 231, 254, 261, 265, 268, 286, 288, 289, 290, 291, 298, 299, 300, 304, 305, 306, 307, 308, 312, 316, 317, 318, 319, 322, 323, 324, 325, 327, 329, 330, 331, 333, 335, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 358, 359, 369, 371, 373, 376, 377, 381, 383, 386, 387, 395, 398, 399, 400, 407, 409, 421, 422, 423, 424, 437, 439, 440, 452, 455, 457, 461, 462, 464, 466, 468, 474, 476, 494, 510, 511, 514, 516, 517, 520, 523, 529, 531, 532, 533, 544, 545, 546, 554, 555, 556, 562, 563, 564, 566, 568, 570, 571, 572, 575, 576, 578, 579, 583, 584, 585, 588, 591, 592, 595, 596, 605, 606, 610, 615, 616, 622, 623, 627, 630, 639, 671, 672, 674, 680, 709, 713, 735, 794, 796, 802, 822, 825, 829, 831, 836, 883, 893, 921, 987, 988, 1002, 1003, 1051], "hi": [1, 471, 639], "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 18, 53, 56, 522, 528, 534, 541, 898, 993, 999, 1005, 1012], "select": [1, 29, 52, 53, 54, 67, 68, 69, 70, 100, 101, 102, 103, 104, 106, 110, 112, 117, 123, 133, 169, 173, 183, 186, 195, 206, 219, 224, 227, 254, 260, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 289, 290, 291, 294, 296, 297, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 317, 318, 319, 323, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 347, 350, 352, 353, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 370, 372, 374, 378, 380, 381, 382, 384, 385, 387, 388, 390, 394, 395, 396, 397, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 427, 428, 431, 432, 433, 434, 435, 436, 438, 441, 442, 443, 454, 456, 458, 459, 460, 463, 464, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 488, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 515, 516, 517, 518, 519, 521, 522, 524, 527, 528, 530, 531, 532, 534, 535, 538, 539, 541, 542, 544, 545, 548, 551, 552, 553, 555, 557, 558, 559, 560, 561, 564, 566, 568, 569, 571, 572, 573, 574, 575, 577, 578, 580, 581, 582, 583, 584, 585, 588, 591, 593, 594, 595, 596, 597, 599, 603, 606, 608, 609, 610, 612, 615, 616, 620, 621, 622, 623, 625, 629, 639, 658, 674, 677, 689, 701, 709, 714, 716, 735, 738, 759, 760, 825, 833, 885, 886, 893, 962, 963, 975, 990, 1006, 1022, 1051, 1058], "shape": [1, 2, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 49, 52, 53, 54, 56, 58, 59, 67, 68, 69, 70, 71, 74, 75, 87, 90, 92, 93, 94, 95, 96, 97, 112, 117, 124, 126, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 152, 154, 155, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 172, 173, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 198, 200, 203, 204, 206, 207, 208, 209, 210, 211, 213, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 639, 653, 655, 657, 659, 660, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 696, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 738, 741, 744, 745, 746, 747, 748, 749, 750, 751, 754, 755, 756, 757, 758, 759, 760, 766, 767, 769, 770, 771, 772, 774, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 842, 843, 846, 847, 848, 849, 850, 852, 855, 856, 857, 860, 861, 863, 865, 868, 869, 871, 872, 873, 874, 878, 880, 885, 886, 892, 893, 894, 897, 898, 900, 905, 906, 908, 909, 910, 911, 913, 915, 920, 921, 926, 934, 935, 936, 938, 940, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 962, 963, 966, 970, 971, 972, 973, 975, 976, 977, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1019, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1051, 1058], "3": [1, 2, 10, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 49, 52, 54, 55, 57, 58, 59, 67, 68, 69, 70, 71, 74, 75, 90, 92, 93, 94, 95, 96, 97, 103, 105, 112, 117, 118, 119, 120, 123, 124, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 261, 262, 263, 264, 268, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 294, 295, 296, 297, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 323, 325, 326, 328, 334, 336, 343, 344, 345, 346, 348, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 398, 399, 400, 406, 407, 408, 409, 410, 411, 412, 413, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 433, 434, 435, 436, 437, 439, 440, 455, 456, 457, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 503, 505, 506, 507, 510, 513, 514, 516, 517, 518, 520, 523, 525, 529, 530, 531, 532, 533, 536, 540, 544, 545, 546, 547, 549, 550, 551, 555, 558, 559, 560, 562, 563, 568, 570, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 592, 593, 594, 595, 596, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 639, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 738, 741, 744, 745, 746, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 766, 767, 769, 770, 771, 772, 773, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 794, 795, 796, 799, 800, 802, 803, 805, 807, 808, 809, 811, 813, 814, 815, 817, 821, 823, 825, 826, 827, 829, 831, 832, 833, 835, 836, 840, 842, 843, 846, 847, 848, 849, 850, 852, 855, 856, 857, 860, 861, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 881, 882, 892, 893, 894, 897, 900, 905, 906, 908, 909, 910, 911, 913, 915, 920, 921, 922, 923, 924, 925, 926, 927, 928, 934, 935, 936, 938, 939, 940, 943, 944, 945, 946, 947, 948, 951, 952, 953, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 966, 970, 972, 973, 974, 975, 976, 978, 984, 985, 987, 988, 989, 991, 994, 996, 1000, 1004, 1007, 1011, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1051, 1058, 1059], "1": [1, 2, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 67, 68, 69, 70, 71, 74, 75, 90, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 112, 113, 117, 118, 119, 120, 121, 124, 126, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 291, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 513, 514, 515, 516, 517, 518, 519, 521, 522, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 569, 570, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 629, 630, 639, 653, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 738, 741, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 766, 767, 770, 771, 772, 773, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 841, 842, 843, 846, 847, 848, 849, 850, 852, 855, 856, 857, 860, 861, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 880, 882, 885, 886, 892, 893, 894, 896, 897, 900, 905, 906, 908, 909, 910, 911, 913, 915, 920, 922, 923, 924, 925, 926, 927, 928, 934, 935, 936, 938, 939, 940, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 970, 971, 972, 973, 974, 975, 976, 977, 978, 980, 987, 989, 990, 996, 1002, 1003, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1051, 1058, 1059], "2": [1, 2, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 49, 52, 54, 55, 57, 58, 59, 67, 68, 69, 70, 71, 74, 75, 90, 92, 93, 94, 95, 96, 97, 103, 112, 117, 118, 119, 120, 123, 124, 126, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 276, 278, 279, 280, 281, 282, 283, 284, 285, 291, 293, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 316, 318, 319, 322, 323, 324, 326, 327, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 455, 456, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 503, 504, 505, 506, 507, 509, 511, 514, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 535, 537, 538, 539, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 601, 602, 603, 604, 605, 606, 608, 609, 610, 612, 615, 619, 620, 621, 622, 623, 625, 628, 629, 630, 639, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 738, 741, 744, 745, 747, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 766, 770, 771, 772, 773, 774, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 793, 795, 797, 798, 801, 803, 808, 809, 815, 817, 818, 819, 824, 825, 826, 827, 830, 833, 835, 837, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 852, 855, 856, 857, 860, 861, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 882, 892, 893, 894, 897, 898, 900, 905, 906, 908, 909, 910, 911, 913, 915, 917, 920, 921, 922, 923, 924, 925, 926, 927, 928, 934, 935, 936, 938, 939, 940, 943, 944, 945, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 966, 970, 972, 974, 975, 976, 977, 978, 980, 982, 987, 988, 989, 990, 993, 994, 995, 996, 997, 999, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1051, 1058, 1059], "column_0": [1, 133, 222, 254], "register_dataframe_namespac": [1, 69, 70, 71], "split": [1, 31, 68, 171, 254, 531, 532, 1002, 1003], "splitfram": [1, 68], "df": [1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 49, 52, 53, 68, 69, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 112, 122, 124, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 591, 592, 593, 594, 595, 596, 597, 599, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 615, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 639, 671, 672, 709, 710, 716, 719, 722, 731, 735, 738, 759, 760, 770, 825, 885, 886, 893, 990, 997, 1002, 1003, 1029, 1051, 1059], "_df": [1, 68], "by_alternate_row": 1, "list": [1, 2, 30, 31, 38, 52, 56, 67, 68, 70, 73, 90, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 112, 113, 122, 123, 124, 126, 137, 140, 143, 144, 145, 149, 155, 157, 158, 163, 170, 182, 185, 195, 196, 197, 200, 207, 213, 214, 222, 223, 224, 225, 231, 234, 235, 254, 262, 284, 310, 365, 371, 380, 438, 449, 450, 465, 471, 477, 478, 482, 483, 484, 485, 486, 487, 489, 490, 491, 505, 506, 517, 530, 544, 545, 550, 554, 570, 573, 577, 578, 589, 592, 600, 602, 604, 620, 622, 623, 628, 639, 658, 659, 661, 663, 670, 671, 685, 696, 702, 708, 709, 713, 714, 717, 718, 735, 738, 760, 773, 786, 840, 845, 850, 853, 857, 858, 868, 938, 944, 948, 949, 950, 951, 952, 953, 955, 956, 957, 960, 988, 1001, 1022, 1031, 1034, 1051, 1059], "with_row_count": [1, 254, 440, 483, 484, 486, 489, 490, 491, 639, 735, 963, 1051], "name": [1, 16, 20, 22, 29, 31, 33, 53, 54, 55, 56, 57, 68, 69, 70, 71, 74, 79, 90, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 120, 121, 122, 124, 125, 126, 127, 133, 134, 137, 140, 141, 142, 145, 150, 151, 154, 156, 157, 169, 170, 172, 173, 179, 180, 185, 187, 191, 195, 196, 197, 199, 200, 207, 213, 215, 217, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 254, 263, 268, 286, 288, 289, 290, 363, 383, 395, 431, 439, 448, 450, 465, 469, 506, 517, 544, 545, 547, 564, 565, 566, 567, 569, 571, 572, 573, 576, 577, 578, 579, 580, 582, 585, 586, 588, 593, 599, 600, 606, 607, 610, 611, 614, 616, 617, 618, 619, 622, 623, 624, 625, 627, 630, 639, 653, 658, 659, 660, 663, 670, 676, 677, 685, 686, 693, 695, 696, 702, 707, 708, 709, 710, 713, 715, 716, 717, 735, 738, 741, 774, 786, 915, 938, 943, 987, 988, 996, 1015, 1017, 1028, 1029, 1033, 1051, 1058, 1059], "n": [1, 12, 15, 23, 34, 38, 40, 54, 55, 68, 69, 70, 71, 99, 101, 102, 112, 133, 135, 146, 158, 161, 170, 171, 175, 196, 197, 198, 208, 210, 211, 214, 216, 228, 239, 248, 254, 291, 309, 312, 317, 318, 325, 350, 355, 366, 379, 400, 408, 413, 421, 429, 431, 466, 467, 477, 489, 491, 493, 503, 508, 525, 528, 531, 532, 534, 537, 549, 551, 555, 556, 561, 563, 580, 588, 589, 597, 599, 613, 616, 617, 618, 621, 625, 629, 631, 639, 655, 657, 671, 673, 680, 703, 705, 706, 711, 722, 731, 735, 738, 744, 766, 774, 785, 788, 794, 795, 802, 831, 836, 846, 847, 856, 883, 892, 897, 905, 913, 915, 934, 955, 957, 959, 974, 978, 996, 1002, 1003, 1008, 1021, 1023, 1030, 1035, 1040, 1051, 1058, 1059], "filter": [1, 68, 104, 112, 113, 117, 142, 166, 167, 168, 236, 254, 514, 533, 562, 595, 639, 660, 664, 674, 719, 735, 738, 962, 1051], "col": [1, 12, 28, 31, 67, 68, 69, 70, 94, 96, 112, 122, 124, 133, 145, 149, 157, 158, 159, 167, 169, 174, 183, 186, 195, 200, 207, 224, 231, 234, 254, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 381, 382, 383, 384, 386, 387, 389, 390, 391, 394, 395, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 443, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 541, 542, 543, 544, 545, 546, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 574, 576, 578, 579, 583, 584, 585, 591, 594, 595, 596, 597, 598, 603, 606, 610, 614, 615, 623, 630, 639, 656, 663, 667, 670, 671, 672, 674, 679, 689, 696, 702, 709, 713, 714, 717, 735, 738, 759, 760, 770, 822, 825, 885, 886, 893, 944, 962, 963, 990, 1006, 1051, 1059], "0": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 35, 48, 49, 52, 57, 67, 68, 69, 71, 101, 102, 103, 105, 106, 110, 112, 114, 115, 116, 117, 118, 121, 122, 123, 124, 126, 133, 135, 136, 138, 139, 140, 143, 147, 148, 152, 153, 155, 156, 157, 158, 160, 164, 169, 170, 171, 172, 174, 176, 177, 178, 181, 182, 183, 184, 187, 188, 189, 193, 196, 197, 198, 199, 200, 204, 206, 207, 208, 209, 215, 216, 217, 218, 219, 222, 225, 227, 228, 231, 232, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 260, 262, 263, 265, 270, 271, 272, 273, 274, 275, 278, 279, 280, 292, 293, 296, 297, 299, 300, 301, 302, 304, 309, 310, 311, 314, 315, 326, 330, 331, 333, 334, 340, 346, 347, 352, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 372, 373, 376, 377, 378, 382, 385, 388, 389, 391, 392, 393, 395, 396, 398, 403, 404, 407, 409, 412, 418, 431, 433, 434, 435, 437, 438, 440, 441, 442, 443, 454, 455, 457, 459, 460, 461, 462, 463, 464, 466, 467, 468, 471, 472, 473, 474, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 498, 500, 501, 502, 503, 507, 508, 516, 517, 535, 537, 543, 546, 548, 552, 553, 554, 556, 561, 562, 564, 570, 571, 572, 573, 574, 575, 576, 578, 580, 582, 583, 588, 590, 592, 595, 601, 602, 608, 609, 613, 614, 615, 616, 620, 626, 627, 628, 629, 630, 631, 639, 655, 656, 659, 661, 665, 666, 670, 671, 676, 679, 684, 688, 690, 691, 695, 696, 699, 700, 702, 703, 711, 713, 714, 715, 717, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 735, 738, 744, 746, 747, 748, 749, 750, 751, 752, 754, 756, 767, 771, 772, 774, 779, 780, 785, 786, 787, 789, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 820, 821, 827, 828, 833, 839, 841, 842, 843, 848, 852, 855, 857, 865, 867, 869, 871, 872, 873, 874, 880, 881, 893, 896, 915, 920, 923, 924, 934, 938, 939, 940, 947, 948, 950, 951, 953, 954, 955, 957, 958, 959, 971, 972, 973, 977, 978, 980, 987, 988, 990, 1006, 1008, 1014, 1024, 1025, 1028, 1033, 1034, 1038, 1040, 1041, 1051, 1059], "drop": [1, 93, 133, 141, 142, 223, 231, 254, 312, 314, 315, 408, 471, 639, 660, 708, 713, 735, 788, 790, 791, 892, 938, 1051], "aaa": [1, 31, 254, 510, 544, 545, 981], "bbb": [1, 31, 254, 544, 545, 738], "ccc": [1, 31, 254, 544, 545], "ddd": [1, 31, 254, 544, 545], "eee": [1, 31, 254, 738], "fff": 1, "column": [1, 15, 16, 19, 20, 22, 31, 33, 38, 58, 67, 68, 74, 77, 79, 90, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 124, 132, 133, 134, 138, 140, 141, 142, 143, 145, 150, 151, 154, 156, 157, 158, 159, 163, 164, 169, 170, 172, 173, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 195, 196, 197, 199, 200, 201, 207, 208, 209, 213, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 234, 254, 263, 264, 266, 268, 278, 310, 318, 320, 321, 322, 326, 328, 329, 330, 332, 334, 336, 339, 342, 343, 346, 348, 349, 351, 353, 354, 356, 363, 365, 369, 371, 383, 395, 405, 410, 427, 430, 431, 440, 446, 448, 450, 465, 469, 471, 475, 477, 478, 483, 484, 485, 486, 487, 489, 490, 491, 498, 505, 506, 515, 531, 532, 535, 536, 537, 538, 540, 547, 562, 564, 565, 566, 567, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 653, 659, 660, 661, 663, 670, 671, 672, 676, 677, 681, 682, 683, 684, 685, 687, 688, 689, 691, 693, 695, 696, 697, 702, 703, 704, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 719, 735, 738, 742, 743, 786, 797, 798, 799, 803, 805, 806, 810, 812, 815, 817, 820, 823, 824, 827, 829, 830, 832, 834, 835, 837, 845, 889, 894, 911, 914, 938, 944, 968, 986, 1002, 1003, 1006, 1007, 1008, 1009, 1011, 1019, 1028, 1029, 1051, 1059], "txt": [1, 12, 112], "utf8": [1, 10, 18, 58, 75, 93, 97, 101, 102, 112, 121, 123, 126, 143, 144, 145, 152, 199, 217, 254, 288, 348, 351, 414, 440, 509, 513, 515, 516, 517, 519, 520, 529, 530, 531, 532, 535, 536, 537, 538, 540, 577, 579, 639, 661, 663, 695, 735, 738, 829, 832, 879, 898, 980, 984, 986, 987, 988, 990, 991, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1011, 1051], "register_lazyframe_namespac": [1, 68, 69, 71], "dtypeoper": [1, 70], "ldf": [1, 70, 717, 718, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730], "_ldf": [1, 70], "upcast_integer_typ": [1, 70], "with_column": [1, 12, 70, 159, 186, 254, 261, 263, 268, 279, 288, 293, 295, 298, 299, 300, 305, 308, 310, 312, 316, 322, 324, 342, 344, 348, 351, 354, 358, 359, 367, 368, 373, 376, 377, 378, 382, 383, 386, 389, 391, 392, 393, 395, 398, 409, 421, 422, 423, 424, 437, 439, 440, 455, 457, 461, 462, 465, 466, 467, 468, 469, 471, 474, 481, 483, 484, 485, 486, 487, 489, 490, 491, 510, 514, 517, 520, 523, 525, 526, 529, 531, 532, 533, 543, 546, 547, 554, 556, 563, 565, 567, 568, 576, 579, 586, 589, 592, 602, 605, 607, 611, 620, 624, 628, 630, 639, 672, 689, 735, 738, 770, 825, 893], "tp": [1, 70], "cast": [1, 69, 70, 75, 90, 152, 158, 159, 186, 218, 231, 254, 267, 295, 307, 308, 317, 348, 351, 440, 464, 467, 476, 518, 519, 543, 548, 554, 579, 620, 639, 671, 672, 689, 713, 735, 738, 770, 783, 784, 794, 829, 832, 942, 989, 990, 1020, 1029, 1034, 1051], "int64": [1, 2, 31, 33, 69, 70, 97, 101, 143, 152, 158, 159, 174, 186, 199, 212, 218, 254, 281, 282, 283, 284, 307, 308, 323, 327, 331, 333, 335, 340, 347, 363, 467, 476, 518, 548, 554, 570, 577, 593, 601, 602, 604, 616, 622, 639, 656, 661, 671, 672, 674, 679, 689, 695, 716, 735, 757, 758, 759, 760, 783, 784, 800, 804, 811, 813, 816, 821, 828, 942, 961, 1020, 1032, 1033, 1034, 1051], "int8": [1, 70, 152, 254, 307, 308, 548, 613, 616, 631, 639, 783, 784, 788, 921, 945, 1020, 1038, 1051], "int16": [1, 70, 307, 308, 548, 639, 738, 783, 784, 921, 1020, 1030, 1051], "int32": [1, 70, 90, 93, 97, 123, 124, 158, 159, 171, 254, 293, 329, 356, 524, 554, 616, 639, 671, 672, 735, 738, 806, 837, 920, 995, 1034, 1051], "b": [1, 27, 28, 30, 32, 35, 54, 55, 57, 58, 59, 70, 74, 75, 90, 92, 93, 94, 95, 96, 97, 105, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 155, 156, 157, 158, 160, 161, 163, 164, 166, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 261, 263, 267, 268, 280, 285, 286, 288, 289, 290, 293, 295, 303, 310, 313, 314, 315, 363, 365, 367, 368, 369, 371, 374, 378, 380, 382, 383, 385, 388, 389, 390, 391, 392, 393, 395, 399, 405, 409, 414, 416, 421, 422, 423, 424, 439, 456, 463, 465, 467, 469, 471, 474, 479, 481, 498, 504, 506, 515, 518, 525, 547, 558, 560, 562, 564, 565, 566, 567, 568, 569, 573, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 592, 593, 594, 595, 596, 599, 603, 605, 606, 607, 608, 609, 610, 611, 612, 615, 617, 618, 621, 622, 623, 624, 625, 629, 639, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 673, 676, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 738, 741, 744, 770, 787, 789, 839, 840, 846, 849, 861, 868, 879, 893, 905, 906, 908, 943, 961, 986, 989, 996, 1019, 1033, 1037, 1051, 1058], "4": [1, 2, 15, 23, 27, 28, 30, 31, 32, 35, 49, 52, 54, 55, 57, 58, 59, 67, 68, 69, 70, 71, 74, 75, 90, 92, 93, 94, 95, 96, 97, 112, 118, 119, 120, 126, 133, 134, 135, 136, 139, 142, 145, 146, 147, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 177, 179, 180, 182, 183, 185, 186, 187, 188, 192, 196, 197, 202, 207, 210, 211, 212, 213, 214, 215, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 265, 267, 268, 280, 281, 282, 283, 285, 291, 293, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 311, 313, 314, 315, 318, 322, 327, 334, 335, 336, 342, 343, 345, 346, 347, 348, 351, 352, 353, 354, 356, 358, 359, 364, 365, 367, 368, 371, 372, 373, 374, 376, 377, 379, 380, 381, 382, 383, 392, 393, 395, 398, 399, 400, 407, 408, 409, 410, 413, 421, 422, 423, 424, 425, 426, 429, 434, 437, 439, 440, 455, 457, 461, 462, 464, 465, 467, 468, 469, 471, 472, 474, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 496, 497, 500, 504, 505, 506, 507, 510, 520, 521, 523, 524, 525, 527, 529, 531, 532, 535, 544, 545, 546, 547, 549, 550, 551, 554, 555, 556, 563, 565, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 592, 594, 595, 599, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 620, 621, 622, 623, 624, 625, 627, 629, 630, 639, 653, 655, 656, 657, 660, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 738, 744, 747, 754, 757, 758, 759, 766, 772, 773, 775, 785, 787, 789, 803, 804, 810, 812, 815, 816, 817, 818, 819, 820, 824, 826, 827, 828, 829, 832, 833, 834, 835, 846, 848, 849, 856, 857, 860, 861, 863, 868, 871, 872, 873, 874, 878, 892, 893, 894, 897, 905, 906, 908, 909, 910, 913, 921, 927, 934, 935, 936, 938, 940, 944, 947, 951, 953, 954, 955, 956, 957, 959, 961, 971, 975, 976, 981, 991, 992, 994, 995, 998, 1000, 1002, 1003, 1006, 1019, 1021, 1022, 1023, 1030, 1033, 1034, 1035, 1042, 1051, 1059], "c": [1, 27, 28, 30, 32, 35, 54, 55, 57, 58, 59, 68, 70, 74, 75, 93, 95, 97, 105, 112, 122, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 149, 150, 152, 153, 155, 156, 157, 158, 161, 163, 164, 171, 172, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 191, 193, 194, 195, 198, 199, 200, 203, 204, 206, 207, 208, 209, 210, 212, 216, 217, 218, 219, 221, 222, 225, 226, 228, 229, 231, 234, 237, 238, 239, 240, 241, 242, 244, 247, 248, 254, 261, 263, 268, 285, 383, 395, 405, 414, 416, 439, 465, 467, 498, 531, 535, 558, 560, 565, 567, 569, 575, 576, 577, 579, 580, 581, 582, 583, 584, 586, 594, 595, 596, 599, 603, 605, 606, 607, 608, 609, 610, 611, 612, 621, 623, 624, 625, 629, 639, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 670, 671, 676, 679, 685, 688, 690, 693, 694, 695, 696, 700, 701, 702, 707, 710, 713, 714, 717, 720, 721, 722, 723, 724, 725, 727, 730, 731, 735, 738, 787, 861, 879, 1002, 1006, 1037, 1051], "5": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 32, 35, 55, 57, 59, 67, 68, 70, 71, 74, 90, 93, 94, 95, 96, 97, 99, 102, 118, 124, 133, 135, 136, 139, 145, 146, 147, 148, 152, 154, 155, 156, 157, 158, 159, 161, 162, 164, 165, 167, 169, 170, 173, 174, 175, 177, 179, 182, 183, 185, 187, 188, 189, 192, 197, 202, 207, 210, 211, 212, 213, 214, 217, 220, 225, 227, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 261, 262, 265, 286, 289, 290, 291, 293, 295, 297, 298, 299, 300, 309, 310, 311, 312, 313, 318, 319, 323, 344, 346, 347, 348, 351, 353, 359, 362, 363, 366, 368, 372, 373, 376, 377, 379, 380, 383, 386, 389, 391, 392, 393, 395, 398, 400, 407, 409, 410, 413, 418, 421, 422, 423, 424, 428, 429, 455, 457, 462, 464, 465, 466, 467, 471, 472, 474, 478, 479, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 494, 500, 506, 511, 519, 520, 523, 524, 543, 546, 549, 551, 555, 556, 568, 569, 570, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 586, 588, 591, 592, 593, 594, 595, 599, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 621, 623, 624, 625, 629, 639, 655, 656, 657, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 675, 677, 678, 679, 680, 683, 684, 685, 690, 698, 699, 700, 701, 702, 703, 704, 705, 706, 712, 713, 715, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 738, 744, 747, 751, 754, 766, 770, 773, 775, 781, 785, 786, 787, 788, 789, 795, 796, 797, 798, 799, 800, 825, 827, 828, 829, 830, 832, 834, 835, 843, 846, 847, 856, 857, 860, 861, 893, 894, 897, 900, 905, 906, 908, 913, 920, 921, 927, 934, 935, 936, 938, 939, 940, 944, 947, 948, 949, 950, 952, 953, 956, 959, 961, 971, 977, 982, 990, 991, 995, 1021, 1035, 1038, 1042, 1051, 1059], "6": [1, 27, 28, 30, 31, 32, 33, 34, 35, 55, 57, 59, 68, 70, 74, 90, 93, 94, 95, 96, 133, 137, 140, 141, 142, 143, 145, 146, 149, 150, 153, 154, 155, 156, 158, 159, 161, 163, 164, 165, 167, 169, 170, 172, 176, 177, 178, 179, 181, 184, 187, 188, 189, 191, 192, 193, 195, 196, 197, 198, 199, 200, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 222, 224, 225, 226, 227, 228, 229, 231, 232, 239, 247, 248, 254, 261, 265, 268, 285, 293, 307, 308, 310, 313, 318, 322, 341, 342, 343, 346, 354, 357, 359, 367, 368, 374, 379, 380, 382, 400, 401, 402, 410, 421, 422, 423, 424, 462, 464, 470, 471, 473, 474, 475, 478, 480, 483, 484, 485, 486, 487, 489, 490, 491, 494, 506, 511, 515, 520, 523, 524, 546, 549, 551, 563, 568, 583, 584, 585, 592, 595, 605, 623, 639, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 671, 672, 673, 675, 676, 678, 680, 681, 685, 688, 690, 693, 695, 696, 698, 699, 700, 701, 702, 705, 706, 709, 710, 712, 713, 715, 716, 722, 730, 731, 735, 738, 773, 779, 783, 784, 789, 822, 835, 857, 885, 886, 894, 905, 906, 908, 927, 940, 944, 946, 951, 953, 955, 957, 961, 982, 986, 991, 995, 1020, 1051, 1058, 1059], "7": [1, 27, 28, 30, 31, 32, 33, 34, 35, 57, 68, 70, 74, 118, 137, 138, 139, 140, 141, 143, 145, 149, 150, 153, 158, 159, 161, 163, 165, 172, 176, 177, 178, 180, 181, 184, 187, 189, 191, 193, 195, 197, 198, 199, 200, 203, 204, 206, 208, 209, 210, 211, 216, 217, 218, 219, 225, 226, 227, 228, 229, 254, 261, 265, 283, 308, 310, 318, 322, 342, 344, 345, 352, 354, 356, 364, 379, 382, 400, 421, 422, 423, 424, 440, 464, 471, 474, 478, 490, 506, 538, 549, 551, 568, 583, 584, 588, 595, 605, 623, 639, 658, 659, 661, 663, 667, 671, 672, 673, 675, 676, 680, 686, 688, 691, 693, 695, 696, 705, 706, 710, 716, 735, 738, 751, 759, 795, 799, 806, 825, 826, 833, 835, 880, 905, 906, 908, 921, 944, 956, 1009, 1051, 1059], "float32": [1, 28, 70, 152, 216, 217, 254, 604, 735, 738, 864, 920, 1051], "lazi": [1, 52, 53, 54, 55, 57, 70, 74, 112, 124, 173, 186, 254, 268, 597, 613, 616, 631, 639, 676, 677, 714, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 735, 1058, 1059], "i16": [1, 70, 498, 639, 738, 921, 1030, 1051, 1059], "i32": [1, 70, 90, 93, 97, 123, 124, 200, 254, 293, 329, 356, 480, 498, 524, 630, 639, 696, 735, 806, 837, 920, 946, 995, 1051, 1059], "f32": [1, 70, 142, 216, 254, 409, 474, 498, 580, 592, 639, 660, 735, 738, 893, 920, 940, 1051], "i64": [1, 2, 15, 19, 49, 52, 54, 68, 69, 70, 71, 74, 90, 92, 93, 94, 95, 96, 97, 112, 133, 134, 135, 136, 137, 140, 142, 143, 145, 146, 148, 149, 154, 155, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 172, 173, 176, 179, 180, 181, 185, 186, 187, 188, 191, 192, 193, 194, 198, 200, 203, 204, 206, 207, 209, 210, 211, 213, 219, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 244, 247, 248, 254, 261, 263, 267, 268, 281, 282, 283, 284, 285, 291, 295, 298, 299, 300, 305, 306, 307, 308, 310, 312, 313, 323, 325, 327, 331, 333, 335, 340, 347, 350, 363, 365, 366, 368, 369, 370, 371, 373, 374, 379, 380, 381, 382, 383, 386, 389, 391, 392, 393, 395, 397, 400, 408, 409, 410, 411, 412, 413, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 436, 438, 439, 455, 456, 457, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 478, 479, 480, 481, 493, 495, 496, 498, 499, 500, 504, 505, 506, 525, 526, 544, 545, 546, 547, 548, 549, 550, 551, 555, 556, 557, 559, 562, 568, 570, 576, 577, 579, 583, 584, 585, 586, 591, 592, 593, 594, 595, 599, 601, 602, 603, 604, 605, 606, 607, 610, 611, 615, 619, 620, 623, 624, 625, 630, 639, 653, 655, 657, 659, 660, 663, 664, 666, 667, 668, 670, 671, 672, 673, 675, 676, 677, 678, 680, 681, 682, 685, 686, 687, 689, 690, 693, 694, 696, 698, 699, 701, 702, 704, 705, 706, 707, 708, 709, 710, 713, 715, 717, 718, 719, 721, 722, 723, 724, 727, 730, 731, 735, 738, 741, 744, 745, 757, 758, 759, 760, 766, 770, 775, 778, 781, 782, 783, 784, 787, 800, 802, 804, 811, 813, 816, 821, 828, 831, 846, 847, 849, 850, 856, 860, 868, 892, 893, 894, 897, 905, 906, 908, 909, 910, 911, 913, 915, 926, 938, 943, 944, 946, 949, 952, 956, 959, 962, 963, 966, 970, 971, 975, 976, 1019, 1021, 1022, 1023, 1029, 1035, 1036, 1039, 1042, 1051, 1058, 1059], "register_series_namespac": [1, 68, 69, 70], "math": [1, 71, 311, 571, 572, 639, 779, 972, 1024, 1051], "mathshortcut": [1, 71], "": [1, 2, 28, 31, 35, 52, 55, 59, 71, 90, 97, 101, 102, 103, 113, 126, 134, 140, 142, 144, 145, 157, 158, 164, 172, 173, 185, 187, 192, 193, 197, 200, 207, 211, 215, 221, 223, 224, 225, 231, 254, 268, 325, 348, 351, 363, 396, 413, 414, 425, 426, 429, 438, 449, 456, 459, 460, 465, 466, 476, 480, 482, 506, 510, 516, 517, 520, 521, 523, 525, 527, 529, 530, 532, 535, 536, 537, 540, 541, 543, 544, 545, 564, 565, 566, 567, 573, 577, 580, 585, 586, 593, 596, 597, 606, 607, 610, 611, 619, 620, 622, 623, 624, 639, 653, 659, 660, 663, 670, 671, 677, 696, 702, 707, 708, 709, 713, 719, 735, 738, 741, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 766, 767, 769, 772, 773, 774, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 795, 802, 818, 819, 826, 829, 832, 833, 840, 842, 843, 847, 848, 849, 850, 852, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 892, 894, 897, 898, 900, 909, 910, 911, 913, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 934, 935, 936, 938, 939, 940, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 955, 956, 957, 958, 959, 961, 962, 963, 964, 966, 970, 971, 972, 973, 975, 976, 978, 981, 982, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1051], "_": [1, 67, 71, 187, 215, 254, 517, 531, 988, 1002, 1028, 1051], "squar": [1, 71, 236, 396, 507, 639, 719, 881, 977, 1051], "cube": [1, 71, 296, 468, 639, 771, 1051], "s2": [1, 120, 152, 254, 773, 789, 868, 880, 915, 927, 961, 1033, 1042, 1051], "renam": [1, 93, 101, 102, 200, 231, 234, 254, 263, 439, 452, 469, 545, 547, 619, 622, 639, 696, 713, 717, 735, 741, 793, 801, 1017, 1029, 1051], "n2": [1, 431], "in_plac": [1, 163, 205, 229, 254, 941, 943, 969, 976, 1051], "true": [1, 6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 35, 47, 48, 52, 54, 56, 73, 74, 75, 90, 91, 95, 97, 99, 101, 102, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 130, 132, 134, 135, 136, 139, 148, 152, 153, 155, 156, 157, 158, 159, 164, 166, 167, 168, 170, 173, 174, 177, 182, 183, 185, 187, 188, 195, 196, 197, 198, 200, 207, 213, 217, 218, 221, 222, 223, 224, 225, 227, 231, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 262, 263, 264, 265, 266, 267, 268, 279, 286, 287, 289, 290, 293, 304, 305, 306, 307, 308, 310, 317, 319, 322, 323, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 376, 377, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 398, 401, 402, 406, 427, 430, 431, 437, 451, 461, 462, 464, 471, 476, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 498, 499, 503, 505, 506, 510, 512, 514, 518, 519, 524, 530, 531, 533, 535, 536, 537, 540, 544, 545, 550, 557, 560, 563, 564, 565, 566, 567, 568, 570, 573, 574, 580, 581, 588, 589, 595, 601, 602, 613, 616, 622, 627, 628, 630, 631, 639, 653, 655, 656, 657, 662, 664, 666, 670, 671, 672, 676, 677, 679, 681, 685, 690, 696, 700, 702, 707, 708, 709, 713, 718, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 735, 738, 742, 743, 744, 745, 755, 762, 767, 773, 774, 786, 793, 794, 796, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 833, 834, 835, 836, 837, 839, 841, 842, 843, 850, 854, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 881, 885, 886, 911, 914, 927, 935, 936, 938, 942, 954, 961, 974, 976, 981, 983, 985, 989, 990, 995, 1001, 1002, 1004, 1006, 1007, 1008, 1011, 1032, 1033, 1041, 1042, 1051, 1058, 1059], "s3": [1, 30, 104, 113, 117, 254, 915, 1051], "n3": 1, "8": [1, 27, 28, 30, 32, 33, 34, 35, 46, 52, 57, 64, 66, 67, 68, 70, 71, 74, 118, 122, 133, 137, 138, 139, 140, 141, 142, 143, 145, 149, 150, 153, 156, 161, 163, 172, 176, 177, 178, 181, 189, 191, 193, 195, 197, 198, 199, 200, 203, 204, 206, 208, 209, 210, 211, 216, 217, 218, 219, 225, 226, 228, 229, 231, 254, 265, 267, 280, 303, 305, 308, 309, 310, 314, 315, 318, 382, 399, 408, 409, 421, 422, 423, 424, 457, 464, 468, 471, 478, 479, 498, 504, 506, 521, 527, 535, 551, 563, 569, 575, 580, 581, 582, 584, 586, 592, 594, 599, 603, 605, 606, 607, 608, 609, 610, 611, 612, 621, 624, 625, 629, 639, 658, 659, 660, 661, 663, 667, 673, 676, 680, 681, 690, 693, 695, 696, 705, 706, 710, 713, 716, 735, 738, 744, 785, 806, 857, 880, 892, 893, 905, 906, 908, 934, 938, 944, 947, 948, 951, 953, 955, 957, 992, 998, 1006, 1051, 1059], "9": [1, 27, 28, 30, 31, 32, 35, 52, 57, 67, 74, 133, 138, 139, 152, 159, 161, 165, 196, 197, 200, 210, 225, 226, 229, 231, 247, 254, 261, 265, 267, 280, 292, 303, 305, 308, 310, 311, 314, 315, 318, 353, 382, 387, 395, 399, 408, 420, 427, 464, 471, 473, 478, 482, 488, 490, 500, 504, 517, 538, 551, 568, 578, 583, 584, 628, 639, 672, 673, 675, 680, 696, 705, 710, 713, 730, 735, 787, 799, 810, 812, 820, 826, 827, 833, 834, 868, 880, 892, 911, 944, 948, 954, 956, 958, 971, 988, 1009, 1051], "27": [1, 71, 247, 308, 329, 343, 356, 639, 730, 1051, 1059], "16": [1, 31, 43, 61, 69, 158, 159, 231, 254, 305, 308, 382, 457, 468, 524, 568, 583, 591, 592, 595, 639, 671, 672, 700, 713, 735, 738, 826, 833, 934, 972, 995, 1024, 1051], "64": [1, 42, 45, 48, 63, 69, 71, 457, 468, 639, 735, 934, 1051], "25": [1, 31, 71, 97, 124, 139, 158, 159, 173, 227, 231, 254, 312, 322, 324, 329, 342, 345, 352, 354, 356, 471, 483, 484, 485, 486, 487, 489, 490, 491, 556, 597, 639, 671, 672, 677, 683, 711, 713, 735, 738, 787, 788, 801, 826, 833, 839, 857, 934, 938, 1051], "125": [1, 31, 71, 254, 261, 639, 934, 1051], "arg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 186, 218, 254, 467, 573, 596, 639, 689, 735, 745, 1032, 1033, 1051], "ani": [2, 3, 4, 5, 8, 28, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 59, 60, 61, 62, 63, 64, 65, 66, 72, 90, 91, 92, 93, 94, 95, 96, 101, 102, 104, 105, 106, 108, 109, 110, 112, 113, 114, 116, 121, 123, 124, 126, 130, 133, 138, 142, 146, 148, 149, 152, 169, 170, 171, 185, 186, 195, 196, 197, 213, 214, 217, 218, 223, 225, 254, 261, 264, 265, 268, 293, 346, 358, 359, 368, 373, 376, 377, 387, 398, 405, 409, 437, 438, 440, 452, 455, 457, 461, 462, 464, 465, 467, 469, 478, 482, 494, 524, 535, 536, 537, 540, 546, 547, 550, 556, 563, 564, 567, 568, 580, 594, 603, 604, 630, 639, 660, 666, 689, 708, 735, 738, 744, 745, 789, 827, 846, 849, 868, 880, 889, 893, 921, 944, 948, 960, 963, 995, 1006, 1007, 1008, 1011, 1022, 1031, 1032, 1033, 1051, 1058, 1059], "kwarg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 138, 186, 218, 254, 467, 639, 689, 735, 1033, 1051, 1058], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1051, 1058], "nest": [2, 49, 58, 97, 144, 254, 650, 840, 1051, 1058, 1059], "fix": [2, 105, 122, 124, 355, 483, 484, 485, 486, 487, 489, 490, 491, 639, 836], "length": [2, 12, 49, 74, 112, 122, 158, 159, 206, 254, 309, 310, 345, 352, 426, 431, 449, 471, 480, 482, 483, 484, 485, 486, 487, 489, 490, 491, 504, 521, 523, 527, 529, 543, 613, 616, 617, 618, 631, 639, 671, 672, 690, 701, 735, 773, 785, 786, 795, 826, 833, 882, 910, 915, 932, 938, 946, 948, 949, 950, 951, 952, 953, 955, 956, 957, 975, 992, 994, 998, 1000, 1014, 1051], "inner": [2, 49, 58, 75, 123, 172, 226, 254, 281, 282, 283, 284, 313, 414, 477, 554, 639, 676, 710, 716, 735, 757, 758, 759, 760, 789, 898, 1034, 1051], "width": [2, 24, 31, 101, 102, 254, 281, 282, 283, 284, 521, 527, 543, 735, 757, 758, 759, 760, 992, 998, 1014], "int": [2, 12, 13, 15, 23, 24, 28, 31, 35, 39, 48, 54, 57, 69, 93, 96, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 122, 123, 124, 125, 126, 127, 128, 133, 134, 135, 144, 147, 148, 150, 160, 161, 162, 164, 169, 170, 171, 173, 175, 176, 177, 181, 182, 183, 193, 195, 198, 202, 203, 204, 206, 208, 209, 210, 211, 216, 219, 221, 225, 228, 230, 232, 239, 248, 254, 261, 285, 291, 298, 299, 300, 309, 312, 360, 361, 362, 366, 367, 368, 374, 378, 379, 400, 406, 408, 412, 413, 425, 426, 429, 430, 431, 464, 466, 467, 468, 471, 474, 477, 478, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 499, 504, 508, 516, 518, 521, 524, 525, 527, 529, 531, 532, 538, 543, 549, 550, 551, 555, 561, 563, 570, 580, 581, 587, 590, 591, 597, 599, 601, 602, 609, 612, 613, 616, 617, 618, 621, 622, 623, 625, 626, 629, 631, 639, 653, 655, 664, 665, 666, 673, 677, 680, 690, 698, 699, 701, 703, 705, 706, 707, 711, 712, 715, 722, 731, 735, 752, 753, 766, 767, 773, 774, 775, 776, 777, 785, 788, 840, 841, 842, 843, 847, 848, 849, 855, 856, 857, 880, 882, 883, 890, 891, 892, 896, 897, 909, 910, 913, 914, 915, 923, 927, 928, 930, 931, 932, 933, 934, 937, 938, 940, 944, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 966, 967, 970, 975, 978, 987, 989, 992, 995, 996, 998, 1000, 1002, 1003, 1009, 1014, 1020, 1021, 1022, 1023, 1030, 1035, 1040, 1051, 1058, 1059], "polarsdatatyp": [2, 49, 101, 102, 107, 111, 112, 121, 122, 123, 124, 126, 133, 143, 254, 268, 293, 363, 438, 440, 518, 568, 570, 577, 593, 604, 605, 613, 616, 631, 639, 661, 735, 738, 745, 767, 921, 989, 1051], "pythondatatyp": [2, 49], "null": [2, 28, 30, 54, 67, 74, 93, 101, 102, 109, 112, 117, 132, 134, 135, 139, 142, 148, 152, 153, 165, 172, 177, 178, 184, 187, 189, 203, 204, 207, 208, 209, 213, 218, 221, 224, 226, 228, 231, 237, 254, 264, 266, 267, 268, 278, 285, 287, 298, 299, 300, 303, 305, 308, 312, 314, 315, 323, 327, 331, 333, 335, 340, 347, 359, 360, 361, 362, 363, 366, 367, 368, 374, 382, 389, 390, 391, 392, 393, 399, 401, 402, 408, 411, 412, 415, 421, 422, 423, 424, 425, 430, 431, 440, 462, 463, 466, 475, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 496, 497, 498, 500, 505, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 523, 524, 527, 529, 531, 532, 533, 543, 544, 545, 554, 565, 567, 576, 578, 579, 581, 586, 593, 604, 607, 611, 617, 618, 622, 624, 630, 639, 653, 655, 660, 666, 675, 676, 688, 698, 699, 702, 707, 709, 710, 713, 714, 716, 720, 735, 745, 754, 762, 774, 775, 788, 791, 800, 804, 811, 813, 816, 821, 828, 841, 842, 843, 847, 849, 854, 860, 873, 874, 885, 886, 892, 906, 908, 909, 914, 915, 933, 934, 946, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 961, 966, 967, 971, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 994, 995, 998, 1000, 1002, 1003, 1004, 1030, 1032, 1033, 1034, 1041, 1051, 1058, 1059], "paramet": [2, 7, 9, 11, 12, 13, 14, 15, 18, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 47, 48, 49, 52, 53, 54, 55, 57, 59, 67, 68, 69, 70, 71, 73, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 169, 170, 171, 172, 173, 175, 177, 179, 180, 182, 183, 185, 186, 187, 189, 191, 192, 193, 195, 196, 197, 198, 200, 201, 203, 204, 206, 207, 208, 209, 210, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 236, 239, 246, 248, 254, 261, 263, 264, 265, 266, 267, 268, 278, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 298, 299, 300, 304, 305, 306, 307, 308, 309, 310, 312, 313, 317, 318, 319, 325, 341, 344, 345, 346, 348, 350, 351, 352, 355, 357, 358, 359, 360, 361, 362, 363, 366, 368, 369, 373, 374, 375, 376, 377, 378, 379, 382, 383, 387, 396, 398, 400, 405, 406, 407, 408, 409, 412, 413, 414, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 437, 438, 439, 440, 451, 455, 457, 461, 462, 464, 465, 466, 467, 468, 469, 471, 472, 474, 476, 477, 478, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 543, 544, 545, 546, 547, 549, 550, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 595, 596, 597, 599, 600, 601, 602, 604, 605, 606, 607, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 639, 653, 655, 657, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 676, 677, 680, 681, 685, 686, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 701, 702, 703, 705, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 719, 722, 729, 731, 735, 738, 741, 744, 745, 754, 760, 761, 762, 763, 764, 765, 766, 767, 770, 774, 775, 776, 777, 781, 782, 783, 784, 785, 786, 787, 788, 789, 794, 795, 796, 802, 822, 825, 826, 827, 829, 831, 832, 833, 836, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 855, 856, 857, 860, 861, 870, 876, 877, 881, 883, 889, 890, 891, 892, 893, 896, 897, 898, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 921, 934, 938, 939, 940, 941, 942, 943, 944, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 970, 974, 975, 976, 978, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1014, 1015, 1017, 1021, 1022, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1039, 1040, 1041, 1042, 1051, 1058], "The": [2, 18, 29, 31, 35, 48, 49, 52, 56, 59, 67, 72, 73, 90, 92, 93, 94, 96, 99, 101, 103, 108, 109, 110, 112, 128, 133, 141, 143, 146, 156, 157, 158, 159, 160, 165, 170, 173, 180, 185, 195, 196, 197, 200, 217, 224, 227, 231, 234, 236, 254, 263, 285, 286, 287, 288, 322, 336, 341, 342, 345, 348, 352, 353, 363, 366, 374, 378, 430, 438, 465, 474, 477, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 499, 500, 503, 509, 512, 513, 518, 520, 521, 522, 527, 528, 534, 535, 543, 577, 593, 597, 617, 618, 619, 622, 630, 632, 633, 635, 639, 640, 641, 645, 646, 647, 671, 672, 673, 675, 677, 680, 681, 686, 690, 696, 709, 713, 717, 719, 735, 741, 744, 745, 761, 762, 763, 774, 799, 817, 822, 823, 826, 829, 833, 834, 846, 847, 855, 914, 940, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 963, 971, 974, 980, 983, 984, 989, 991, 992, 993, 998, 999, 1005, 1006, 1014, 1043, 1045, 1047, 1051, 1052, 1055, 1056, 1057, 1059], "size": [2, 13, 35, 48, 101, 102, 122, 123, 124, 126, 128, 144, 158, 225, 254, 478, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 570, 601, 602, 617, 618, 639, 671, 735, 840, 944, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 1051, 1059], "datatyp": [2, 28, 33, 49, 65, 90, 92, 93, 94, 96, 98, 105, 107, 108, 109, 111, 126, 143, 145, 152, 199, 254, 293, 363, 498, 554, 577, 593, 604, 639, 650, 663, 695, 716, 735, 745, 767, 787, 870, 875, 877, 879, 968, 1034, 1051], "valu": [2, 8, 11, 12, 15, 26, 28, 31, 33, 49, 50, 52, 56, 58, 65, 67, 74, 75, 93, 95, 101, 102, 103, 112, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 134, 139, 142, 146, 147, 148, 153, 156, 158, 159, 160, 161, 165, 169, 170, 173, 175, 176, 177, 178, 179, 181, 183, 185, 187, 188, 189, 191, 195, 196, 197, 198, 203, 204, 207, 208, 209, 210, 213, 214, 218, 221, 222, 225, 226, 227, 228, 237, 238, 240, 241, 242, 244, 245, 254, 260, 261, 262, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 308, 309, 310, 312, 314, 315, 318, 322, 336, 342, 353, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 397, 398, 399, 401, 402, 403, 404, 407, 408, 411, 412, 413, 415, 417, 418, 419, 425, 428, 429, 432, 434, 436, 437, 438, 440, 441, 442, 443, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 471, 472, 474, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 500, 501, 502, 503, 505, 506, 507, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 525, 526, 529, 531, 532, 533, 543, 546, 548, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 563, 569, 576, 579, 581, 583, 584, 585, 586, 594, 595, 600, 603, 604, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 623, 624, 630, 639, 653, 660, 665, 666, 671, 672, 674, 675, 677, 682, 683, 684, 685, 687, 688, 691, 693, 698, 699, 702, 703, 704, 707, 710, 711, 716, 720, 721, 723, 724, 725, 727, 728, 735, 738, 740, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 762, 763, 764, 765, 770, 772, 775, 776, 777, 779, 780, 785, 786, 787, 788, 790, 791, 795, 799, 817, 823, 834, 840, 841, 842, 843, 846, 847, 848, 849, 852, 854, 855, 856, 857, 858, 860, 861, 863, 865, 866, 868, 869, 871, 872, 873, 874, 878, 883, 885, 886, 887, 888, 891, 892, 895, 896, 897, 899, 901, 902, 903, 909, 913, 916, 921, 922, 923, 925, 926, 928, 930, 931, 932, 933, 934, 937, 938, 939, 940, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 966, 967, 971, 972, 973, 974, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 994, 996, 997, 1000, 1002, 1003, 1004, 1014, 1020, 1021, 1022, 1023, 1024, 1025, 1032, 1033, 1034, 1037, 1039, 1041, 1042, 1051, 1059], "within": [2, 49, 119, 120, 157, 158, 159, 173, 227, 254, 474, 506, 639, 671, 672, 677, 735, 1058], "exampl": [2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 67, 68, 69, 70, 71, 74, 75, 90, 92, 93, 94, 95, 96, 97, 99, 102, 103, 104, 105, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 639, 650, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 741, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 766, 767, 769, 770, 772, 773, 774, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 852, 855, 856, 857, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 882, 885, 886, 892, 893, 894, 897, 898, 900, 905, 906, 908, 909, 910, 911, 913, 915, 920, 921, 922, 923, 924, 925, 926, 927, 928, 934, 935, 936, 938, 939, 940, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 966, 970, 971, 972, 973, 975, 976, 978, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1051, 1058], "dtype": [2, 31, 38, 70, 74, 75, 90, 92, 94, 96, 97, 101, 102, 108, 109, 112, 121, 122, 123, 124, 126, 132, 158, 159, 173, 216, 217, 218, 254, 268, 293, 294, 298, 299, 300, 307, 308, 355, 363, 405, 430, 436, 438, 440, 476, 477, 483, 484, 485, 486, 487, 489, 490, 491, 498, 518, 535, 548, 550, 554, 559, 568, 570, 581, 593, 597, 601, 602, 604, 605, 613, 616, 622, 631, 639, 671, 672, 677, 735, 738, 757, 758, 767, 769, 774, 775, 776, 777, 783, 784, 787, 788, 836, 840, 864, 870, 877, 889, 914, 920, 921, 945, 961, 968, 989, 1006, 1020, 1030, 1032, 1033, 1034, 1038, 1051, 1059], "method": [2, 3, 4, 5, 8, 27, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 74, 91, 101, 102, 105, 121, 130, 133, 142, 146, 157, 165, 170, 183, 189, 195, 196, 197, 223, 231, 236, 246, 254, 261, 264, 265, 268, 292, 348, 351, 358, 359, 366, 373, 376, 377, 382, 395, 398, 437, 455, 457, 461, 462, 464, 468, 469, 472, 474, 483, 484, 485, 486, 487, 489, 490, 491, 538, 546, 547, 556, 558, 563, 568, 580, 588, 614, 616, 627, 632, 633, 635, 639, 640, 641, 644, 645, 646, 647, 650, 660, 675, 691, 708, 713, 719, 729, 735, 744, 745, 829, 832, 846, 847, 860, 939, 940, 953, 1009, 1034, 1043, 1045, 1047, 1051, 1052, 1055, 1056, 1057], "attribut": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 59, 60, 61, 62, 63, 64, 65, 66, 121, 254, 632, 633, 635, 640, 641, 645, 646, 647, 735, 1043, 1045, 1047, 1052, 1055, 1056, 1057], "A": [5, 28, 31, 52, 55, 73, 97, 101, 102, 103, 110, 112, 128, 152, 158, 173, 187, 213, 225, 226, 227, 231, 254, 260, 310, 318, 358, 359, 366, 376, 377, 385, 388, 389, 391, 398, 431, 437, 438, 449, 461, 462, 479, 482, 483, 484, 485, 486, 487, 489, 490, 491, 510, 511, 516, 517, 519, 525, 526, 543, 578, 592, 596, 639, 671, 677, 693, 710, 713, 735, 738, 786, 795, 847, 948, 949, 950, 952, 955, 956, 957, 981, 982, 987, 988, 990, 996, 997, 1014, 1051, 1058], "encod": [5, 66, 101, 102, 112, 215, 254, 286, 287, 289, 290, 375, 512, 639, 762, 983], "set": [5, 6, 7, 8, 9, 10, 12, 14, 15, 18, 23, 24, 26, 28, 30, 31, 32, 33, 34, 47, 48, 67, 68, 91, 93, 96, 101, 102, 105, 106, 110, 112, 114, 115, 116, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130, 132, 137, 142, 151, 157, 158, 159, 160, 170, 173, 179, 198, 200, 206, 215, 217, 222, 223, 225, 231, 254, 268, 292, 355, 378, 387, 421, 422, 423, 424, 426, 430, 431, 440, 467, 471, 482, 483, 484, 485, 486, 487, 489, 490, 491, 493, 499, 503, 504, 522, 528, 529, 534, 535, 536, 537, 540, 570, 574, 588, 589, 601, 602, 613, 616, 617, 618, 622, 627, 628, 630, 631, 639, 650, 660, 662, 670, 671, 672, 676, 677, 681, 685, 696, 701, 708, 713, 716, 719, 735, 744, 745, 836, 855, 868, 905, 906, 907, 908, 910, 914, 915, 921, 948, 949, 950, 951, 952, 953, 955, 956, 957, 959, 963, 970, 974, 975, 993, 999, 1000, 1005, 1006, 1007, 1008, 1011, 1032, 1051, 1059], "string": [5, 7, 9, 12, 13, 14, 18, 28, 29, 31, 33, 34, 38, 52, 58, 66, 75, 97, 101, 102, 103, 112, 121, 122, 123, 126, 129, 134, 152, 156, 157, 158, 159, 173, 187, 197, 200, 207, 216, 221, 222, 225, 227, 231, 234, 254, 261, 289, 295, 341, 345, 348, 351, 352, 365, 371, 375, 383, 414, 440, 451, 465, 467, 483, 484, 485, 486, 487, 489, 490, 491, 506, 509, 510, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 543, 564, 565, 566, 567, 573, 576, 578, 579, 585, 586, 588, 589, 596, 606, 607, 610, 611, 619, 622, 623, 624, 627, 628, 630, 639, 653, 662, 669, 670, 671, 672, 677, 696, 702, 707, 713, 716, 717, 735, 738, 764, 770, 822, 826, 829, 832, 833, 845, 861, 898, 979, 980, 981, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1013, 1014, 1030, 1051, 1059], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 375, 639, 669, 692, 735], "activ": [6, 10, 16, 17, 19, 20, 21, 22, 25, 409, 517, 893, 988], "bool": [6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 35, 47, 48, 67, 73, 74, 75, 90, 91, 95, 97, 101, 102, 106, 109, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 129, 132, 134, 135, 136, 148, 149, 151, 152, 153, 155, 156, 157, 158, 159, 163, 164, 166, 167, 168, 173, 185, 187, 197, 198, 201, 205, 207, 213, 215, 217, 218, 221, 222, 223, 224, 227, 229, 231, 238, 240, 241, 244, 254, 263, 264, 265, 266, 267, 268, 278, 284, 286, 287, 289, 290, 293, 304, 305, 306, 307, 308, 309, 310, 328, 344, 346, 352, 357, 358, 359, 360, 361, 362, 376, 377, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 398, 401, 402, 406, 409, 427, 430, 432, 437, 438, 444, 445, 446, 447, 451, 461, 462, 464, 471, 474, 476, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 495, 498, 499, 503, 505, 506, 510, 512, 514, 524, 525, 526, 530, 531, 533, 535, 536, 537, 540, 545, 557, 560, 563, 564, 565, 566, 567, 568, 570, 573, 574, 580, 583, 588, 589, 601, 602, 604, 613, 616, 622, 627, 628, 631, 639, 653, 655, 657, 662, 664, 666, 670, 671, 672, 676, 677, 681, 685, 690, 697, 700, 702, 707, 708, 709, 713, 721, 723, 724, 727, 735, 738, 742, 743, 744, 745, 754, 760, 762, 767, 774, 781, 782, 783, 784, 785, 786, 805, 825, 827, 833, 839, 841, 842, 843, 850, 854, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 885, 886, 890, 891, 893, 911, 914, 916, 935, 936, 938, 940, 941, 942, 943, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 961, 963, 964, 969, 974, 976, 981, 983, 985, 995, 996, 997, 1001, 1002, 1004, 1006, 1007, 1008, 1011, 1031, 1032, 1033, 1036, 1039, 1041, 1051, 1058], "decim": [6, 28, 31, 254, 492, 538, 639, 958, 1009, 1051], "temporari": 6, "remov": [6, 8, 140, 215, 226, 254, 268, 363, 439, 522, 528, 534, 535, 537, 593, 639, 659, 710, 735, 744, 993, 999, 1005, 1006, 1008, 1051], "later": [6, 588], "onc": [6, 55, 101, 102, 105, 128, 132, 133, 196, 198, 234, 254, 268, 292, 493, 639, 654, 717, 735, 745, 959, 1051], "stabil": 6, "happen": [6, 471, 639, 938, 1051], "being": [6, 101, 102, 112, 117, 215, 225, 226, 254, 268, 309, 345, 483, 484, 485, 486, 487, 489, 490, 491, 493, 499, 592, 639, 710, 735, 785, 826, 857, 938, 1051, 1059], "consid": [6, 101, 102, 112, 117, 133, 142, 153, 179, 196, 223, 225, 226, 254, 268, 298, 299, 300, 309, 345, 438, 483, 484, 485, 486, 487, 489, 490, 491, 583, 595, 639, 660, 673, 680, 685, 708, 710, 719, 735, 745, 775, 776, 777, 785, 826, 857, 870, 938, 961, 962, 963, 1051], "break": [6, 117, 225, 226, 254, 268, 309, 310, 345, 471, 483, 484, 485, 486, 487, 489, 490, 491, 639, 710, 735, 785, 786, 826, 857, 938, 1051], "chang": [6, 26, 67, 101, 102, 117, 225, 226, 227, 254, 268, 309, 312, 345, 466, 483, 484, 485, 486, 487, 489, 490, 491, 493, 499, 639, 710, 735, 744, 785, 826, 857, 934, 938, 969, 1051], "current": [6, 9, 26, 54, 91, 97, 103, 129, 132, 135, 136, 172, 254, 324, 345, 431, 466, 639, 650, 655, 656, 676, 735, 738, 774, 778, 793, 801, 826, 934, 1051, 1058], "alpha": [6, 73, 268, 360, 361, 362, 639, 657, 662, 664, 690, 700, 735, 841, 842, 843, 1051], "state": [6, 8, 73, 83, 129, 583, 650, 657, 662, 664, 690, 700, 735], "cfg": [7, 8, 9, 15, 130], "path": [7, 9, 27, 28, 29, 30, 31, 32, 33, 34, 35, 47, 48, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 254, 453, 495, 519, 639, 692, 700, 716, 735, 964, 990, 1051], "previous": 7, "save": [7, 158, 159, 173, 227, 254, 316, 324, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 639, 650, 671, 672, 677, 735, 801, 822, 826, 833], "share": [7, 58, 144, 254, 840, 1051], "option": [7, 8, 9, 26, 30, 31, 39, 67, 101, 104, 105, 106, 110, 113, 114, 116, 118, 121, 122, 123, 124, 125, 126, 127, 169, 173, 179, 213, 217, 222, 254, 396, 482, 483, 484, 485, 486, 487, 489, 490, 491, 503, 529, 604, 622, 630, 639, 650, 676, 677, 685, 735, 738, 877, 881, 948, 949, 950, 951, 952, 953, 955, 956, 957, 974, 1000, 1029, 1051], "from": [7, 8, 28, 31, 52, 53, 54, 67, 74, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 139, 140, 144, 146, 151, 156, 158, 159, 170, 171, 173, 174, 179, 187, 191, 195, 197, 198, 200, 215, 222, 223, 225, 227, 254, 304, 311, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 359, 363, 375, 382, 396, 431, 459, 460, 462, 466, 467, 473, 483, 484, 486, 489, 490, 491, 493, 506, 516, 517, 518, 524, 535, 536, 537, 540, 558, 560, 571, 572, 576, 587, 588, 589, 590, 591, 616, 621, 626, 627, 628, 638, 639, 659, 664, 669, 671, 672, 677, 685, 692, 693, 696, 708, 714, 735, 738, 744, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 846, 877, 881, 915, 930, 931, 932, 934, 959, 987, 988, 989, 995, 1006, 1007, 1008, 1011, 1039, 1042, 1051, 1058, 1059], "json": [7, 9, 33, 34, 108, 109, 115, 254, 375, 453, 518, 519, 639, 650, 669, 692, 716, 735, 989, 990], "file": [7, 9, 27, 28, 32, 33, 34, 35, 47, 48, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 146, 254, 453, 664, 692, 716, 735, 744, 846, 1051], "produc": [7, 123, 124, 126, 407, 448, 588, 589, 605, 681, 735, 891], "filepath": 7, "same": [7, 18, 30, 31, 56, 58, 67, 73, 74, 75, 106, 112, 122, 130, 133, 140, 157, 197, 207, 223, 231, 234, 236, 254, 260, 267, 444, 447, 465, 482, 483, 484, 485, 486, 487, 489, 490, 491, 506, 545, 550, 577, 588, 639, 659, 670, 681, 702, 708, 713, 717, 735, 740, 744, 745, 795, 948, 949, 950, 951, 952, 953, 955, 956, 957, 1042, 1051], "reset": [8, 130], "default": [8, 13, 26, 27, 28, 30, 31, 32, 33, 34, 35, 48, 67, 74, 90, 92, 93, 94, 95, 96, 97, 101, 102, 103, 105, 108, 109, 110, 112, 121, 122, 123, 124, 125, 126, 142, 144, 157, 159, 160, 170, 172, 173, 179, 185, 187, 195, 196, 197, 198, 208, 215, 223, 225, 228, 232, 254, 263, 295, 310, 344, 352, 357, 359, 360, 361, 362, 378, 426, 430, 431, 433, 440, 459, 460, 462, 466, 471, 474, 483, 484, 485, 486, 487, 489, 490, 491, 493, 499, 508, 516, 522, 524, 528, 529, 534, 535, 536, 537, 540, 561, 570, 574, 580, 588, 589, 597, 601, 602, 604, 613, 616, 621, 622, 627, 628, 629, 631, 639, 660, 662, 670, 672, 676, 677, 685, 703, 708, 711, 716, 735, 744, 770, 825, 833, 839, 840, 841, 842, 843, 855, 910, 914, 915, 921, 930, 931, 934, 940, 959, 970, 978, 981, 987, 993, 995, 999, 1000, 1005, 1006, 1007, 1008, 1011, 1040, 1051, 1059], "note": [8, 18, 30, 31, 39, 52, 56, 57, 67, 90, 91, 92, 94, 96, 97, 101, 103, 104, 108, 109, 110, 112, 113, 122, 124, 126, 128, 130, 132, 133, 134, 138, 147, 158, 159, 169, 170, 172, 173, 183, 186, 195, 196, 197, 214, 217, 221, 222, 226, 227, 231, 254, 268, 307, 308, 314, 315, 337, 338, 341, 345, 352, 383, 389, 391, 395, 409, 430, 469, 483, 484, 485, 486, 487, 488, 489, 490, 491, 503, 510, 516, 517, 520, 522, 523, 525, 528, 534, 535, 547, 548, 556, 583, 588, 589, 595, 613, 615, 616, 630, 631, 639, 649, 653, 657, 664, 665, 671, 672, 673, 677, 680, 693, 700, 702, 707, 710, 713, 735, 745, 783, 784, 818, 819, 822, 833, 893, 914, 954, 962, 963, 969, 974, 981, 987, 988, 991, 993, 994, 996, 999, 1005, 1006, 1020, 1032, 1051, 1058], "oper": [8, 31, 58, 74, 80, 81, 90, 92, 93, 94, 95, 96, 101, 110, 133, 146, 152, 157, 164, 174, 180, 183, 185, 186, 190, 197, 212, 217, 218, 222, 225, 233, 234, 254, 261, 262, 265, 304, 305, 306, 307, 308, 309, 358, 359, 373, 376, 377, 395, 398, 421, 422, 423, 424, 431, 437, 452, 455, 457, 461, 462, 464, 468, 469, 476, 546, 547, 556, 563, 564, 566, 578, 579, 592, 639, 650, 664, 670, 673, 676, 680, 685, 686, 717, 735, 744, 781, 782, 783, 784, 785, 846, 905, 906, 907, 908, 942, 1027, 1031, 1032, 1033, 1041, 1051], "environ": [8, 26, 125, 128], "local": [8, 30, 104, 113, 126, 254, 352, 797, 798, 830, 833, 935, 936, 1051], "non": [8, 31, 39, 67, 95, 159, 171, 179, 200, 222, 226, 231, 254, 383, 431, 440, 466, 482, 483, 484, 485, 486, 487, 489, 490, 491, 511, 517, 564, 565, 566, 567, 576, 578, 579, 585, 586, 588, 606, 607, 610, 611, 617, 618, 619, 622, 623, 624, 639, 672, 685, 696, 710, 713, 735, 861, 915, 934, 948, 949, 950, 951, 952, 953, 955, 956, 957, 982, 988, 1032, 1051], "env": [8, 127], "back": [8, 67, 146, 218, 254, 465, 541, 639, 744, 846, 1012, 1033, 1051], "none": [9, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 47, 48, 50, 52, 54, 55, 57, 67, 75, 90, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 133, 135, 139, 142, 147, 148, 156, 158, 159, 160, 165, 169, 172, 173, 174, 177, 179, 183, 184, 187, 195, 198, 204, 206, 207, 213, 215, 218, 222, 223, 224, 225, 226, 227, 254, 264, 266, 267, 268, 280, 285, 298, 299, 300, 303, 305, 308, 310, 314, 315, 344, 345, 352, 359, 360, 361, 362, 363, 366, 367, 368, 374, 378, 382, 383, 389, 390, 391, 392, 393, 399, 401, 402, 412, 421, 422, 423, 424, 426, 431, 438, 440, 451, 453, 462, 463, 466, 468, 471, 474, 475, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 493, 497, 498, 499, 500, 504, 505, 509, 510, 513, 514, 518, 519, 520, 521, 522, 523, 524, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 540, 543, 544, 545, 554, 564, 565, 567, 568, 570, 576, 579, 581, 586, 588, 589, 590, 591, 593, 594, 603, 604, 605, 606, 607, 610, 611, 616, 617, 618, 621, 622, 624, 626, 627, 628, 629, 630, 639, 655, 656, 660, 665, 666, 671, 672, 675, 676, 677, 679, 681, 685, 688, 699, 700, 701, 702, 708, 709, 710, 714, 716, 719, 735, 738, 742, 743, 744, 745, 752, 753, 774, 775, 786, 787, 789, 807, 808, 809, 814, 825, 826, 833, 838, 839, 841, 842, 843, 847, 848, 849, 851, 854, 855, 857, 859, 860, 861, 870, 873, 874, 877, 880, 881, 885, 886, 896, 905, 906, 908, 910, 915, 921, 922, 923, 924, 925, 929, 938, 939, 940, 943, 946, 947, 948, 949, 950, 951, 952, 953, 955, 956, 957, 959, 963, 965, 967, 970, 971, 974, 975, 978, 980, 981, 984, 985, 989, 990, 991, 992, 993, 994, 995, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1026, 1029, 1030, 1033, 1034, 1040, 1041, 1051, 1058], "written": [9, 27, 28, 31, 32, 33, 34, 35, 47, 48, 254, 716, 735], "contain": [9, 29, 31, 67, 72, 92, 95, 97, 104, 113, 119, 123, 134, 142, 158, 171, 183, 187, 221, 254, 268, 289, 290, 387, 440, 511, 514, 516, 517, 519, 532, 533, 639, 653, 660, 671, 690, 707, 735, 738, 921, 927, 982, 985, 987, 988, 990, 1003, 1004, 1027, 1051], "where": [9, 31, 52, 67, 103, 123, 142, 146, 170, 179, 196, 208, 228, 254, 279, 354, 357, 359, 462, 477, 494, 503, 506, 508, 561, 574, 580, 617, 618, 621, 629, 630, 639, 685, 703, 711, 735, 744, 755, 835, 839, 846, 960, 974, 978, 1040, 1042, 1051, 1058], "ascii": [10, 18, 521, 523, 527, 543, 992, 994, 998, 1014], "charact": [10, 12, 18, 24, 28, 29, 101, 102, 112, 254, 341, 515, 517, 520, 521, 522, 527, 528, 530, 531, 534, 543, 690, 735, 738, 822, 986, 988, 991, 992, 993, 998, 999, 1001, 1002, 1005, 1014], "displai": [10, 11, 12, 15, 17, 21, 23, 31, 254], "tabl": [10, 14, 15, 17, 18, 19, 20, 21, 23, 24, 29, 30, 31, 53, 54, 55, 57, 90, 97, 101, 102, 104, 112, 113, 187, 212, 218, 225, 226, 254, 710, 735, 1033, 1051, 1058], "outlin": 10, "fals": [10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 31, 33, 35, 47, 48, 52, 67, 73, 91, 95, 97, 101, 102, 105, 106, 109, 110, 112, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 132, 134, 135, 136, 139, 152, 153, 155, 156, 157, 158, 159, 163, 164, 166, 167, 168, 170, 173, 174, 177, 182, 183, 185, 187, 188, 195, 196, 197, 198, 201, 205, 207, 213, 215, 217, 218, 221, 222, 223, 227, 229, 231, 237, 238, 240, 241, 242, 244, 247, 254, 264, 265, 266, 268, 278, 284, 286, 289, 290, 304, 305, 306, 307, 308, 309, 310, 328, 344, 346, 352, 357, 358, 359, 360, 361, 362, 376, 377, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 398, 401, 402, 406, 409, 427, 430, 432, 437, 438, 451, 461, 462, 464, 471, 474, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 495, 498, 499, 503, 505, 506, 510, 514, 518, 524, 525, 526, 530, 531, 533, 535, 536, 537, 557, 560, 563, 564, 565, 566, 567, 570, 573, 574, 580, 583, 588, 589, 601, 602, 604, 613, 616, 622, 627, 628, 630, 631, 639, 653, 655, 656, 657, 662, 664, 670, 671, 672, 676, 677, 679, 681, 690, 697, 700, 702, 707, 708, 713, 720, 721, 723, 724, 725, 727, 730, 735, 738, 744, 754, 760, 767, 773, 774, 781, 782, 783, 784, 785, 786, 805, 825, 827, 833, 839, 841, 842, 843, 850, 861, 862, 863, 865, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 881, 885, 886, 893, 911, 914, 916, 927, 935, 936, 938, 940, 941, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 961, 964, 969, 974, 976, 981, 985, 989, 995, 996, 997, 1001, 1002, 1004, 1006, 1007, 1008, 1031, 1032, 1033, 1036, 1039, 1041, 1042, 1051, 1058], "revert": 10, "abc": [10, 16, 17, 18, 19, 20, 21, 22, 23, 261, 517, 525, 639, 738, 988, 996], "xyz": [10, 16, 17, 18, 19, 20, 21, 22, 23, 261, 511, 517, 639, 982, 988, 1029, 1051], "f64": [10, 14, 16, 17, 19, 20, 21, 22, 23, 49, 52, 67, 69, 71, 93, 117, 124, 135, 136, 138, 139, 140, 143, 147, 148, 152, 155, 156, 157, 164, 172, 173, 177, 178, 187, 188, 189, 206, 207, 208, 228, 231, 234, 238, 240, 241, 242, 243, 244, 246, 247, 254, 260, 263, 270, 271, 272, 273, 274, 275, 293, 296, 297, 301, 302, 309, 311, 314, 315, 346, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 372, 373, 376, 377, 382, 389, 391, 392, 393, 395, 396, 398, 418, 433, 434, 435, 437, 441, 442, 443, 454, 457, 459, 460, 461, 462, 466, 468, 472, 473, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 501, 502, 503, 507, 508, 552, 553, 556, 561, 571, 572, 575, 576, 578, 580, 582, 593, 608, 609, 620, 621, 629, 639, 655, 659, 665, 666, 670, 676, 677, 683, 684, 691, 702, 703, 711, 713, 714, 717, 721, 723, 724, 725, 726, 727, 729, 730, 735, 738, 746, 747, 748, 749, 750, 751, 771, 772, 779, 780, 785, 786, 787, 827, 842, 843, 848, 852, 857, 934, 938, 948, 950, 951, 953, 954, 955, 957, 958, 972, 973, 977, 1024, 1025, 1038, 1051, 1059], "fmt": [11, 381, 596, 639, 674, 735], "floatfmt": 11, "mix": [11, 535, 537, 787, 1006, 1008, 1051], "control": [11, 31, 57, 74, 122, 254, 662, 735], "how": [11, 30, 31, 58, 67, 74, 75, 93, 96, 103, 142, 172, 225, 226, 254, 295, 312, 344, 352, 382, 407, 408, 465, 477, 488, 518, 630, 639, 660, 676, 710, 735, 770, 788, 825, 833, 891, 892, 954, 989, 1051], "float": [11, 31, 41, 42, 117, 119, 120, 121, 124, 126, 139, 144, 147, 173, 189, 198, 204, 246, 254, 297, 298, 299, 300, 310, 314, 315, 346, 357, 358, 359, 360, 361, 362, 367, 372, 376, 377, 382, 385, 388, 389, 391, 392, 393, 398, 406, 433, 437, 441, 454, 459, 460, 461, 462, 468, 471, 472, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 556, 575, 608, 609, 614, 616, 621, 623, 629, 639, 665, 677, 691, 699, 700, 729, 735, 738, 767, 772, 775, 776, 777, 786, 787, 789, 827, 839, 840, 841, 842, 843, 848, 852, 857, 867, 881, 890, 891, 917, 923, 924, 930, 931, 937, 938, 939, 948, 949, 950, 951, 952, 953, 955, 956, 957, 958, 959, 960, 962, 963, 974, 978, 1020, 1032, 1040, 1051, 1059], "point": [11, 31, 41, 42, 124, 126, 147, 158, 174, 254, 297, 310, 314, 315, 346, 367, 372, 389, 391, 492, 493, 588, 639, 665, 671, 681, 693, 735, 772, 786, 827, 848, 852, 867, 958, 959, 1032, 1051], "full": [11, 38, 67, 72, 74, 101, 102, 104, 112, 113, 158, 159, 254, 535, 536, 537, 540, 671, 672, 681, 735, 738, 1006, 1007, 1008, 1011], "format": [11, 14, 18, 28, 31, 100, 101, 102, 112, 117, 145, 156, 170, 179, 196, 197, 214, 252, 254, 345, 348, 351, 451, 535, 536, 537, 540, 663, 669, 685, 716, 735, 829, 832, 1006, 1007, 1008, 1011, 1050], "number": [11, 12, 13, 15, 23, 24, 28, 31, 35, 48, 67, 84, 90, 92, 94, 96, 99, 101, 102, 103, 105, 108, 109, 112, 115, 122, 124, 125, 127, 128, 134, 135, 144, 145, 147, 148, 161, 170, 171, 174, 175, 182, 183, 198, 203, 204, 208, 210, 221, 225, 228, 237, 239, 248, 254, 279, 285, 291, 303, 309, 312, 326, 329, 334, 336, 346, 353, 354, 356, 360, 361, 362, 366, 368, 374, 379, 389, 391, 399, 400, 408, 413, 425, 429, 431, 467, 471, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 496, 497, 499, 508, 520, 523, 525, 531, 532, 538, 549, 555, 561, 580, 581, 588, 599, 617, 618, 621, 625, 629, 639, 653, 655, 663, 664, 665, 666, 673, 680, 690, 698, 699, 703, 705, 707, 711, 720, 722, 731, 735, 766, 774, 785, 788, 803, 806, 815, 817, 827, 834, 835, 837, 840, 841, 842, 843, 847, 849, 856, 867, 883, 892, 897, 909, 913, 915, 927, 928, 938, 948, 949, 950, 951, 952, 953, 955, 956, 957, 958, 959, 966, 967, 970, 978, 991, 994, 996, 1002, 1003, 1009, 1021, 1035, 1040, 1051, 1059], "plai": [12, 579], "sam": 12, "As": [12, 90, 92, 93, 94, 96, 105, 108, 109, 254, 735], "time": [12, 30, 38, 40, 52, 57, 72, 73, 112, 146, 158, 159, 173, 227, 254, 291, 316, 317, 318, 319, 320, 324, 325, 341, 344, 345, 348, 350, 351, 352, 355, 405, 406, 431, 483, 484, 485, 486, 487, 489, 490, 491, 535, 537, 540, 554, 555, 578, 579, 588, 589, 591, 597, 627, 628, 639, 657, 671, 672, 677, 690, 735, 738, 744, 766, 793, 794, 795, 796, 801, 802, 822, 825, 826, 829, 831, 832, 833, 836, 846, 889, 891, 1006, 1008, 1011, 1034, 1035, 1051, 1059], "goe": 12, "By": [12, 13, 67, 101, 102, 105, 112, 158, 159, 173, 208, 227, 228, 254, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 508, 524, 561, 580, 604, 621, 629, 639, 671, 672, 677, 703, 711, 735, 822, 826, 833, 978, 995, 1032, 1040, 1051], "begin": [12, 31, 254, 360, 361, 362, 516, 588, 639, 841, 842, 843, 987, 1051], "beauti": 12, "friendship": 12, "len": [12, 31, 122, 124, 171, 254, 304, 310, 471, 521, 527, 543, 639, 786, 938, 992, 998, 1014, 1051], "u32": [12, 52, 158, 184, 232, 237, 245, 247, 254, 262, 269, 276, 277, 278, 279, 280, 303, 304, 322, 326, 330, 334, 336, 342, 343, 346, 353, 354, 399, 403, 404, 407, 416, 440, 458, 463, 474, 481, 483, 484, 486, 489, 490, 491, 494, 511, 520, 523, 554, 558, 564, 569, 573, 574, 581, 612, 639, 671, 688, 715, 720, 728, 730, 735, 754, 755, 756, 767, 799, 803, 810, 812, 815, 817, 820, 823, 824, 827, 834, 835, 857, 900, 940, 947, 982, 991, 994, 1034, 1037, 1039, 1051], "37": 12, "beaut": 12, "48": [12, 159, 254, 672, 735], "fmt_str_length": 12, "50": [12, 31, 146, 254, 298, 299, 300, 345, 352, 639, 775, 833, 1051], "print": [12, 15, 17, 18, 23, 102, 118, 143, 156, 157, 171, 174, 216, 233, 254, 381, 451, 591, 639, 674, 735, 868, 948, 1030, 1051, 1059], "overwrit": [13, 29, 30, 90, 92, 93, 94, 96, 101, 102, 108, 109, 112, 132, 254, 263, 639, 664, 735], "chunk": [13, 48, 99, 101, 102, 110, 112, 114, 115, 116, 124, 126, 146, 171, 182, 254, 267, 475, 639, 735, 744, 773, 846, 853, 927, 941, 1027, 1051], "stream": [13, 32, 47, 48, 73, 134, 157, 172, 221, 223, 254, 653, 657, 662, 664, 670, 676, 681, 685, 690, 700, 702, 707, 708, 735], "engin": [13, 29, 103, 128, 133, 157, 172, 223, 236, 254, 670, 676, 681, 685, 708, 719, 735, 745, 1051], "determin": [13, 31, 65, 67, 74, 93, 96, 101, 102, 105, 110, 112, 116, 133, 152, 158, 159, 170, 171, 222, 227, 254, 295, 328, 344, 352, 431, 440, 448, 471, 477, 483, 484, 485, 486, 487, 489, 490, 491, 503, 518, 538, 613, 616, 631, 639, 671, 672, 735, 770, 805, 825, 833, 857, 915, 921, 938, 974, 989, 1009, 1051], "schema": [13, 30, 52, 58, 68, 69, 70, 74, 75, 85, 86, 88, 90, 92, 93, 94, 96, 97, 101, 102, 103, 107, 108, 109, 111, 112, 115, 122, 124, 133, 135, 136, 143, 144, 180, 183, 217, 254, 281, 282, 283, 431, 448, 518, 563, 622, 639, 655, 656, 661, 681, 686, 716, 719, 735, 738, 759, 778, 989, 1051], "thread": [13, 28, 99, 101, 102, 103, 128, 254, 268, 409, 493, 499, 639, 893], "pool": [13, 128], "For": [13, 30, 31, 103, 104, 105, 113, 146, 159, 172, 173, 236, 254, 293, 360, 361, 362, 431, 449, 476, 503, 510, 516, 517, 525, 583, 588, 595, 596, 639, 672, 677, 719, 735, 744, 841, 842, 843, 846, 942, 974, 981, 987, 988, 996, 1032, 1051], "some": [13, 26, 30, 31, 93, 101, 102, 112, 142, 254, 660, 735, 868, 1051, 1059], "dataset": [13, 35, 101, 102, 112, 117, 172, 254, 396, 639, 650, 676, 681, 735, 881, 1051], "esp": 13, "when": [13, 15, 17, 21, 31, 35, 38, 48, 57, 58, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 101, 102, 106, 110, 112, 113, 114, 115, 124, 126, 133, 134, 143, 144, 146, 148, 152, 158, 159, 172, 186, 195, 197, 200, 207, 215, 217, 221, 223, 254, 298, 299, 300, 344, 352, 360, 361, 362, 368, 431, 438, 440, 449, 467, 481, 505, 506, 522, 528, 534, 535, 573, 583, 588, 595, 639, 653, 666, 671, 672, 676, 681, 696, 702, 707, 708, 735, 744, 775, 776, 777, 825, 833, 840, 841, 842, 843, 846, 849, 921, 947, 962, 963, 993, 999, 1005, 1006, 1028, 1051], "have": [13, 26, 31, 38, 67, 75, 91, 101, 102, 103, 105, 124, 126, 146, 159, 170, 190, 196, 197, 214, 254, 309, 360, 361, 362, 449, 471, 474, 535, 537, 588, 639, 672, 685, 700, 715, 735, 738, 744, 785, 841, 842, 843, 846, 854, 938, 940, 1006, 1008, 1051, 1059], "larg": [13, 67, 158, 159, 173, 227, 254, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 639, 671, 672, 677, 735, 822, 826, 833], "element": [13, 23, 123, 126, 134, 169, 187, 195, 208, 221, 228, 254, 268, 270, 271, 272, 273, 274, 275, 291, 296, 301, 302, 304, 305, 306, 307, 308, 309, 364, 365, 378, 387, 407, 409, 410, 421, 422, 423, 424, 434, 435, 465, 466, 474, 477, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 500, 501, 502, 507, 508, 531, 532, 538, 552, 553, 555, 561, 580, 617, 618, 621, 629, 639, 653, 702, 703, 707, 711, 735, 745, 746, 747, 748, 749, 750, 751, 766, 771, 774, 779, 780, 781, 782, 783, 784, 785, 844, 845, 850, 856, 868, 880, 883, 891, 893, 894, 905, 906, 907, 908, 918, 919, 934, 940, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 960, 971, 972, 973, 977, 978, 1002, 1003, 1009, 1021, 1024, 1025, 1030, 1035, 1036, 1040, 1051], "too": [13, 158, 159, 173, 227, 254, 341, 345, 352, 481, 483, 484, 485, 486, 487, 489, 490, 491, 639, 671, 672, 677, 735, 822, 826, 833], "optimist": 13, "lead": [13, 35, 97, 117, 158, 159, 254, 268, 438, 495, 522, 534, 543, 550, 560, 580, 639, 671, 672, 681, 719, 735, 745, 964, 993, 1005, 1014, 1051], "out": [13, 47, 48, 97, 118, 159, 197, 254, 287, 412, 430, 510, 512, 630, 672, 735, 762, 896, 914, 981, 983], "memori": [13, 48, 74, 90, 91, 94, 95, 96, 101, 102, 106, 110, 112, 114, 115, 116, 132, 133, 146, 197, 205, 236, 254, 465, 475, 498, 639, 735, 744, 745, 846, 941, 968, 969, 1051], "error": [13, 30, 76, 101, 102, 112, 158, 159, 173, 187, 195, 227, 254, 263, 287, 293, 341, 345, 352, 395, 414, 430, 483, 484, 485, 486, 487, 489, 490, 491, 510, 512, 516, 518, 519, 535, 536, 537, 540, 639, 671, 672, 677, 719, 735, 762, 767, 822, 826, 833, 898, 914, 981, 983, 987, 989, 990, 1006, 1007, 1008, 1011, 1051], "row": [13, 18, 23, 28, 31, 33, 35, 48, 67, 68, 70, 74, 82, 84, 89, 93, 94, 96, 97, 101, 102, 105, 106, 110, 112, 114, 115, 116, 119, 122, 124, 133, 134, 135, 142, 146, 149, 152, 156, 157, 158, 160, 161, 166, 168, 169, 170, 171, 173, 174, 175, 179, 183, 197, 198, 206, 210, 211, 214, 216, 221, 223, 225, 226, 232, 236, 239, 248, 254, 268, 279, 365, 379, 400, 410, 431, 465, 466, 478, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 504, 506, 515, 518, 549, 570, 573, 583, 584, 595, 599, 601, 602, 615, 617, 618, 625, 630, 639, 653, 655, 657, 660, 664, 667, 668, 671, 673, 677, 678, 680, 681, 685, 701, 705, 706, 707, 708, 710, 715, 719, 722, 731, 735, 744, 845, 846, 856, 880, 894, 934, 944, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 975, 986, 989, 1021, 1051, 1059], "per": [13, 28, 31, 122, 124, 134, 156, 183, 184, 207, 221, 243, 245, 246, 254, 268, 292, 409, 412, 430, 506, 573, 639, 653, 702, 707, 726, 728, 729, 735, 893, 896, 914], "everi": [13, 101, 102, 112, 158, 211, 214, 227, 254, 304, 305, 306, 307, 308, 309, 345, 352, 365, 403, 404, 408, 410, 412, 413, 421, 426, 429, 515, 551, 583, 584, 639, 664, 671, 706, 735, 781, 782, 783, 784, 785, 826, 833, 845, 887, 888, 892, 894, 896, 897, 905, 910, 913, 986, 1023, 1051], "process": [13, 28, 47, 48, 128, 254, 735], "liter": [14, 18, 30, 52, 105, 124, 125, 126, 127, 156, 170, 176, 177, 181, 182, 185, 195, 196, 200, 209, 213, 226, 231, 254, 263, 286, 318, 358, 359, 366, 373, 376, 377, 383, 398, 437, 440, 455, 457, 461, 462, 468, 510, 525, 526, 546, 556, 564, 565, 566, 567, 570, 574, 576, 578, 579, 585, 586, 587, 588, 589, 590, 601, 602, 604, 606, 607, 610, 611, 613, 616, 619, 622, 623, 624, 626, 627, 628, 631, 639, 666, 696, 710, 713, 735, 738, 761, 795, 847, 861, 962, 963, 981, 996, 997, 1051, 1058], "left": [14, 31, 54, 67, 119, 120, 158, 159, 172, 173, 226, 254, 360, 361, 362, 382, 383, 483, 484, 485, 486, 487, 489, 490, 491, 494, 521, 543, 554, 576, 583, 584, 588, 589, 595, 615, 627, 628, 630, 639, 671, 672, 676, 677, 710, 735, 841, 842, 843, 861, 960, 992, 1014, 1034, 1051], "center": [14, 31, 254, 360, 361, 362, 482, 483, 484, 485, 486, 487, 489, 490, 491, 639, 841, 842, 843, 948, 949, 950, 951, 952, 953, 955, 956, 957, 1051], "right": [14, 16, 31, 101, 102, 119, 120, 158, 159, 172, 173, 254, 310, 360, 361, 362, 383, 421, 422, 423, 424, 471, 483, 484, 485, 486, 487, 489, 490, 491, 494, 503, 527, 576, 588, 589, 627, 628, 639, 671, 672, 676, 677, 735, 786, 841, 842, 843, 861, 905, 906, 907, 908, 938, 960, 974, 998, 1051], "cell": [14, 31, 254], "align": [14, 31, 67, 74, 254, 543, 1014], "keyerror": [14, 18], "recognis": [14, 18, 121], "column_abc": 14, "column_xyz": 14, "visibl": [15, 144, 254, 840, 1051], "eg": [15, 23, 31, 103, 254, 345, 535, 537, 556, 639, 1006, 1008], "low": [15, 128], "rang": [15, 31, 103, 139, 144, 158, 171, 254, 310, 311, 322, 336, 342, 343, 345, 352, 353, 382, 471, 570, 578, 587, 588, 589, 590, 601, 602, 626, 627, 628, 639, 671, 735, 786, 787, 799, 817, 823, 824, 826, 833, 834, 840, 934, 938, 1051], "100": [15, 31, 93, 96, 101, 102, 112, 115, 254, 518, 538, 543, 735, 949, 950, 952, 989, 1009, 1051, 1059], "98": [15, 164, 254, 291, 505, 538, 550, 555, 639, 1009], "99": [15, 31, 147, 148, 164, 167, 254, 262, 291, 366, 368, 505, 550, 555, 639, 665, 666, 735, 839, 847, 1051], "tbl_col": 15, "10": [15, 27, 28, 30, 31, 32, 35, 48, 52, 67, 74, 97, 103, 112, 124, 126, 136, 146, 155, 158, 159, 161, 163, 164, 165, 182, 186, 188, 192, 193, 200, 210, 231, 234, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 263, 267, 276, 277, 278, 280, 298, 303, 305, 308, 310, 312, 314, 315, 316, 318, 324, 337, 338, 344, 345, 352, 355, 378, 379, 382, 387, 395, 399, 400, 408, 413, 425, 426, 429, 434, 466, 467, 471, 504, 543, 549, 563, 576, 583, 588, 592, 595, 597, 599, 604, 605, 625, 628, 639, 657, 671, 672, 673, 675, 680, 689, 690, 696, 704, 705, 713, 717, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 735, 738, 745, 775, 786, 788, 793, 795, 801, 825, 833, 836, 839, 856, 868, 883, 892, 897, 909, 910, 913, 918, 934, 962, 963, 1021, 1051, 1059], "95": [15, 262, 639], "96": [15, 262, 639], "97": [15, 164, 254, 262, 639], "move": [16, 197, 254, 360, 361, 362, 483, 484, 486, 490, 639, 841, 842, 843, 949, 950, 952, 956, 1051], "inlin": [16, 197, 254, 510, 516, 517, 525, 981, 987, 988, 996], "parenthes": 16, "below": [17, 31, 104, 113, 142, 254, 368, 588, 589, 630, 639, 660, 735], "ascii_ful": 18, "ascii_full_condens": 18, "ascii_no_bord": 18, "ascii_borders_onli": 18, "ascii_borders_only_condens": 18, "ascii_horizontal_onli": 18, "ascii_markdown": 18, "utf8_ful": [18, 67, 97], "utf8_full_condens": [18, 97], "utf8_no_bord": 18, "utf8_borders_onli": 18, "utf8_horizontal_onli": 18, "noth": [18, 292, 511, 516, 519, 639, 982, 987, 990], "rounded_corn": 18, "style": [18, 31, 187, 254], "border": 18, "line": [18, 31, 101, 102, 105, 112, 156, 166, 168, 254, 516, 987], "includ": [18, 26, 28, 30, 31, 72, 104, 113, 124, 134, 139, 144, 158, 185, 197, 221, 222, 225, 254, 310, 346, 383, 471, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 528, 530, 531, 534, 583, 617, 618, 639, 653, 671, 707, 735, 786, 787, 827, 840, 861, 938, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 1001, 1002, 1005, 1041, 1051], "divid": [18, 345, 352, 360, 361, 362, 396, 639, 826, 833, 841, 842, 843, 881, 1051], "dens": [18, 156, 254, 474, 639, 940, 1051], "space": [18, 158, 254, 471, 639, 671, 735, 938, 1051], "horizont": [18, 74, 152, 163, 225, 254, 564, 565, 566, 567, 578, 579, 583, 584, 585, 586, 592, 595, 606, 607, 610, 611, 615, 623, 624], "markdown": 18, "compat": [18, 31, 35, 48, 254, 510, 511, 516, 517, 525, 526, 735, 738, 981, 982, 987, 988, 996, 997], "No": [18, 541, 1012], "appli": [18, 28, 31, 52, 74, 112, 121, 124, 126, 152, 186, 254, 320, 321, 322, 326, 328, 329, 330, 332, 334, 336, 339, 342, 343, 346, 349, 353, 354, 356, 361, 362, 438, 467, 482, 483, 484, 486, 490, 525, 535, 536, 537, 540, 563, 583, 584, 595, 605, 615, 630, 639, 673, 680, 681, 689, 735, 797, 798, 799, 803, 805, 806, 810, 812, 815, 817, 820, 823, 824, 827, 830, 834, 835, 837, 842, 843, 948, 949, 950, 952, 956, 996, 1006, 1007, 1008, 1011, 1051], "round": [18, 31, 69, 97, 254, 297, 372, 552, 639, 772, 852, 1051], "corner": [18, 31, 97, 254], "op": [18, 126, 254, 477, 535, 537, 639, 735, 1006, 1008, 1051], "one": [18, 29, 31, 57, 67, 82, 90, 92, 93, 94, 95, 96, 108, 109, 125, 126, 127, 130, 148, 149, 156, 157, 158, 159, 170, 179, 187, 195, 196, 201, 217, 220, 235, 254, 262, 368, 431, 435, 482, 505, 517, 550, 588, 620, 623, 630, 639, 666, 667, 670, 671, 672, 685, 697, 714, 718, 735, 744, 849, 877, 915, 919, 948, 988, 1015, 1051], "more": [18, 31, 33, 35, 48, 57, 67, 74, 89, 90, 91, 92, 93, 94, 95, 96, 103, 104, 108, 109, 110, 113, 124, 126, 130, 133, 138, 139, 170, 174, 179, 183, 195, 196, 198, 217, 223, 236, 254, 265, 268, 284, 298, 299, 300, 396, 432, 435, 438, 464, 493, 503, 517, 535, 536, 537, 557, 620, 623, 630, 639, 685, 708, 735, 738, 745, 760, 775, 776, 777, 787, 877, 881, 916, 959, 974, 988, 1006, 1007, 1008, 1036, 1051, 1059], "semigraph": 18, "box": [18, 133, 254], "draw": [18, 23, 24, 123, 493, 499, 639, 1059], "found": [18, 28, 54, 77, 86, 88, 93, 97, 143, 226, 254, 494, 519, 535, 537, 639, 710, 735, 960, 990, 1006, 1008, 1051, 1058], "unicod": 18, "block": [18, 157, 223, 254, 670, 693, 708, 715, 719, 735, 962, 963, 1051], "http": [18, 31, 91, 103, 132, 138, 254, 516, 987], "en": [18, 31, 254], "wikipedia": 18, "org": [18, 91, 103, 132, 138, 254], "wiki": 18, "drawing_charact": 18, "box_draw": 18, "mno": 18, "tbl_format": 18, "tbl_hide_column_data_typ": 18, "tbl_hide_dataframe_shap": 18, "hide": [19, 20, 21, 22, 31, 254], "etc": [19, 30, 31, 101, 104, 106, 110, 113, 114, 116, 254, 738, 962, 963, 1051], "inform": [21, 72, 104, 113, 138, 254, 298, 299, 300, 396, 503, 510, 516, 517, 525, 588, 589, 639, 690, 735, 775, 776, 777, 881, 974, 981, 987, 988, 996, 1051], "separ": [22, 28, 99, 101, 102, 112, 185, 187, 215, 222, 224, 254, 268, 410, 414, 515, 579, 583, 584, 639, 709, 735, 894, 898, 986, 1019, 1028, 1051], "between": [22, 74, 121, 122, 124, 126, 138, 189, 246, 254, 293, 313, 383, 414, 421, 422, 423, 424, 466, 471, 472, 487, 493, 499, 509, 571, 572, 580, 582, 614, 617, 618, 639, 691, 729, 735, 767, 789, 861, 898, 905, 906, 907, 908, 934, 938, 939, 953, 980, 1051], "set_tbl_column_data_type_inlin": 22, "max": [23, 31, 35, 48, 52, 128, 139, 148, 157, 158, 159, 187, 254, 298, 299, 305, 368, 431, 465, 474, 483, 495, 532, 607, 620, 639, 666, 670, 671, 672, 735, 775, 776, 781, 787, 849, 915, 940, 949, 964, 1003, 1051], "both": [23, 28, 58, 158, 159, 172, 173, 180, 195, 254, 267, 383, 483, 484, 485, 486, 487, 489, 490, 491, 588, 589, 627, 628, 639, 649, 671, 672, 676, 677, 686, 735, 861, 870, 1051], "tbl_row": 23, "char": [24, 58, 75, 517, 523, 988, 994], "enabl": [25, 75, 129, 200, 231, 254, 495, 639, 696, 713, 735, 964, 1051], "addit": [25, 30, 31, 93, 104, 113, 122, 140, 145, 157, 185, 200, 201, 207, 224, 231, 234, 254, 261, 324, 363, 366, 465, 506, 510, 516, 517, 525, 564, 566, 573, 576, 577, 578, 579, 585, 593, 606, 610, 619, 622, 623, 639, 659, 663, 670, 696, 697, 702, 709, 713, 717, 735, 793, 801, 847, 981, 987, 988, 996, 1051], "verbos": [25, 130, 517, 988], "debug": [25, 657, 664, 681, 735, 1059], "log": [25, 69, 291, 357, 435, 457, 468, 555, 639, 766, 839, 1035, 1051], "if_set": 26, "env_onli": 26, "dict": [26, 30, 31, 35, 55, 68, 70, 72, 90, 92, 93, 94, 95, 96, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 124, 151, 170, 185, 191, 195, 196, 197, 199, 213, 214, 222, 254, 264, 266, 310, 440, 471, 481, 639, 693, 695, 735, 921, 1051], "show": [26, 31, 56, 142, 156, 174, 184, 254, 660, 690, 700, 735], "variabl": [26, 49, 54, 125, 128, 179, 215, 254, 685, 735, 1028, 1051, 1058], "restrict": [26, 532, 588, 589, 1003], "dictionari": [26, 31, 90, 92, 93, 94, 96, 101, 102, 107, 108, 109, 111, 112, 170, 185, 195, 196, 197, 213, 214, 254, 440, 639, 735, 921, 1051], "those": [26, 31, 101, 197, 254, 474, 516, 639, 738, 940, 987, 1051], "been": [26, 31, 254, 292, 474, 483, 484, 485, 486, 487, 489, 490, 491, 570, 639, 940, 1051], "set_fmt_float": 26, "directli": [26, 54, 124, 126, 130, 197, 254, 360, 361, 362, 616, 639, 735, 841, 842, 843, 1051, 1059], "via": [26, 101, 102, 105, 112, 114, 115, 116, 170, 196, 254, 268, 639], "set_stat": 26, "all_stat": 26, "binaryio": [27, 32, 100, 101, 105, 106, 107, 110, 111, 254], "bytesio": [27, 28, 31, 32, 35, 100, 101, 102, 105, 106, 110, 254], "compress": [27, 32, 35, 47, 48, 254, 735], "avrocompress": [27, 254], "uncompress": [27, 32, 35, 48, 106, 114, 254, 735], "write": [27, 28, 29, 30, 31, 32, 33, 35, 48, 102, 106, 130, 254, 298, 299, 300, 453, 639, 679, 700, 716, 735, 775, 776, 777, 1051], "apach": [27, 35, 100, 103, 254], "avro": [27, 100, 254, 650], "should": [27, 28, 29, 31, 32, 33, 34, 35, 47, 48, 74, 90, 92, 94, 96, 104, 108, 109, 112, 121, 122, 126, 132, 133, 134, 140, 158, 159, 170, 173, 195, 196, 197, 214, 215, 221, 224, 227, 236, 254, 262, 268, 295, 309, 310, 341, 345, 352, 355, 363, 389, 391, 409, 471, 482, 483, 484, 485, 486, 487, 489, 490, 491, 494, 503, 577, 593, 600, 604, 617, 618, 630, 639, 653, 659, 671, 672, 676, 677, 681, 700, 702, 707, 709, 716, 735, 738, 745, 770, 785, 786, 822, 826, 833, 836, 893, 938, 948, 949, 950, 951, 952, 953, 955, 956, 957, 960, 974, 1051], "snappi": [27, 35, 48, 254, 735], "deflat": [27, 254], "import": [27, 28, 31, 32, 35, 38, 67, 90, 94, 95, 112, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 139, 156, 158, 171, 173, 217, 218, 225, 227, 254, 311, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 483, 484, 486, 489, 490, 491, 571, 572, 588, 589, 591, 627, 628, 639, 650, 671, 677, 681, 735, 779, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 865, 869, 871, 872, 877, 948, 972, 1024, 1051, 1059], "pathlib": [27, 28, 32, 35, 112, 254], "foo": [27, 28, 30, 32, 33, 34, 35, 56, 133, 137, 138, 140, 141, 142, 143, 146, 149, 150, 152, 153, 154, 155, 160, 161, 162, 163, 164, 165, 167, 172, 176, 177, 178, 181, 184, 187, 189, 191, 192, 193, 195, 198, 199, 200, 202, 203, 204, 206, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 222, 223, 224, 228, 229, 230, 233, 254, 294, 298, 299, 300, 341, 379, 381, 400, 406, 411, 412, 415, 416, 478, 496, 497, 509, 511, 513, 515, 517, 522, 528, 530, 532, 534, 539, 542, 549, 551, 569, 575, 577, 580, 581, 582, 594, 598, 599, 603, 606, 608, 609, 610, 612, 614, 619, 621, 625, 629, 630, 639, 658, 659, 660, 661, 667, 674, 675, 676, 688, 693, 695, 696, 708, 709, 712, 714, 716, 735, 738, 769, 775, 822, 898, 944, 982, 984, 986, 988, 1003, 1010, 1013, 1051], "bar": [27, 28, 30, 32, 33, 34, 35, 56, 133, 137, 138, 140, 141, 142, 143, 146, 149, 150, 152, 153, 154, 155, 161, 163, 164, 165, 167, 172, 176, 177, 178, 181, 184, 187, 189, 191, 192, 193, 195, 198, 199, 200, 203, 204, 206, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 223, 224, 228, 229, 233, 254, 294, 381, 416, 503, 513, 515, 530, 532, 569, 575, 577, 580, 581, 582, 594, 599, 603, 606, 608, 609, 610, 612, 619, 621, 625, 629, 630, 639, 658, 659, 660, 661, 667, 674, 675, 676, 688, 693, 695, 696, 708, 709, 712, 716, 735, 738, 769, 898, 974, 984, 986, 1003, 1051], "ham": [27, 28, 30, 32, 35, 137, 138, 140, 141, 142, 143, 149, 150, 153, 160, 161, 163, 172, 176, 177, 178, 181, 184, 189, 191, 193, 195, 198, 199, 200, 203, 204, 206, 208, 209, 210, 215, 216, 217, 218, 219, 223, 228, 229, 254, 294, 577, 658, 659, 660, 661, 667, 676, 688, 693, 695, 696, 708, 714, 735, 769], "d": [27, 28, 30, 31, 32, 35, 58, 75, 93, 117, 139, 156, 158, 160, 161, 164, 172, 210, 212, 225, 229, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 261, 263, 325, 348, 351, 383, 467, 498, 511, 517, 531, 535, 536, 537, 576, 597, 639, 671, 676, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 735, 802, 829, 832, 861, 982, 988, 1002, 1006, 1007, 1008, 1051], "e": [27, 28, 30, 32, 35, 58, 75, 91, 101, 102, 105, 106, 110, 114, 116, 139, 156, 158, 159, 161, 173, 210, 212, 217, 225, 227, 254, 261, 268, 341, 345, 352, 357, 363, 383, 433, 440, 483, 484, 485, 486, 487, 489, 490, 491, 498, 503, 593, 630, 639, 671, 672, 677, 679, 693, 735, 738, 822, 826, 833, 839, 861, 961, 974, 1032, 1051], "dirpath": [27, 28, 32, 35, 112, 254], "new_fil": [27, 28, 32, 35, 254], "has_head": [28, 31, 101, 102, 105, 112, 254], "quot": [28, 29, 101, 102, 112, 254], "batch_siz": [28, 101, 102, 115, 254], "1024": [28, 48, 101, 102, 115, 254, 735], "datetime_format": [28, 254], "date_format": [28, 254], "time_format": [28, 254], "float_precis": [28, 31, 254], "null_valu": [28, 101, 102, 112, 254], "textiowrapp": [28, 254], "comma": [28, 254], "csv": [28, 47, 48, 101, 102, 105, 112, 254, 650, 735], "result": [28, 33, 34, 47, 48, 67, 74, 94, 96, 103, 104, 112, 114, 116, 117, 126, 146, 158, 159, 172, 183, 197, 204, 218, 227, 234, 254, 268, 310, 348, 351, 360, 361, 362, 366, 396, 431, 438, 465, 471, 478, 482, 483, 484, 485, 486, 487, 489, 490, 491, 495, 497, 530, 531, 537, 556, 570, 583, 584, 588, 589, 605, 613, 616, 617, 618, 631, 639, 654, 671, 672, 676, 681, 690, 699, 716, 717, 735, 744, 745, 829, 832, 841, 842, 843, 846, 881, 938, 944, 948, 949, 950, 951, 952, 953, 955, 956, 957, 964, 967, 1001, 1002, 1008, 1032, 1051, 1058, 1059], "If": [28, 29, 30, 31, 32, 33, 34, 35, 48, 52, 58, 72, 74, 90, 91, 92, 93, 94, 95, 96, 101, 102, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 125, 132, 133, 134, 142, 146, 156, 158, 159, 161, 169, 170, 173, 175, 179, 183, 196, 197, 198, 206, 210, 214, 215, 217, 221, 222, 223, 225, 226, 254, 264, 266, 268, 298, 299, 300, 310, 318, 337, 338, 352, 369, 396, 426, 431, 438, 440, 451, 465, 471, 474, 476, 478, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 499, 503, 504, 518, 520, 522, 523, 528, 529, 530, 531, 532, 534, 535, 536, 537, 540, 564, 566, 568, 570, 574, 580, 581, 583, 585, 588, 589, 595, 601, 602, 604, 606, 610, 613, 616, 617, 618, 622, 623, 627, 628, 630, 631, 639, 653, 660, 662, 671, 672, 676, 677, 681, 685, 693, 701, 707, 708, 710, 716, 719, 735, 738, 744, 745, 775, 776, 777, 786, 795, 818, 819, 833, 846, 854, 856, 857, 880, 881, 883, 910, 915, 938, 940, 942, 944, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 964, 970, 974, 975, 989, 991, 993, 994, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1011, 1021, 1027, 1032, 1041, 1051, 1058], "instead": [28, 33, 34, 52, 56, 67, 74, 101, 110, 124, 133, 158, 159, 170, 173, 183, 185, 195, 196, 197, 200, 218, 227, 231, 254, 278, 310, 341, 345, 352, 471, 483, 484, 485, 486, 487, 489, 490, 491, 520, 522, 528, 534, 564, 566, 570, 574, 585, 588, 589, 601, 602, 606, 610, 613, 616, 622, 623, 627, 628, 631, 639, 665, 671, 672, 677, 696, 713, 716, 735, 738, 754, 786, 822, 826, 833, 938, 962, 963, 991, 993, 999, 1005, 1033, 1051, 1058], "whether": [28, 94, 96, 126, 134, 201, 221, 254, 310, 328, 346, 401, 402, 445, 446, 471, 495, 639, 653, 681, 697, 702, 707, 735, 738, 786, 805, 827, 885, 886, 938, 1051, 1058], "header": [28, 31, 35, 48, 97, 101, 102, 105, 112, 143, 187, 222, 254, 735], "field": [28, 59, 86, 88, 93, 217, 224, 254, 431, 440, 480, 517, 518, 531, 532, 545, 583, 584, 605, 622, 639, 709, 735, 786, 915, 938, 946, 1000, 1002, 1003, 1017, 1019, 1051], "symbol": [28, 254], "byte": [28, 48, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 144, 254, 286, 289, 290, 520, 523, 735, 761, 764, 765, 840, 991, 994, 1051], "specifi": [28, 31, 67, 77, 86, 88, 105, 124, 134, 140, 144, 145, 148, 157, 158, 159, 172, 185, 195, 197, 200, 201, 207, 221, 224, 231, 234, 254, 360, 361, 362, 363, 368, 440, 465, 477, 483, 484, 485, 486, 487, 489, 490, 491, 506, 521, 527, 564, 566, 573, 576, 577, 578, 579, 585, 588, 589, 593, 606, 610, 619, 622, 623, 627, 628, 639, 653, 659, 663, 666, 670, 671, 672, 676, 696, 697, 702, 707, 709, 713, 717, 735, 840, 841, 842, 843, 849, 992, 998, 1051], "defin": [28, 31, 38, 121, 122, 124, 133, 158, 159, 183, 186, 236, 254, 268, 383, 430, 467, 481, 483, 484, 485, 486, 487, 489, 490, 491, 568, 588, 589, 604, 622, 627, 628, 639, 671, 672, 689, 719, 735, 738, 745, 861, 914, 947, 1051], "chrono": [28, 254, 348, 351, 535, 536, 537, 540, 829, 832, 1006, 1007, 1008, 1011], "rust": [28, 35, 83, 106, 110, 133, 236, 254, 745, 1051], "crate": [28, 254, 510, 511, 516, 517, 525, 526, 535, 536, 537, 540, 738, 981, 982, 987, 988, 996, 997, 1006, 1007, 1008, 1011], "fraction": [28, 119, 120, 198, 254, 346, 466, 493, 535, 537, 639, 827, 934, 959, 1006, 1008, 1051], "second": [28, 123, 158, 159, 173, 227, 254, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 535, 537, 590, 591, 626, 630, 639, 671, 672, 677, 735, 738, 822, 826, 833, 1006, 1008, 1059], "precis": [28, 31, 38, 39, 170, 196, 197, 214, 254, 317, 538, 738, 794, 1009], "infer": [28, 90, 92, 93, 94, 95, 96, 101, 102, 105, 108, 109, 112, 115, 133, 254, 478, 518, 535, 536, 537, 538, 540, 616, 639, 735, 944, 989, 1006, 1007, 1008, 1009, 1011, 1051], "maximum": [28, 101, 102, 112, 122, 123, 124, 126, 176, 254, 403, 441, 459, 474, 606, 607, 639, 682, 735, 775, 807, 887, 922, 930, 935, 940, 1051], "timeunit": [28, 38, 40, 254, 317, 318, 350, 355, 537, 588, 589, 738, 794, 795, 831, 836, 1008], "frame": [28, 29, 31, 52, 53, 54, 55, 56, 57, 67, 74, 93, 119, 124, 133, 135, 170, 171, 180, 183, 186, 195, 196, 197, 218, 225, 254, 655, 686, 689, 735, 738, 774, 1051, 1058, 1059], "datetim": [28, 31, 67, 97, 124, 139, 156, 158, 159, 171, 173, 227, 254, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 406, 483, 484, 485, 486, 487, 489, 490, 491, 535, 537, 554, 588, 589, 591, 597, 604, 627, 628, 639, 671, 672, 677, 735, 738, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 877, 890, 891, 930, 931, 963, 1006, 1008, 1034, 1051], "place": [28, 134, 141, 146, 163, 164, 187, 192, 197, 203, 204, 207, 221, 229, 254, 278, 414, 425, 496, 497, 505, 639, 653, 698, 699, 702, 707, 735, 744, 754, 846, 898, 909, 941, 943, 966, 967, 976, 1051], "float64": [28, 31, 93, 101, 124, 143, 144, 152, 199, 218, 231, 254, 270, 271, 272, 273, 274, 275, 293, 301, 302, 311, 346, 363, 389, 391, 473, 501, 502, 552, 553, 577, 593, 613, 616, 631, 639, 661, 695, 713, 735, 738, 827, 1033, 1038, 1051], "repres": [28, 50, 65, 90, 92, 94, 95, 96, 208, 228, 233, 254, 389, 391, 508, 561, 564, 577, 580, 593, 604, 617, 618, 621, 629, 639, 703, 711, 735, 963, 978, 1040, 1051], "empti": [28, 81, 93, 101, 102, 105, 112, 135, 136, 158, 167, 179, 254, 604, 619, 655, 656, 671, 685, 735, 738, 774, 778, 864, 1051], "table_nam": [29, 31, 254], "connect": [29, 101, 103, 106, 110, 114, 116, 117, 254, 651], "if_exist": [29, 254], "dbwritemod": [29, 254], "fail": [29, 30, 91, 104, 106, 109, 113, 132, 223, 254, 279, 349, 431, 535, 536, 537, 540, 639, 708, 735, 745, 1006, 1007, 1008, 1011, 1051], "dbwriteengin": [29, 254], "sqlalchemi": [29, 254], "databas": [29, 103, 254, 650], "creat": [29, 31, 90, 94, 96, 113, 122, 123, 124, 125, 126, 127, 135, 136, 158, 159, 184, 187, 227, 231, 254, 318, 345, 352, 431, 475, 483, 484, 486, 489, 490, 491, 529, 560, 578, 587, 588, 589, 590, 591, 626, 627, 628, 639, 655, 656, 662, 671, 672, 713, 735, 774, 778, 791, 795, 826, 833, 932, 941, 1000, 1032, 1051, 1058, 1059], "append": [29, 30, 124, 146, 172, 173, 254, 310, 471, 475, 588, 589, 630, 639, 676, 677, 735, 846, 1051], "your": [29, 31, 67, 101, 102, 119, 120, 133, 170, 196, 197, 200, 214, 231, 234, 236, 254, 268, 535, 536, 537, 568, 639, 657, 673, 680, 681, 696, 713, 717, 719, 735, 745, 1006, 1007, 1008, 1051, 1059], "special": [29, 101, 102, 112, 254, 517, 745, 988, 1051], "uri": [29, 30, 103, 104, 113, 254], "postgresql": [29, 103, 254, 465, 639], "user": [29, 103, 133, 186, 236, 254, 268, 438, 467, 495, 568, 588, 639, 689, 719, 735, 745, 964, 1051], "pass": [29, 31, 35, 55, 67, 92, 103, 105, 112, 122, 124, 126, 134, 138, 140, 157, 158, 159, 161, 175, 185, 186, 200, 207, 210, 221, 227, 231, 234, 254, 268, 325, 344, 366, 381, 465, 467, 483, 484, 485, 486, 487, 489, 490, 491, 506, 522, 528, 534, 564, 566, 573, 577, 585, 588, 597, 606, 610, 622, 623, 639, 653, 659, 670, 671, 672, 674, 681, 689, 696, 700, 702, 707, 713, 717, 719, 735, 745, 802, 825, 847, 856, 883, 993, 999, 1005, 1021, 1051], "server": [29, 103, 254], "port": [29, 101, 103, 106, 110, 114, 116, 254], "sqlite": [29, 254], "db": [29, 103, 254], "replac": [29, 30, 101, 102, 112, 147, 148, 193, 222, 231, 254, 318, 344, 440, 526, 570, 639, 665, 713, 735, 795, 825, 921, 962, 963, 997, 1051], "insert": [29, 101, 102, 106, 110, 112, 114, 115, 116, 164, 192, 222, 224, 254, 494, 509, 543, 639, 709, 735, 960, 980, 1014, 1051], "mode": [29, 30, 52, 254, 517, 613, 616, 631, 639, 735, 988, 1051, 1058], "new": [29, 30, 31, 112, 130, 133, 142, 163, 164, 183, 184, 191, 192, 211, 222, 224, 225, 231, 254, 263, 318, 365, 382, 439, 525, 526, 531, 532, 544, 545, 551, 570, 639, 650, 660, 693, 706, 709, 713, 719, 735, 741, 791, 795, 845, 932, 943, 996, 997, 1002, 1003, 1015, 1017, 1023, 1029, 1051, 1058], "alreadi": [29, 30, 254, 309, 409, 639, 785, 893, 1051], "adbc": [29, 103, 254], "deltalak": [30, 104, 113, 118, 254], "deltat": [30, 254], "ignor": [30, 123, 124, 126, 177, 209, 254, 312, 344, 360, 361, 362, 408, 459, 460, 639, 788, 825, 841, 842, 843, 892, 930, 931, 1051], "overwrite_schema": [30, 254], "storage_opt": [30, 101, 104, 106, 110, 113, 114, 116, 254], "delta_write_opt": [30, 254], "delta": [30, 40, 104, 113, 208, 228, 254, 489, 491, 508, 561, 580, 617, 618, 621, 629, 639, 650, 703, 711, 735, 955, 957, 978, 1040, 1051], "like": [30, 91, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 166, 168, 172, 217, 254, 316, 409, 452, 474, 516, 588, 589, 623, 627, 628, 639, 664, 692, 735, 744, 793, 893, 940, 987, 1051], "categor": [30, 58, 75, 172, 215, 216, 254, 294, 295, 440, 554, 639, 738, 768, 769, 770, 786, 938, 1034, 1051], "protocol": [30, 91, 103, 132, 254], "object": [30, 31, 32, 35, 57, 74, 91, 92, 97, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 122, 124, 126, 132, 157, 158, 159, 174, 197, 217, 218, 254, 588, 589, 604, 627, 628, 650, 671, 672, 692, 735, 738, 768, 792, 884, 979, 1027, 1051], "handl": [30, 74, 97, 101, 102, 112, 117, 254, 312, 408, 543, 639, 788, 892, 1014, 1051], "throw": [30, 91, 254, 293, 518, 519, 639, 767, 989, 990, 1051], "add": [30, 31, 102, 133, 146, 158, 231, 232, 254, 469, 547, 591, 595, 630, 639, 671, 676, 713, 714, 715, 735, 744, 846, 1051], "anyth": [30, 195, 254, 517, 988], "updat": [30, 254, 735], "extra": [30, 35, 48, 101, 104, 105, 106, 110, 113, 114, 116, 146, 158, 254, 671, 735, 744, 846, 1051], "storag": [30, 101, 104, 106, 110, 113, 114, 116, 254], "backend": [30, 103, 104, 113, 254], "cloud": [30, 104, 113, 117, 254], "configur": [30, 104, 113, 254], "authent": [30, 104, 113, 254], "see": [30, 31, 38, 103, 104, 105, 113, 119, 120, 124, 126, 138, 172, 186, 254, 298, 299, 300, 368, 396, 438, 503, 510, 516, 517, 525, 588, 589, 615, 639, 738, 775, 776, 777, 881, 974, 981, 987, 988, 996, 1051, 1059], "here": [30, 31, 35, 90, 92, 93, 94, 96, 103, 104, 108, 109, 113, 122, 124, 126, 254, 519, 735, 990], "gc": [30, 104, 113, 254], "azur": [30, 104, 113, 254], "keyword": [30, 55, 104, 110, 113, 138, 186, 195, 200, 231, 234, 254, 467, 619, 622, 639, 689, 696, 713, 717, 735, 1051], "argument": [30, 35, 101, 104, 110, 113, 138, 140, 145, 157, 158, 159, 177, 185, 186, 187, 200, 201, 207, 209, 218, 224, 227, 231, 234, 254, 345, 352, 363, 383, 465, 467, 483, 484, 485, 486, 487, 489, 490, 491, 506, 522, 528, 534, 564, 566, 571, 572, 573, 576, 577, 578, 579, 585, 588, 593, 606, 610, 616, 619, 622, 623, 627, 639, 659, 663, 670, 671, 672, 689, 696, 697, 702, 709, 713, 717, 735, 744, 826, 833, 861, 993, 999, 1005, 1033, 1051], "while": [30, 102, 104, 105, 113, 124, 126, 170, 179, 222, 254, 685, 735], "lake": [30, 104, 113, 254, 650], "instanti": [30, 31, 200, 231, 254, 696, 713, 735], "basic": [30, 31, 254, 1059], "filesystem": [30, 104, 113, 254], "table_path": [30, 104, 113, 254], "doe": [30, 67, 74, 84, 90, 92, 93, 94, 96, 97, 101, 102, 104, 105, 108, 109, 112, 113, 117, 119, 120, 146, 171, 172, 195, 196, 197, 223, 231, 254, 292, 355, 431, 440, 558, 588, 594, 603, 639, 664, 676, 681, 708, 713, 735, 744, 836, 846, 854, 921, 969, 1041, 1051], "match": [30, 31, 38, 74, 84, 90, 92, 93, 94, 96, 108, 109, 119, 120, 148, 173, 195, 254, 446, 488, 510, 511, 514, 516, 517, 518, 519, 525, 526, 533, 535, 536, 537, 577, 639, 666, 677, 735, 738, 870, 877, 954, 981, 982, 985, 987, 988, 989, 990, 996, 997, 1004, 1006, 1007, 1008, 1051], "version": [30, 72, 104, 113, 118, 254, 292, 337, 338, 535, 537, 570, 588, 615, 616, 627, 639, 744, 818, 819, 1006, 1008, 1051], "old": [30, 191, 254, 693, 735], "existing_table_path": [30, 254], "store": [30, 101, 110, 146, 170, 196, 254, 294, 744, 769, 846, 1051], "bucket": [30, 104, 113, 254, 345, 352, 826, 833, 857, 1051], "prefix": [30, 130, 254, 263, 290, 439, 533, 543, 547, 639, 738, 765, 1004, 1014], "aws_region": [30, 113, 254], "the_aws_region": [30, 254], "aws_access_key_id": [30, 104, 113, 254], "the_aws_access_key_id": [30, 104, 113, 254], "aws_secret_access_kei": [30, 104, 113, 254], "the_aws_secret_access_kei": [30, 104, 113, 254], "workbook": [31, 254], "worksheet": [31, 254], "posit": [31, 140, 145, 157, 185, 200, 201, 207, 224, 231, 234, 254, 360, 361, 362, 363, 465, 471, 506, 524, 564, 566, 571, 572, 573, 576, 577, 578, 579, 585, 593, 606, 610, 619, 622, 623, 639, 659, 663, 670, 696, 697, 702, 709, 713, 717, 735, 841, 842, 843, 938, 995, 1051], "tupl": [31, 103, 133, 170, 195, 196, 197, 202, 233, 254, 478, 639, 690, 700, 735, 738, 944, 1051], "a1": [31, 68, 70, 254], "table_styl": [31, 254], "column_format": [31, 254], "dtype_format": [31, 254], "oneormoredatatyp": [31, 122, 254, 877, 1051], "conditional_format": [31, 254], "conditionalformatdict": [31, 254], "column_tot": [31, 254], "columntotalsdefinit": [31, 254], "column_width": [31, 254], "row_tot": [31, 254], "rowtotalsdefinit": [31, 254], "row_height": [31, 254], "sparklin": [31, 254], "sequenc": [31, 59, 67, 73, 90, 92, 93, 94, 96, 101, 102, 108, 109, 112, 122, 123, 124, 134, 139, 145, 146, 172, 173, 179, 183, 186, 187, 197, 207, 215, 221, 223, 224, 225, 226, 227, 254, 387, 431, 438, 467, 506, 545, 568, 573, 583, 584, 595, 597, 605, 615, 620, 639, 653, 663, 676, 677, 689, 702, 707, 708, 709, 710, 735, 744, 787, 789, 846, 915, 963, 1017, 1051], "formula": [31, 254, 357, 639, 839, 1051], "autofilt": [31, 254], "autofit": [31, 254], "hidden_column": [31, 254], "hide_gridlin": [31, 254], "sheet_zoom": [31, 254], "freeze_pan": [31, 254], "excel": [31, 105, 254, 650], "open": [31, 101, 102, 105, 106, 110, 114, 116, 254], "xlsxwriter": [31, 118, 254], "ha": [31, 67, 112, 132, 158, 159, 227, 254, 268, 291, 292, 309, 449, 483, 484, 485, 486, 487, 489, 490, 491, 555, 568, 570, 639, 671, 672, 719, 735, 766, 774, 785, 787, 854, 867, 1035, 1051], "close": [31, 158, 159, 254, 383, 435, 483, 484, 485, 486, 487, 489, 490, 491, 503, 588, 589, 627, 628, 639, 671, 672, 735, 861, 974, 1051], "xlsx": [31, 105, 254], "work": [31, 39, 102, 105, 192, 254, 268, 284, 297, 298, 299, 300, 363, 372, 409, 432, 465, 481, 523, 557, 639, 760, 772, 775, 776, 777, 852, 893, 916, 994, 1036, 1051], "directori": [31, 35, 110, 254], "sheet1": [31, 254], "valid": [31, 38, 52, 106, 110, 126, 130, 144, 172, 254, 309, 510, 511, 516, 517, 519, 525, 526, 588, 589, 639, 676, 735, 738, 785, 840, 854, 981, 982, 987, 988, 990, 996, 997, 1051], "notat": [31, 254], "integ": [31, 43, 44, 45, 46, 61, 62, 63, 64, 122, 124, 125, 127, 158, 159, 254, 265, 297, 346, 372, 373, 464, 471, 476, 483, 484, 485, 486, 487, 488, 489, 490, 491, 524, 563, 570, 597, 601, 602, 616, 639, 671, 672, 735, 738, 772, 827, 852, 870, 938, 942, 954, 963, 995, 1051, 1058, 1059], "medium": [31, 254], "kei": [31, 67, 72, 74, 158, 170, 172, 173, 180, 185, 187, 191, 194, 196, 197, 254, 622, 671, 676, 677, 686, 693, 694, 735], "follow": [31, 35, 72, 101, 102, 104, 112, 113, 133, 158, 159, 173, 186, 227, 254, 268, 341, 345, 352, 467, 474, 483, 484, 485, 486, 487, 488, 489, 490, 491, 545, 556, 568, 588, 630, 632, 633, 635, 639, 640, 641, 645, 646, 647, 671, 672, 677, 689, 735, 822, 826, 833, 940, 962, 963, 1043, 1045, 1047, 1051, 1052, 1055, 1056, 1057, 1059], "first_column": [31, 254], "last_column": [31, 254], "banded_column": [31, 254], "banded_row": [31, 254], "sheet": [31, 105, 254], "chart": [31, 254, 690, 735], "subsequ": [31, 57, 190, 218, 254, 431, 630, 662, 735], "colnam": [31, 112, 124, 143, 254, 661, 735], "given": [31, 52, 53, 67, 90, 92, 93, 94, 96, 101, 102, 108, 109, 112, 121, 122, 124, 125, 126, 127, 133, 134, 144, 145, 147, 158, 159, 169, 185, 186, 195, 197, 203, 204, 207, 221, 226, 254, 268, 310, 316, 319, 348, 350, 351, 357, 383, 406, 425, 431, 433, 465, 467, 471, 474, 477, 478, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 496, 497, 517, 535, 537, 545, 568, 593, 605, 616, 617, 618, 639, 653, 663, 671, 672, 681, 689, 698, 699, 702, 707, 710, 719, 735, 738, 745, 786, 793, 796, 829, 831, 832, 839, 840, 857, 861, 880, 890, 909, 915, 917, 920, 932, 938, 940, 944, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 960, 966, 967, 988, 1006, 1008, 1038, 1042, 1051, 1058, 1059], "dd": [31, 254], "mm": [31, 254], "yyyi": [31, 254], "00": [31, 124, 158, 173, 227, 254, 316, 317, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 483, 484, 486, 489, 490, 491, 535, 537, 540, 588, 591, 627, 628, 639, 671, 677, 735, 738, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 834, 835, 836, 837, 1006, 1008, 1011], "overridden": [31, 90, 92, 94, 96, 108, 109, 128, 254, 735], "basi": [31, 124, 254], "param": [31, 90, 92, 93, 94, 96, 101, 102, 108, 109, 112, 123, 124, 126, 195, 254, 735], "It": [31, 180, 186, 236, 254, 268, 292, 448, 481, 588, 589, 639, 681, 686, 719, 735, 962, 963, 1051], "also": [31, 57, 93, 112, 122, 123, 124, 125, 126, 130, 143, 157, 158, 159, 180, 183, 196, 200, 207, 231, 254, 305, 308, 344, 383, 474, 483, 484, 485, 486, 487, 489, 490, 491, 506, 528, 534, 583, 584, 588, 595, 597, 615, 630, 638, 639, 644, 670, 671, 672, 686, 696, 702, 713, 714, 735, 738, 825, 861, 940, 1005, 1051], "group": [31, 35, 48, 52, 102, 157, 158, 159, 171, 183, 185, 187, 197, 225, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 262, 268, 365, 371, 409, 465, 471, 474, 481, 505, 506, 510, 516, 517, 525, 550, 568, 639, 670, 671, 672, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 738, 893, 947, 981, 987, 988, 996, 1051], "float_dtyp": [31, 254], "simplifi": [31, 47, 48, 73, 254, 657, 662, 664, 690, 700, 735], "uniform": [31, 254], "condit": [31, 142, 149, 195, 254, 514, 533, 574, 595, 630, 660, 667, 735], "suppli": [31, 90, 92, 93, 94, 96, 108, 109, 195, 254, 467, 639, 735], "typenam": [31, 254], "3_color_scal": [31, 254], "data_bar": [31, 254], "make": [31, 59, 74, 90, 95, 101, 102, 106, 110, 114, 116, 180, 183, 190, 227, 254, 361, 362, 440, 465, 477, 493, 499, 531, 543, 639, 686, 735, 842, 843, 857, 921, 1002, 1014, 1051, 1059], "icon": [31, 254], "multipl": [31, 55, 73, 74, 101, 102, 112, 114, 115, 116, 122, 126, 134, 140, 144, 146, 149, 157, 158, 163, 171, 185, 187, 197, 200, 201, 207, 221, 231, 234, 254, 430, 445, 449, 456, 457, 465, 478, 481, 483, 484, 485, 486, 487, 489, 490, 491, 506, 564, 566, 570, 573, 577, 583, 584, 585, 595, 605, 606, 610, 615, 620, 623, 630, 639, 653, 659, 667, 670, 671, 696, 697, 702, 707, 713, 717, 719, 735, 744, 840, 846, 914, 926, 944, 1051], "singl": [31, 53, 67, 74, 101, 102, 103, 110, 112, 122, 133, 140, 141, 142, 146, 154, 169, 172, 185, 195, 197, 207, 254, 268, 341, 369, 407, 430, 438, 475, 478, 506, 509, 562, 564, 566, 568, 570, 573, 577, 578, 579, 585, 602, 605, 606, 610, 620, 623, 628, 639, 659, 660, 676, 702, 735, 744, 822, 846, 891, 914, 941, 944, 980, 1027, 1051], "across": [31, 67, 254, 564, 565, 566, 567, 585, 586, 606, 607, 610, 611, 623, 624], "effect": [31, 132, 152, 158, 217, 254, 268, 324, 588, 589, 639, 671, 715, 735, 793, 801], "heatmap": [31, 254], "min": [31, 35, 48, 139, 148, 158, 159, 187, 254, 298, 300, 306, 368, 465, 474, 486, 611, 619, 639, 666, 671, 672, 735, 775, 777, 782, 787, 849, 940, 952, 1051, 1059], "entir": [31, 254], "final": [31, 67, 116, 254, 360, 361, 362, 639, 664, 735, 841, 842, 843, 1051], "made": [31, 254, 1032, 1051], "up": [31, 59, 103, 170, 173, 196, 197, 214, 254, 268, 297, 543, 639, 676, 677, 681, 735, 738, 772, 1014, 1051], "abov": [31, 254, 630], "order": [31, 47, 48, 52, 54, 67, 73, 93, 119, 133, 134, 157, 158, 159, 185, 186, 187, 198, 201, 207, 217, 221, 223, 227, 254, 268, 278, 284, 295, 427, 432, 474, 493, 494, 495, 499, 505, 506, 545, 557, 558, 573, 639, 649, 653, 670, 671, 672, 685, 697, 702, 707, 708, 735, 745, 754, 760, 770, 786, 876, 911, 916, 938, 940, 945, 959, 960, 964, 976, 1017, 1036, 1037, 1051], "than": [31, 47, 48, 89, 94, 96, 101, 102, 112, 117, 124, 126, 133, 135, 156, 157, 170, 173, 185, 195, 196, 198, 225, 236, 254, 268, 376, 377, 398, 437, 451, 481, 493, 503, 521, 527, 532, 543, 568, 580, 588, 623, 639, 670, 677, 719, 735, 745, 947, 959, 974, 992, 998, 1003, 1014, 1051, 1059], "total": [31, 144, 254, 840, 1051], "export": [31, 170, 171, 196, 197, 214, 217, 254], "numer": [31, 173, 254, 261, 298, 299, 300, 373, 383, 435, 455, 457, 468, 477, 498, 546, 556, 639, 650, 677, 735, 738, 775, 776, 777, 787, 861, 875, 961, 968, 1032, 1051, 1059], "associ": [31, 53, 55, 67, 103, 123, 197, 254], "sum": [31, 52, 144, 152, 157, 158, 159, 169, 187, 234, 254, 268, 307, 308, 357, 369, 431, 483, 486, 490, 562, 564, 583, 585, 586, 595, 615, 624, 639, 657, 662, 664, 670, 671, 672, 688, 690, 700, 717, 735, 738, 783, 784, 839, 840, 949, 950, 952, 955, 956, 957, 1051], "must": [31, 91, 92, 104, 113, 139, 145, 158, 159, 173, 180, 195, 254, 310, 431, 438, 471, 483, 484, 485, 486, 487, 489, 490, 491, 639, 663, 671, 672, 677, 681, 686, 735, 786, 787, 938, 1051], "funcnam": [31, 254], "averag": [31, 254, 360, 361, 362, 474, 639, 841, 842, 843, 940, 1051], "count_num": [31, 254], "count": [31, 52, 101, 102, 106, 110, 112, 114, 115, 116, 139, 158, 159, 173, 183, 184, 187, 222, 226, 227, 232, 236, 245, 254, 269, 304, 341, 399, 407, 458, 463, 483, 484, 485, 486, 487, 489, 490, 491, 511, 558, 560, 569, 612, 639, 671, 672, 677, 688, 710, 715, 719, 728, 735, 787, 822, 857, 891, 928, 933, 982, 1037, 1039, 1051], "std_dev": [31, 254], "var": [31, 127, 254, 491, 639, 735, 1051], "pixel": [31, 254], "unit": [31, 38, 40, 124, 126, 144, 254, 317, 318, 325, 350, 355, 436, 449, 535, 537, 559, 588, 589, 597, 639, 690, 735, 738, 794, 795, 802, 831, 836, 840, 920, 1006, 1008, 1038, 1051, 1059], "hand": [31, 101, 102, 112, 254, 421, 422, 423, 424, 905, 906, 907, 908], "side": [31, 158, 159, 254, 383, 421, 422, 423, 424, 483, 484, 485, 486, 487, 489, 490, 491, 494, 588, 589, 627, 628, 639, 671, 672, 735, 861, 905, 906, 907, 908, 960, 1051], "call": [31, 56, 102, 124, 126, 130, 133, 157, 158, 159, 174, 253, 254, 268, 305, 308, 395, 469, 547, 606, 610, 639, 651, 670, 671, 672, 734, 735, 738, 745, 1051], "ad": [31, 93, 132, 158, 222, 231, 254, 267, 366, 583, 584, 639, 671, 713, 735, 847, 1051], "end": [31, 101, 102, 110, 112, 158, 254, 286, 289, 290, 316, 341, 345, 346, 363, 383, 426, 510, 514, 517, 529, 533, 570, 577, 588, 589, 593, 601, 602, 627, 628, 630, 639, 671, 673, 680, 690, 735, 738, 764, 793, 822, 826, 861, 910, 985, 988, 1000, 1004, 1051], "wise": [31, 67, 152, 254, 270, 271, 272, 273, 274, 275, 301, 302, 364, 434, 500, 501, 502, 552, 553, 583, 584, 595, 606, 610, 615, 639, 746, 747, 748, 749, 750, 751, 779, 780, 844, 918, 919, 971, 972, 973, 1024, 1025, 1051], "particip": [31, 254], "distinct": [31, 126, 185, 254, 284, 432, 474, 591, 639, 760, 916, 940, 1051, 1059], "referenc": [31, 254, 545], "differ": [31, 101, 117, 119, 146, 158, 159, 170, 196, 197, 214, 222, 254, 312, 322, 341, 342, 344, 353, 359, 408, 421, 423, 440, 459, 460, 462, 493, 499, 535, 558, 588, 594, 597, 603, 639, 662, 671, 672, 735, 738, 744, 745, 788, 799, 822, 823, 825, 834, 846, 892, 905, 907, 930, 931, 961, 1006, 1051], "row_index": [31, 254], "height": [31, 142, 254], "provid": [31, 47, 48, 55, 101, 102, 103, 104, 112, 113, 124, 126, 169, 254, 268, 287, 288, 431, 438, 512, 513, 516, 518, 519, 597, 622, 639, 650, 735, 745, 762, 763, 857, 880, 983, 984, 987, 989, 990, 1051, 1058, 1059], "intersect": [31, 254, 422, 738, 906], "bodi": [31, 254], "start": [31, 100, 101, 102, 103, 106, 110, 112, 114, 115, 116, 128, 157, 158, 174, 206, 227, 232, 254, 286, 289, 290, 322, 325, 326, 328, 329, 334, 336, 342, 343, 345, 346, 350, 352, 353, 354, 356, 363, 383, 426, 483, 484, 486, 489, 490, 491, 504, 510, 514, 517, 529, 533, 570, 577, 583, 588, 589, 593, 595, 601, 602, 627, 628, 630, 639, 670, 671, 690, 701, 715, 735, 738, 765, 794, 796, 799, 802, 803, 805, 810, 812, 815, 817, 820, 823, 824, 826, 827, 831, 833, 834, 835, 836, 837, 861, 910, 975, 985, 988, 1000, 1004, 1051, 1059], "zero": [31, 90, 91, 100, 101, 102, 106, 110, 123, 132, 148, 170, 195, 212, 217, 218, 254, 368, 431, 435, 494, 503, 543, 556, 639, 655, 666, 735, 774, 849, 915, 974, 1014, 1027, 1032, 1033, 1051], "unless": [31, 67, 92, 218, 254, 528, 534, 616, 735, 1005, 1033, 1041, 1051], "marker": [31, 254], "compliant": [31, 254], "case": [31, 67, 90, 92, 93, 94, 96, 108, 109, 116, 128, 133, 146, 158, 159, 170, 196, 197, 214, 254, 316, 438, 439, 448, 449, 510, 517, 525, 639, 671, 672, 735, 738, 744, 793, 846, 981, 988, 996, 1051], "three": [31, 220, 254, 431, 494, 639, 915], "avail": [31, 99, 103, 104, 113, 122, 130, 253, 254, 474, 570, 632, 633, 635, 638, 639, 640, 641, 644, 645, 646, 647, 650, 651, 664, 734, 735, 738, 940, 1043, 1045, 1047, 1051, 1052, 1055, 1056, 1057], "insert_befor": [31, 254], "insert_aft": [31, 254], "respect": [31, 254], "direct": [31, 103, 110, 116, 225, 254], "far": [31, 254], "thei": [31, 93, 112, 119, 130, 174, 197, 254, 482, 639, 738, 948, 1051], "strongli": [31, 128, 133, 195, 236, 254, 268, 639, 745, 1051], "advis": [31, 174, 254], "structur": [31, 81, 85, 87, 146, 186, 197, 217, 254, 467, 639, 689, 735, 744, 846, 1051], "wherev": [31, 133, 236, 254, 268, 639, 745, 1051], "possibl": [31, 101, 133, 134, 157, 170, 196, 221, 223, 236, 254, 268, 436, 448, 532, 559, 639, 653, 670, 702, 707, 708, 735, 745, 1003, 1051], "simpl": [31, 126, 183, 254], "colx": [31, 57, 254, 738, 1059], "coli": [31, 254, 738, 1059], "after": [31, 57, 74, 93, 100, 101, 102, 106, 110, 112, 114, 115, 116, 146, 224, 253, 254, 363, 440, 465, 474, 543, 639, 709, 735, 744, 846, 921, 940, 1014, 1051], "befor": [31, 101, 112, 128, 130, 146, 158, 173, 224, 254, 307, 308, 309, 440, 465, 466, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 543, 548, 617, 618, 639, 671, 674, 677, 709, 735, 744, 783, 784, 785, 846, 921, 934, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 1014, 1020, 1051], "most": [31, 54, 90, 101, 102, 103, 112, 254, 449, 456, 466, 532, 560, 639, 926, 934, 1003, 1039, 1051, 1058], "mandatori": [31, 254], "return_dtyp": [31, 133, 254, 268, 438, 440, 568, 605, 639, 745, 921, 1051], "latter": [31, 146, 254, 744, 846, 1051], "appropri": [31, 217, 254, 474, 639, 940, 1051], "pure": [31, 254, 1032, 1051], "actual": [31, 93, 105, 124, 126, 197, 254, 969, 1051], "indic": [31, 100, 101, 102, 106, 110, 112, 121, 122, 126, 158, 159, 173, 197, 201, 215, 227, 254, 279, 341, 345, 352, 385, 388, 389, 391, 392, 393, 430, 444, 447, 483, 484, 485, 486, 487, 489, 490, 491, 494, 500, 550, 573, 574, 639, 671, 672, 677, 697, 735, 738, 822, 826, 833, 865, 869, 871, 872, 873, 874, 914, 960, 971, 1022, 1028, 1051, 1059], "calcul": [31, 67, 158, 208, 228, 254, 312, 360, 361, 362, 396, 408, 421, 436, 488, 503, 508, 559, 561, 568, 580, 617, 618, 621, 629, 639, 671, 703, 711, 735, 788, 841, 842, 843, 881, 892, 905, 954, 974, 978, 1040, 1051], "individu": [31, 48, 124, 159, 217, 254, 268, 517, 639, 672, 735, 773, 988, 1051], "gridlin": [31, 254], "zoom": [31, 254], "level": [31, 35, 48, 112, 114, 115, 116, 124, 133, 152, 183, 254, 369, 639, 673, 680, 735], "freez": [31, 254], "pane": [31, 254], "top": [31, 134, 221, 254, 653, 707, 735], "index": [31, 91, 95, 98, 118, 132, 150, 158, 159, 164, 169, 170, 173, 187, 193, 195, 196, 206, 217, 219, 227, 232, 254, 262, 276, 277, 278, 280, 341, 403, 404, 412, 426, 430, 431, 483, 484, 485, 486, 487, 489, 490, 491, 494, 504, 516, 529, 550, 639, 671, 672, 677, 701, 715, 735, 752, 753, 754, 755, 756, 822, 880, 887, 888, 896, 910, 914, 915, 932, 960, 963, 975, 987, 1000, 1022, 1051], "thu": [31, 146, 254, 580, 744, 846, 1051], "altern": [31, 254, 1032, 1051], "a2": [31, 68, 70, 254], "occur": [31, 73, 254, 407, 456, 474, 639, 657, 662, 664, 690, 700, 735, 891, 926, 940, 1051], "equival": [31, 90, 92, 93, 94, 96, 104, 108, 109, 158, 169, 183, 254, 261, 265, 358, 359, 373, 376, 377, 398, 437, 455, 457, 461, 462, 464, 468, 523, 546, 556, 563, 639, 671, 735, 880, 994, 1010, 1012, 1013, 1051], "top_row": [31, 254], "top_col": [31, 254], "base": [31, 36, 142, 149, 158, 159, 254, 316, 324, 357, 360, 361, 362, 433, 434, 471, 524, 639, 660, 667, 671, 672, 735, 738, 793, 801, 839, 841, 842, 843, 857, 917, 918, 938, 995, 1042, 1051, 1059], "scroll": [31, 254], "region": [31, 254], "initit": [31, 254], "5th": [31, 254], "definit": [31, 122, 254, 396, 639, 881, 1051], "take": [31, 124, 130, 152, 158, 180, 186, 187, 211, 217, 254, 341, 506, 551, 588, 589, 592, 594, 603, 639, 671, 686, 706, 735, 822, 1023, 1042, 1051], "care": [31, 254, 268, 495, 639, 964, 1051], "rel": [31, 103, 104, 113, 119, 120, 254, 341, 360, 361, 362, 485, 487, 489, 491, 639, 822, 841, 842, 843, 1051], "readthedoc": [31, 254], "io": [31, 254], "working_with_conditional_format": [31, 254], "html": [31, 91, 132, 138, 254], "similarli": [31, 93, 158, 159, 173, 227, 254, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 639, 671, 672, 677, 735, 822, 826, 833], "well": [31, 101, 102, 112, 145, 187, 254, 383, 588, 639, 663, 735, 861, 1051], "adjac": [31, 254], "two": [31, 57, 92, 94, 96, 103, 152, 179, 180, 187, 220, 235, 236, 254, 262, 313, 318, 431, 505, 550, 570, 571, 572, 580, 582, 617, 618, 639, 685, 686, 718, 719, 735, 789, 795, 915, 1051], "help": [31, 254, 664, 735], "appear": [31, 93, 119, 254, 558, 639, 1037, 1051], "working_with_sparklin": [31, 254], "inject": [31, 67, 254], "locat": [31, 146, 193, 219, 224, 254, 494, 639, 709, 735, 744, 846, 960, 963, 1022, 1051], "syntax": [31, 133, 183, 254, 510, 516, 517, 525, 700, 735, 981, 987, 988, 996, 1051], "ensur": [31, 75, 103, 123, 124, 126, 157, 185, 195, 254, 383, 560, 639, 670, 681, 735, 738, 1032, 1039, 1051], "correctli": [31, 254], "microsoft": [31, 118, 254], "com": [31, 103, 254, 360, 361, 362, 516, 517, 639, 841, 842, 843, 987, 988, 1051], "u": [31, 38, 40, 55, 97, 254, 317, 318, 325, 350, 355, 535, 537, 588, 589, 597, 738, 794, 795, 802, 831, 836, 1006, 1008], "offic": [31, 254], "f5ed2452": [31, 254], "2337": [31, 254], "4f71": [31, 254], "bed3": [31, 254], "c8ae6d2b276": [31, 254], "random": [31, 122, 124, 126, 160, 198, 254, 378, 474, 493, 499, 639, 855, 940, 959, 970, 1051], "date": [31, 38, 67, 101, 102, 103, 112, 117, 124, 139, 156, 158, 159, 171, 173, 227, 254, 317, 318, 319, 322, 323, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 406, 483, 484, 485, 486, 487, 489, 490, 491, 535, 536, 554, 588, 589, 597, 604, 626, 639, 671, 672, 677, 735, 738, 793, 794, 795, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 877, 890, 891, 930, 931, 963, 1006, 1007, 1034, 1051], "dtm": [31, 254, 318, 795], "2023": [31, 97, 118, 171, 254, 318, 588, 604, 738, 795], "num": [31, 220, 254, 383, 386, 543, 639, 861, 1051], "500": [31, 170, 226, 254, 664, 710, 735, 810, 812, 820, 827, 949, 950, 952, 1051], "val": [31, 194, 254, 295, 467, 554, 630, 639, 694, 735, 770], "10_000": [31, 254], "20_000": [31, 254], "30_000": [31, 254], "increas": [31, 67, 101, 110, 254, 309, 639, 785, 1051], "b4": [31, 254], "light": [31, 254], "twice": [31, 105, 254], "each": [31, 67, 102, 115, 119, 120, 122, 133, 156, 157, 158, 159, 171, 173, 185, 218, 224, 227, 233, 234, 236, 237, 239, 248, 254, 268, 310, 341, 345, 352, 413, 429, 435, 471, 474, 481, 485, 487, 489, 491, 506, 517, 531, 532, 568, 570, 573, 579, 588, 601, 602, 622, 639, 671, 672, 677, 690, 709, 717, 719, 720, 722, 731, 735, 773, 786, 822, 826, 833, 897, 913, 938, 940, 947, 988, 1002, 1003, 1019, 1051, 1059], "titl": [31, 52, 254], "explicit": [31, 112, 122, 254, 615], "integr": [31, 254, 1059], "multi_fram": [31, 254], "wb": [31, 254], "coordin": [31, 254], "advanc": [31, 254, 431, 915, 1059], "min_color": [31, 254], "76933c": [31, 254], "mid_color": [31, 254], "c4d79b": [31, 254], "max_color": [31, 254], "ebf1d": [31, 254], "data_bar_2010": [31, 254], "bar_color": [31, 254], "9bbb59": [31, 254], "bar_negative_color_sam": [31, 254], "bar_negative_border_color_sam": [31, 254], "000": [31, 254, 1059], "white": [31, 254], "w": [31, 54, 55, 158, 197, 254, 516, 565, 567, 671, 735, 738, 987, 999], "get_worksheet_by_nam": [31, 254], "fmt_titl": [31, 254], "add_format": [31, 254], "font_color": [31, 254], "4f6228": [31, 254], "font_siz": [31, 254], "12": [31, 67, 97, 123, 124, 158, 159, 173, 227, 254, 263, 307, 316, 318, 322, 326, 329, 336, 337, 338, 342, 343, 345, 352, 354, 356, 466, 473, 490, 498, 538, 584, 587, 588, 590, 605, 639, 671, 672, 673, 677, 680, 700, 705, 735, 738, 745, 786, 793, 795, 817, 826, 833, 958, 1009, 1051, 1059], "ital": [31, 254], "bold": [31, 254], "customis": [31, 254], "trend": [31, 254], "win_loss": [31, 254], "subtl": [31, 254], "tone": [31, 254], "hidden": [31, 254], "id": [31, 74, 222, 236, 254, 481, 525, 526, 558, 560, 639, 719, 947, 1037, 1051, 1059], "q1": [31, 254], "55": [31, 69, 254], "20": [31, 124, 146, 163, 164, 180, 186, 188, 192, 193, 254, 276, 277, 278, 312, 345, 352, 378, 382, 467, 483, 484, 486, 597, 604, 627, 639, 686, 689, 735, 738, 788, 833, 1051], "35": [31, 118, 254, 312, 639, 788, 1051], "q2": [31, 254], "30": [31, 146, 158, 163, 186, 192, 193, 213, 231, 254, 276, 277, 278, 312, 318, 323, 329, 337, 343, 344, 345, 352, 356, 378, 498, 588, 604, 627, 639, 671, 689, 713, 735, 738, 786, 788, 795, 800, 818, 825, 826, 833, 1051, 1059], "15": [31, 118, 123, 133, 158, 159, 164, 254, 309, 312, 338, 345, 352, 467, 490, 584, 616, 627, 639, 671, 672, 735, 738, 785, 788, 826, 833, 1051], "60": [31, 146, 254, 346, 347, 490, 535, 639, 823, 827, 828, 1006], "q3": [31, 254], "40": [31, 146, 186, 254, 345, 352, 378, 538, 639, 689, 735, 806, 833, 1009], "80": [31, 254], "q4": [31, 254], "75": [31, 139, 254, 265, 464, 483, 484, 485, 486, 489, 490, 491, 639, 787, 857, 938, 1051, 1059], "account": [31, 97, 103, 254, 341, 360, 361, 362, 639, 822, 841, 842, 843, 1051], "flavour": [31, 254], "integer_dtyp": [31, 200, 254, 696, 735, 738], "0_": [31, 254], "just": [31, 112, 179, 254, 685, 735], "unifi": [31, 254, 738], "multi": [31, 101, 102, 254, 363, 516, 606, 610, 639, 987], "2_color_scal": [31, 254], "95b3d7": [31, 254], "ffffff": [31, 254], "standardis": [31, 254], "z": [31, 54, 74, 97, 122, 124, 144, 166, 168, 172, 179, 196, 197, 254, 261, 263, 265, 295, 378, 405, 439, 464, 469, 477, 517, 535, 537, 547, 565, 567, 586, 607, 611, 616, 624, 639, 676, 685, 701, 735, 738, 770, 849, 988, 1006, 1008, 1051, 1058], "score": [31, 254], "conjunct": [31, 105, 254], "a123": [31, 254], "b345": [31, 254], "c567": [31, 254], "d789": [31, 254], "e101": [31, 254], "45": [31, 159, 254, 318, 345, 352, 490, 511, 517, 571, 572, 604, 627, 639, 672, 735, 738, 795, 826, 833, 982, 988, 1059], "85": [31, 254, 1059], "font": [31, 254], "consola": [31, 254], "standard": [31, 118, 208, 217, 254, 329, 361, 489, 503, 508, 519, 621, 639, 703, 735, 806, 842, 974, 978, 990, 1051, 1059], "stdev": [31, 254], "ipccompress": [32, 254], "arrow": [32, 47, 76, 90, 103, 106, 114, 170, 196, 197, 212, 214, 254, 735, 1027, 1032, 1051], "ipc": [32, 106, 107, 114, 117, 254, 650], "binari": [32, 254, 286, 288, 289, 290, 761, 764, 765], "feather": [32, 106, 114, 254, 650], "lz4": [32, 35, 47, 48, 254, 735], "zstd": [32, 35, 47, 48, 254, 735], "pretti": [33, 254], "row_ori": [33, 254], "iobas": [33, 34, 108, 109, 254, 453, 692, 716, 735], "serial": [33, 34, 254], "represent": [33, 34, 216, 254, 295, 322, 326, 329, 330, 332, 334, 336, 339, 342, 343, 346, 353, 354, 356, 554, 639, 662, 679, 735, 770, 799, 803, 805, 806, 810, 812, 815, 817, 820, 823, 824, 827, 834, 835, 837, 1030, 1034, 1051], "orient": [33, 68, 70, 94, 96, 254, 735], "slower": [33, 94, 96, 133, 157, 185, 227, 236, 254, 268, 568, 639, 670, 719, 735, 745, 1051], "common": [33, 67, 73, 74, 254, 439, 588, 589, 639, 644, 657, 662, 664, 690, 700, 735], "write_ndjson": [33, 254], "newlin": [34, 109, 115, 254], "delimit": [34, 101, 102, 109, 112, 115, 187, 215, 254, 509, 980, 1028, 1051], "parquetcompress": [35, 254], "compression_level": [35, 48, 254, 735], "statist": [35, 48, 101, 102, 110, 116, 139, 254, 361, 362, 396, 483, 484, 485, 486, 487, 488, 489, 490, 491, 503, 639, 735, 787, 842, 843, 881, 954, 974, 1051], "row_group_s": [35, 48, 254, 735], "use_pyarrow": [35, 48, 101, 106, 110, 254, 735, 1031, 1032, 1051], "pyarrow_opt": [35, 104, 110, 113, 254], "parquet": [35, 48, 110, 111, 116, 254, 650, 735], "gzip": [35, 48, 254, 735], "lzo": [35, 48, 254, 735], "brotli": [35, 48, 254, 735], "choos": [35, 47, 48, 187, 254, 735], "good": [35, 47, 48, 170, 254, 735], "perform": [35, 47, 48, 67, 81, 91, 101, 102, 106, 110, 112, 114, 115, 116, 132, 133, 134, 157, 158, 159, 173, 190, 197, 221, 236, 254, 268, 465, 535, 536, 537, 639, 653, 671, 672, 677, 702, 707, 715, 735, 745, 1006, 1007, 1008, 1051], "fast": [35, 47, 48, 125, 127, 254, 366, 495, 639, 735, 847, 964, 1051, 1059], "decompress": [35, 47, 48, 254, 735], "backward": [35, 48, 148, 173, 254, 285, 338, 368, 639, 666, 677, 735, 819, 849, 1051], "guarante": [35, 48, 91, 101, 102, 223, 254, 664, 708, 735], "deal": [35, 48, 170, 254, 344, 352, 474, 535, 639, 735, 825, 833, 940, 1006, 1051], "older": [35, 48, 254, 735], "reader": [35, 48, 99, 101, 102, 106, 110, 254, 651, 735], "higher": [35, 48, 189, 246, 254, 472, 487, 614, 639, 691, 729, 735, 939, 953, 1051], "mean": [35, 48, 101, 102, 106, 110, 112, 139, 148, 157, 158, 159, 173, 187, 227, 234, 254, 341, 345, 352, 365, 368, 483, 484, 485, 486, 487, 489, 490, 491, 503, 516, 570, 575, 588, 639, 666, 670, 671, 672, 677, 681, 717, 735, 787, 822, 826, 833, 845, 849, 854, 950, 974, 987, 1051], "smaller": [35, 48, 144, 254, 664, 735, 840, 1051], "disk": [35, 47, 48, 106, 254, 700, 735], "11": [35, 48, 118, 124, 159, 254, 263, 314, 315, 329, 337, 338, 341, 345, 352, 382, 466, 474, 490, 504, 543, 563, 577, 623, 628, 639, 657, 672, 673, 680, 690, 705, 735, 738, 745, 822, 826, 833, 948, 1051], "22": [35, 48, 123, 254, 322, 342, 345, 352, 354, 355, 483, 484, 486, 489, 490, 491, 535, 577, 639, 735, 738, 826, 833, 836, 1006, 1059], "comput": [35, 48, 73, 74, 78, 144, 157, 173, 218, 223, 234, 246, 254, 260, 270, 271, 272, 273, 274, 275, 281, 282, 283, 296, 301, 302, 304, 305, 306, 307, 308, 313, 357, 364, 396, 417, 418, 419, 421, 422, 423, 424, 433, 434, 435, 456, 465, 466, 470, 471, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 500, 501, 502, 503, 507, 552, 553, 564, 565, 566, 567, 571, 572, 573, 580, 582, 585, 592, 606, 610, 617, 618, 623, 639, 670, 674, 676, 677, 708, 714, 717, 729, 735, 740, 746, 747, 748, 749, 750, 751, 757, 758, 759, 771, 779, 780, 781, 782, 783, 784, 789, 839, 840, 844, 881, 901, 902, 903, 905, 906, 907, 908, 917, 918, 919, 926, 934, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 971, 972, 973, 974, 977, 1024, 1025, 1033, 1051], "512": [35, 254, 468, 639, 934, 1051], "implement": [35, 91, 132, 133, 236, 254, 268, 395, 469, 547, 568, 639, 719, 745, 962, 963, 1051], "v": [35, 54, 55, 144, 254, 494, 639, 786, 960, 1051], "At": [35, 254], "moment": [35, 138, 254, 396, 503, 639, 881, 974, 1051], "pyarrow": [35, 90, 95, 101, 103, 104, 106, 110, 113, 117, 118, 171, 212, 217, 218, 254, 651, 1027, 1031, 1032, 1033, 1051], "write_t": [35, 254], "partition_col": [35, 103, 254], "write_to_dataset": [35, 254], "similar": [35, 128, 152, 173, 254, 348, 351, 465, 481, 630, 639, 677, 735, 829, 832, 947, 1051], "spark": [35, 254], "partit": [35, 103, 104, 110, 113, 117, 171, 185, 254], "we": [35, 101, 102, 105, 112, 158, 159, 173, 227, 254, 268, 341, 345, 352, 409, 438, 483, 484, 485, 486, 487, 489, 490, 491, 524, 604, 630, 639, 671, 672, 677, 681, 735, 745, 822, 826, 833, 857, 893, 995, 1051], "use_pyarrow_write_to_dataset": [35, 254], "first": [35, 67, 101, 102, 105, 112, 115, 123, 133, 156, 158, 161, 173, 175, 182, 186, 187, 210, 215, 216, 222, 223, 227, 239, 254, 278, 280, 309, 338, 341, 345, 379, 386, 400, 409, 412, 413, 431, 440, 467, 494, 506, 516, 518, 519, 525, 526, 576, 583, 588, 595, 599, 630, 639, 657, 671, 673, 677, 680, 689, 708, 714, 722, 735, 738, 754, 785, 787, 819, 822, 826, 856, 866, 883, 893, 896, 897, 915, 921, 960, 987, 989, 990, 996, 997, 1021, 1030, 1051, 1059], "watermark": [35, 254], "partitioned_object": [35, 254], "calendar": [37, 38, 158, 159, 173, 227, 254, 329, 341, 345, 352, 356, 483, 484, 485, 486, 487, 489, 490, 491, 639, 671, 672, 677, 735, 806, 822, 826, 833, 837], "time_unit": [38, 40, 97, 317, 318, 325, 350, 355, 535, 537, 588, 589, 597, 738, 794, 795, 802, 831, 836, 1006, 1008], "time_zon": [38, 97, 319, 344, 352, 537, 588, 589, 738, 793, 796, 801, 825, 833, 1008], "timezon": [38, 738], "m": [38, 40, 55, 172, 254, 316, 317, 318, 324, 325, 348, 350, 351, 355, 516, 535, 536, 537, 540, 588, 589, 597, 676, 735, 738, 793, 794, 795, 801, 802, 829, 831, 832, 836, 987, 1006, 1007, 1008, 1011], "zone": [38, 316, 319, 344, 535, 537, 588, 589, 738, 793, 796, 825, 1006, 1008], "zoneinfo": [38, 738], "run": [38, 47, 48, 73, 125, 127, 133, 157, 174, 187, 223, 236, 254, 268, 309, 409, 480, 481, 619, 639, 657, 662, 664, 670, 681, 685, 690, 700, 708, 735, 738, 745, 785, 893, 946, 947, 1051, 1058, 1059], "available_timezon": [38, 738], "check": [38, 101, 102, 112, 119, 120, 153, 158, 159, 167, 169, 172, 254, 264, 266, 286, 289, 290, 383, 387, 406, 510, 514, 533, 639, 671, 672, 676, 681, 735, 742, 743, 761, 764, 765, 862, 864, 867, 868, 870, 875, 876, 877, 879, 880, 890, 961, 981, 985, 1004, 1051], "128": [39, 69, 934, 1051], "bit": [39, 41, 42, 43, 44, 45, 46, 61, 62, 63, 64, 476, 510, 639, 942, 981, 1051], "neg": [39, 158, 159, 161, 175, 203, 204, 206, 210, 254, 425, 426, 467, 496, 497, 504, 529, 639, 671, 672, 698, 699, 701, 715, 735, 856, 883, 909, 910, 966, 967, 975, 1000, 1021, 1051], "scale": [39, 144, 254, 467, 538, 639, 840, 1009, 1051], "experiment": [39, 117, 200, 225, 226, 231, 254, 309, 345, 483, 484, 485, 486, 487, 489, 490, 491, 639, 696, 710, 713, 735, 785, 826, 857, 938, 1051], "progress": 39, "expect": [39, 82, 84, 89, 268, 568, 604, 639, 679, 681, 735], "32": [41, 44, 62, 69, 159, 169, 254, 457, 498, 639, 672, 735, 789, 823, 934, 953, 1051], "sign": [43, 44, 45, 46, 341, 476, 543, 639, 822, 870, 942, 1014, 1051], "maintain_ord": [47, 48, 134, 157, 185, 187, 221, 223, 227, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 262, 268, 284, 432, 550, 557, 581, 639, 653, 657, 662, 664, 670, 690, 700, 702, 707, 708, 718, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 735, 760, 916, 1036, 1051], "type_coercion": [47, 48, 73, 657, 662, 664, 690, 700, 735], "predicate_pushdown": [47, 48, 73, 657, 662, 664, 681, 690, 700, 735], "projection_pushdown": [47, 48, 73, 657, 662, 664, 681, 690, 700, 735], "simplify_express": [47, 48, 73, 657, 662, 664, 690, 700, 735], "no_optim": [47, 48, 73, 657, 664, 681, 690, 735], "slice_pushdown": [47, 48, 73, 657, 662, 664, 681, 690, 700, 735], "persist": [47, 48, 57, 735], "larger": [47, 48, 580, 735], "ram": [47, 48, 735], "maintain": [47, 48, 134, 221, 254, 284, 432, 494, 557, 639, 653, 702, 707, 735, 760, 916, 960, 1036, 1051], "slightli": [47, 48, 735], "faster": [47, 48, 146, 217, 225, 254, 268, 482, 523, 558, 639, 735, 744, 745, 846, 948, 994, 1051], "coercion": [47, 48, 73, 477, 639, 657, 662, 664, 690, 700, 735], "optim": [47, 48, 73, 110, 112, 114, 115, 116, 170, 174, 186, 190, 196, 223, 254, 657, 662, 664, 681, 690, 700, 708, 715, 719, 735, 771, 1051], "predic": [47, 48, 73, 112, 114, 115, 116, 117, 149, 169, 195, 254, 369, 562, 595, 639, 657, 662, 664, 667, 681, 690, 693, 700, 715, 735, 850, 962, 963, 1051], "pushdown": [47, 48, 73, 657, 662, 664, 681, 690, 693, 700, 715, 735, 962, 963, 1051], "project": [47, 48, 73, 112, 114, 115, 116, 268, 505, 506, 639, 657, 662, 664, 681, 690, 693, 700, 716, 735], "turn": [47, 48, 73, 101, 102, 112, 541, 560, 639, 657, 662, 664, 681, 690, 735, 1012], "off": [47, 48, 73, 101, 102, 112, 560, 639, 657, 662, 664, 681, 690, 735], "certain": [47, 48, 80, 104, 113, 164, 227, 254, 577, 657, 690, 735, 1051], "slice": [47, 48, 68, 73, 144, 161, 171, 210, 254, 413, 429, 482, 483, 484, 485, 486, 487, 489, 490, 491, 639, 657, 662, 664, 681, 690, 700, 735, 840, 856, 897, 913, 948, 949, 950, 951, 952, 953, 955, 956, 957, 1021, 1051], "lf": [47, 48, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 714, 715, 716, 735, 1058, 1059], "scan_csv": [47, 48, 101, 102, 735], "my_larger_than_ram_fil": [47, 48, 735], "data_pagesize_limit": [48, 735], "reduc": [48, 101, 102, 110, 112, 114, 115, 116, 241, 242, 244, 247, 498, 595, 639, 724, 725, 727, 730, 735, 923, 937, 968, 1020, 1051], "pressur": [48, 110, 115, 116, 498, 639, 735, 968, 1051], "improv": [48, 106, 114, 735], "speed": [48, 268, 639, 735], "minimum": [48, 122, 123, 124, 126, 152, 181, 254, 360, 361, 362, 454, 460, 474, 610, 611, 639, 687, 735, 775, 814, 841, 842, 843, 931, 936, 940, 1051, 1059], "limit": [48, 103, 112, 148, 254, 285, 298, 299, 300, 368, 374, 639, 666, 673, 735, 775, 776, 777, 849, 1051], "page": [48, 106, 110, 114, 116, 254, 639, 650, 735, 1051], "arrai": [49, 90, 94, 101, 102, 110, 144, 212, 217, 218, 254, 281, 282, 283, 284, 298, 299, 300, 304, 305, 306, 307, 308, 405, 416, 417, 418, 419, 420, 427, 428, 434, 483, 484, 486, 490, 495, 592, 639, 735, 757, 758, 759, 760, 775, 776, 777, 781, 782, 783, 784, 789, 840, 889, 900, 901, 902, 903, 904, 911, 912, 918, 919, 949, 950, 952, 955, 956, 957, 964, 969, 1027, 1032, 1033, 1041, 1051], "integer_list": 49, "float_list": 49, "wrap": [51, 97, 383, 639], "arbitrari": [51, 124, 738], "python": [51, 101, 102, 118, 133, 170, 196, 197, 214, 236, 254, 268, 318, 438, 568, 588, 589, 627, 628, 630, 639, 644, 719, 745, 795, 807, 808, 809, 814, 1031, 1051], "queri": [52, 54, 73, 103, 106, 112, 114, 115, 116, 146, 174, 186, 254, 268, 438, 440, 519, 639, 657, 662, 664, 673, 680, 690, 700, 715, 719, 735, 744, 745, 846, 990, 1051, 1058], "eager": [52, 53, 54, 55, 56, 57, 158, 225, 254, 310, 317, 319, 322, 323, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 350, 352, 353, 354, 355, 356, 471, 483, 484, 486, 489, 490, 491, 570, 574, 588, 589, 597, 601, 602, 613, 616, 622, 627, 628, 631, 638, 639, 671, 735, 793, 794, 796, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 833, 834, 835, 836, 837, 1058], "pars": [52, 101, 102, 105, 109, 112, 114, 115, 134, 157, 200, 207, 221, 231, 234, 254, 383, 440, 465, 506, 518, 524, 535, 537, 538, 564, 565, 566, 567, 573, 576, 578, 579, 585, 586, 597, 606, 607, 610, 611, 619, 620, 622, 623, 624, 630, 639, 653, 670, 696, 702, 707, 713, 717, 735, 861, 989, 995, 1006, 1008, 1009, 1051], "against": [52, 409, 735, 893, 1058, 1059], "eagerli": [52, 431], "unset": [52, 123, 344, 431, 825], "init": [52, 130], "eager_execut": [52, 1058], "itself": [52, 122, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 617, 618, 639, 679, 735, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 1051, 1058], "alwai": [52, 101, 123, 133, 157, 236, 254, 448, 535, 588, 630, 681, 735, 744, 745, 1006, 1051, 1058, 1059], "impact": [52, 158, 254, 671, 735, 1058], "declar": [52, 90, 92, 93, 94, 96, 108, 109, 254, 735], "godfath": 52, "1972": 52, "6_000_000": 52, "134_821_952": 52, "dark": 52, "knight": 52, "2008": 52, "185_000_000": 52, "533_316_061": 52, "schindler": 52, "1993": 52, "22_000_000": 52, "96_067_179": 52, "pulp": 52, "fiction": 52, "1994": 52, "8_000_000": 52, "107_930_000": 52, "shawshank": 52, "redempt": 52, "25_000_000": 52, "28_341_469": 52, "release_year": 52, "budget": 52, "gross": 52, "imdb_scor": 52, "ctx": [52, 53, 54, 55, 56, 57], "film": 52, "1990": 52, "BY": [52, 54], "desc": [52, 54], "AS": [52, 620, 1058], "decad": 52, "total_gross": 52, "n_film": 52, "2000": [52, 328, 330, 337, 338, 341, 738, 805, 818, 819, 822], "533316061": 52, "232338648": 52, "1970": [52, 117], "134821952": 52, "register_glob": [53, 55, 57, 1058], "register_mani": [53, 54, 57], "unregist": [53, 54, 55, 1058], "frame_data": [53, 56], "execut": [53, 54, 56, 74, 174, 254, 292, 409, 639, 654, 681, 690, 735, 893, 1058], "collect": [53, 54, 57, 70, 73, 112, 113, 117, 124, 126, 140, 142, 174, 212, 254, 268, 292, 387, 578, 597, 622, 639, 653, 659, 660, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 696, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 713, 714, 715, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 735, 738, 868, 1051, 1058, 1059], "global": [54, 58, 75, 124, 129, 217, 254, 440, 639, 1058], "scope": [54, 57, 130, 649, 738, 1058], "automat": [54, 57, 90, 92, 93, 94, 96, 97, 101, 102, 103, 108, 109, 112, 124, 126, 128, 200, 231, 254, 292, 440, 522, 528, 534, 639, 696, 713, 735, 921, 993, 999, 1005, 1051, 1058], "map": [54, 55, 92, 93, 101, 102, 106, 107, 110, 111, 112, 114, 133, 143, 151, 170, 191, 195, 196, 197, 213, 254, 345, 352, 439, 440, 465, 481, 560, 568, 639, 661, 693, 735, 787, 826, 833, 921, 947, 1051, 1058], "recent": [54, 466, 639, 934, 1051, 1058], "df1": [54, 56, 57, 58, 67, 74, 75, 119, 146, 153, 180, 218, 229, 254, 686, 735], "x": [54, 55, 67, 74, 97, 101, 102, 103, 112, 122, 124, 144, 163, 166, 168, 172, 179, 187, 196, 197, 254, 261, 263, 264, 265, 266, 268, 310, 311, 358, 359, 373, 376, 377, 378, 398, 405, 414, 435, 437, 438, 439, 455, 457, 461, 462, 464, 468, 469, 471, 477, 481, 500, 503, 531, 546, 547, 554, 556, 563, 565, 567, 568, 571, 572, 583, 584, 586, 595, 604, 605, 607, 611, 615, 624, 639, 676, 681, 685, 701, 735, 738, 745, 849, 879, 971, 974, 1002, 1034, 1051, 1058], "df2": [54, 56, 57, 58, 67, 74, 75, 119, 146, 153, 218, 229, 254], "t": [54, 55, 74, 105, 112, 133, 158, 186, 223, 225, 254, 268, 309, 316, 324, 344, 357, 360, 361, 362, 409, 465, 467, 471, 516, 522, 535, 537, 568, 630, 639, 671, 689, 708, 735, 738, 745, 785, 825, 839, 841, 842, 843, 893, 938, 961, 987, 993, 999, 1006, 1008, 1032, 1041, 1051], "join": [54, 58, 67, 73, 74, 75, 173, 226, 254, 382, 465, 639, 657, 662, 664, 677, 690, 700, 710, 714, 735], "named_fram": [55, 1058], "lf1": [55, 57], "o": [55, 106, 114, 291, 309, 515, 555, 639, 766, 785, 986, 1005, 1035, 1051], "lf2": [55, 57, 735], "p": [55, 69, 186, 254, 467, 622, 639, 689, 735], "q": [55, 197, 254, 310, 471, 622, 639, 938, 1051], "r": [55, 467, 511, 515, 516, 517, 525, 639, 738, 982, 986, 987, 988, 996], "lf3": [55, 735], "lf4": [55, 735], "either": [55, 124, 159, 169, 174, 177, 185, 195, 209, 217, 254, 471, 535, 564, 573, 622, 639, 672, 679, 735, 738, 938, 1006, 1051], "tbl1": [55, 57], "tbl2": [55, 57], "tbl3": 55, "tbl4": 55, "statement": [56, 630], "hello_world": 56, "baz": [56, 164, 165, 187, 224, 254, 530, 532, 675, 709, 735, 738, 1003], "hello_data": 56, "foo_bar": [56, 604], "registr": [57, 650], "lifetim": [57, 130, 649], "context": [57, 58, 128, 183, 237, 254, 262, 268, 292, 303, 369, 409, 448, 505, 506, 560, 568, 581, 594, 597, 603, 616, 619, 638, 639, 649, 650, 714, 720, 735, 893, 1058], "manag": [57, 58, 649, 650, 1058], "often": [57, 130, 158, 159, 254, 407, 477, 639, 671, 672, 735, 891], "want": [57, 93, 133, 146, 183, 254, 268, 298, 299, 300, 352, 369, 438, 440, 481, 483, 484, 485, 486, 487, 489, 490, 491, 583, 595, 613, 616, 631, 639, 657, 673, 680, 735, 738, 744, 745, 775, 776, 777, 833, 846, 947, 1032, 1051], "df0": [57, 180, 254, 686, 735], "exit": [57, 58, 130, 1058], "construct": [57, 90, 92, 93, 94, 95, 96, 254, 375, 440, 613, 616, 631, 639, 669, 692, 735, 1051], "through": [57, 738, 1051], "tbl0": 57, "remain": [57, 101, 102, 112, 144, 254, 531, 532, 570, 681, 735, 840, 1002, 1003, 1051], "text": [57, 523, 525, 526, 620, 994, 1059], "misc": 57, "testing1234": 57, "test1": 57, "test2": 57, "test3": 57, "temporarili": [58, 128, 130, 158, 159, 254, 671, 672, 735], "cach": [58, 73, 75, 106, 112, 114, 116, 129, 440, 483, 484, 485, 486, 487, 489, 490, 491, 535, 536, 537, 540, 639, 649, 657, 662, 664, 690, 700, 735, 1006, 1007, 1008, 1011], "categori": [58, 75, 215, 254, 294, 295, 310, 471, 639, 769, 770, 786, 857, 938, 1051], "until": [58, 174, 254, 588], "finish": [58, 78, 146, 254, 744, 846, 1051], "invalid": [58, 101, 102, 112, 518, 519, 524, 556, 588, 589, 639, 989, 990, 995], "outermost": 58, "color": [58, 75, 236, 286, 288, 289, 290, 719], "red": [58, 75, 236, 719], "green": [58, 75, 236, 719], "blue": [58, 75, 286, 288, 289, 290], "orang": [58, 75, 137, 237, 238, 240, 241, 242, 244, 246, 247, 254, 720, 721, 723, 724, 725, 727, 729, 730], "uint8": [58, 75, 121, 123, 216, 217, 254, 307, 308, 440, 548, 563, 639, 738, 783, 784, 1020, 1051, 1059], "yellow": [58, 75, 286, 288, 289, 290], "black": [58, 75, 133, 254, 286, 288, 289, 290], "succe": [58, 101, 102, 112], "df_join": [58, 75], "cat": [58, 75, 216, 254, 310, 471, 510, 539, 542, 554, 579, 635, 639, 738, 786, 857, 938, 981, 1010, 1013, 1047, 1051], "u8": [58, 75, 215, 216, 254, 440, 563, 639, 738, 1028, 1051, 1059], "composit": [59, 123, 1059], "schemadict": [59, 90, 92, 93, 94, 95, 96, 112, 199, 254, 622, 681, 695, 719, 735], "struct_seri": [59, 719], "dai": [60, 158, 159, 171, 173, 227, 254, 325, 329, 336, 337, 338, 341, 342, 343, 345, 350, 352, 353, 354, 356, 483, 484, 485, 486, 487, 489, 490, 491, 587, 588, 590, 591, 639, 671, 672, 677, 735, 738, 818, 819, 822, 823, 826, 833, 835], "unsign": [61, 62, 63, 64, 476, 639, 870, 942, 1051], "could": [65, 78, 142, 158, 254, 293, 583, 595, 639, 660, 671, 735, 767, 1051], "static": [65, 719], "utf": 66, "frametyp": [67, 1058], "joinstrategi": [67, 172, 254, 676, 735], "outer": [67, 74, 172, 254, 676, 735], "descend": [67, 134, 201, 207, 221, 254, 278, 427, 474, 495, 505, 506, 573, 639, 653, 697, 702, 707, 735, 754, 876, 911, 940, 964, 976, 1051], "fill": [67, 74, 135, 147, 148, 204, 225, 254, 285, 305, 308, 367, 368, 374, 382, 483, 484, 486, 490, 497, 521, 527, 543, 596, 613, 616, 631, 639, 665, 666, 699, 714, 735, 848, 849, 860, 932, 949, 950, 952, 955, 956, 957, 967, 992, 998, 1014, 1051], "sort": [67, 68, 119, 123, 134, 158, 159, 173, 180, 186, 187, 201, 221, 227, 239, 248, 254, 278, 295, 369, 465, 495, 506, 560, 562, 573, 639, 653, 662, 671, 672, 677, 686, 689, 690, 697, 700, 707, 722, 731, 735, 738, 754, 770, 876, 964, 1036, 1039, 1051, 1059], "origin": [67, 101, 102, 223, 254, 344, 395, 440, 465, 476, 477, 478, 511, 516, 517, 519, 521, 527, 543, 571, 572, 639, 708, 735, 786, 825, 921, 938, 944, 982, 987, 988, 990, 992, 998, 1014, 1051], "In": [67, 104, 113, 116, 124, 126, 130, 133, 144, 146, 158, 159, 183, 217, 254, 268, 588, 639, 671, 672, 735, 744, 840, 846, 941, 1051], "duplic": [67, 79, 166, 172, 173, 223, 254, 263, 384, 395, 471, 639, 676, 677, 708, 735, 863, 938, 1051], "behaviour": [67, 74, 510, 516, 517, 525, 556, 639, 981, 987, 988, 996], "strategi": [67, 74, 101, 121, 122, 123, 124, 126, 148, 158, 172, 173, 182, 254, 268, 368, 431, 639, 666, 671, 676, 677, 735, 849, 915, 1051], "suitabl": [67, 74, 122, 133, 254, 268, 494, 639, 745, 960, 1051, 1059], "get": [67, 98, 107, 111, 128, 134, 137, 143, 151, 154, 155, 158, 159, 161, 162, 166, 168, 169, 175, 182, 195, 199, 202, 206, 210, 221, 230, 239, 248, 254, 262, 276, 277, 278, 280, 284, 294, 304, 305, 306, 307, 308, 325, 341, 370, 379, 384, 386, 394, 397, 400, 411, 415, 416, 432, 441, 442, 443, 448, 450, 454, 459, 460, 472, 480, 504, 508, 520, 523, 548, 549, 557, 561, 588, 594, 599, 603, 606, 607, 608, 609, 610, 611, 621, 625, 629, 639, 653, 658, 661, 668, 671, 672, 673, 678, 680, 695, 701, 705, 707, 712, 722, 731, 735, 752, 753, 754, 755, 756, 760, 769, 773, 781, 782, 783, 784, 802, 822, 853, 856, 861, 863, 866, 878, 883, 895, 899, 900, 916, 922, 924, 925, 927, 930, 931, 935, 936, 939, 946, 975, 978, 991, 994, 1021, 1027, 1028, 1036, 1040, 1041, 1051], "speedup": [67, 133, 170, 254, 268, 639, 745, 1051], "receiv": [67, 112, 133, 186, 254, 467, 639, 689, 735, 1059], "now": [67, 159, 254, 292, 471, 535, 537, 639, 672, 735, 1006, 1008], "One": [67, 139, 183, 187, 254, 265, 464, 620, 639, 738, 787, 1051], "whose": [67, 173, 187, 254, 363, 593, 639, 677, 735], "uniqu": [67, 121, 122, 123, 126, 168, 172, 183, 197, 245, 254, 269, 280, 310, 386, 394, 458, 471, 535, 536, 537, 540, 558, 560, 569, 612, 639, 676, 728, 735, 756, 786, 787, 866, 878, 928, 938, 1006, 1007, 1008, 1011, 1037, 1039, 1051], "post": 67, "constrain": 67, "newli": 67, "boolean": [67, 134, 149, 152, 174, 207, 221, 254, 264, 265, 266, 286, 289, 290, 328, 369, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 401, 402, 406, 464, 506, 518, 562, 563, 573, 574, 622, 630, 639, 653, 656, 667, 679, 702, 707, 735, 738, 742, 743, 755, 761, 763, 805, 850, 861, 862, 863, 865, 866, 868, 869, 871, 872, 873, 874, 878, 885, 886, 890, 935, 936, 962, 981, 1032, 1042, 1051], "know": [67, 431, 523, 994, 1032, 1041, 1051], "2022": [67, 139, 156, 158, 159, 173, 227, 254, 318, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 535, 588, 589, 591, 597, 639, 671, 672, 677, 735, 738, 795, 806, 822, 826, 833, 1006], "y": [67, 74, 97, 122, 124, 144, 166, 168, 172, 179, 187, 196, 197, 254, 261, 263, 264, 265, 266, 348, 351, 358, 359, 376, 377, 398, 405, 414, 437, 439, 461, 462, 464, 469, 477, 481, 535, 536, 537, 547, 556, 563, 565, 567, 571, 572, 586, 604, 607, 611, 624, 639, 676, 685, 701, 735, 738, 829, 832, 1006, 1007, 1008], "df3": [67, 254], "set_tbl_format": 67, "09": [67, 124, 159, 254, 318, 329, 337, 338, 538, 628, 672, 735, 799, 1009], "01": [67, 124, 139, 156, 158, 159, 227, 254, 316, 317, 318, 319, 323, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 355, 356, 483, 484, 486, 489, 490, 491, 535, 536, 537, 540, 588, 589, 591, 639, 671, 672, 735, 738, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 1006, 1007, 1008, 1011], "02": [67, 156, 158, 159, 173, 227, 254, 317, 318, 325, 326, 327, 334, 335, 336, 337, 338, 341, 344, 345, 346, 347, 350, 352, 353, 355, 483, 484, 485, 486, 487, 489, 490, 491, 492, 535, 536, 537, 540, 588, 589, 591, 639, 671, 672, 677, 735, 738, 794, 795, 797, 798, 802, 803, 804, 807, 808, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 834, 835, 836, 915, 1006, 1007, 1008, 1011], "03": [67, 97, 158, 159, 227, 254, 317, 318, 319, 323, 325, 327, 335, 336, 337, 338, 344, 345, 346, 347, 348, 350, 351, 352, 353, 355, 483, 484, 486, 489, 490, 491, 536, 540, 588, 589, 639, 671, 672, 735, 794, 795, 796, 799, 800, 802, 803, 804, 807, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 836, 1007, 1011], "af1": 67, "af2": 67, "af3": 67, "keep": [67, 101, 102, 112, 223, 226, 227, 254, 395, 440, 576, 639, 708, 710, 735, 921, 1051], "easili": [67, 200, 231, 234, 254, 577, 622, 696, 713, 717, 735], "dot": [67, 639, 700, 735, 1051], "product": [67, 138, 254, 307, 313, 568, 639, 783, 789, 1051], "fill_nul": [67, 147, 254, 639, 665, 714, 735, 1051], "sum_horizont": [67, 623], "167": 67, "47": 67, "callabl": [68, 69, 70, 71, 112, 133, 152, 186, 236, 254, 268, 431, 438, 439, 467, 482, 568, 583, 584, 595, 605, 615, 639, 681, 689, 719, 735, 745, 915, 948, 1051], "decor": [68, 69, 70, 71, 124, 126, 133, 254, 268, 639, 649, 650, 745, 1051], "under": [68, 69, 70, 71, 632, 633, 635, 640, 641, 645, 646, 647, 1043, 1045, 1047, 1052, 1055, 1056, 1057], "access": [68, 69, 70, 71, 170, 195, 196, 254, 440, 639, 714, 735, 1059], "by_first_letter_of_column_nam": 68, "f": [68, 102, 139, 156, 171, 212, 222, 225, 254, 261, 268, 431, 498, 515, 535, 537, 568, 578, 605, 639, 915, 986, 1006, 1008], "fromkei": [68, 70], "by_first_letter_of_column_valu": 68, "starts_with": [68, 286, 289, 510, 514, 738, 985], "to_seri": [68, 154, 254, 535, 574, 616, 1006], "xx": [68, 70, 123, 126, 738], "xy": [68, 70], "yy": [68, 70, 123, 126, 738], "yz": [68, 70], "b1": [68, 70], "b2": [68, 70], "pow_n": 69, "powersofn": 69, "next": [69, 158, 159, 173, 227, 254, 285, 341, 345, 352, 474, 483, 484, 485, 486, 487, 489, 490, 491, 588, 639, 671, 672, 677, 735, 822, 826, 833, 940, 1051], "ceil": [69, 639, 1051], "previou": [69, 130, 466, 469, 545, 547, 639, 744, 934, 1051], "floor": [69, 639, 1051], "nearest": [69, 173, 189, 246, 254, 297, 372, 382, 472, 487, 614, 639, 677, 691, 729, 735, 772, 852, 860, 939, 953, 1051], "24": [69, 118, 133, 144, 158, 159, 173, 227, 254, 307, 309, 322, 327, 341, 342, 345, 352, 354, 457, 483, 484, 485, 486, 487, 489, 490, 491, 639, 671, 672, 677, 735, 785, 804, 822, 826, 833, 880, 1051], "001": [69, 330, 331, 333, 340, 591, 811, 813, 821], "next_pow2": 69, "prev_pow2": 69, "nearest_pow2": 69, "split_by_column_dtyp": 70, "collect_al": 70, "31": [71, 124, 318, 322, 323, 336, 337, 341, 353, 535, 587, 588, 590, 597, 604, 738, 793, 795, 799, 800, 818, 822, 1006, 1059], "42": [71, 159, 160, 180, 254, 672, 686, 735, 855, 1051], "961": 71, "1764": 71, "4160": 71, "build": [72, 91, 738, 1059], "wa": 72, "compil": [72, 403, 404, 887, 888], "gate": 72, "info": [72, 104, 113, 118], "otherwis": [72, 123, 128, 133, 180, 197, 200, 236, 254, 268, 287, 298, 299, 300, 344, 352, 360, 361, 362, 431, 467, 476, 510, 512, 564, 566, 568, 585, 606, 610, 623, 630, 639, 686, 696, 719, 735, 745, 762, 775, 776, 777, 825, 833, 841, 842, 843, 915, 942, 962, 963, 981, 983, 1051], "depend": [72, 118, 268, 403, 404, 448, 471, 474, 568, 594, 597, 603, 639, 887, 888, 938, 940, 1051, 1059], "host": [72, 101, 106, 110, 114, 116], "git": 72, "lazy_fram": 73, "comm_subplan_elim": [73, 657, 662, 664, 690, 700, 735], "comm_subexpr_elim": [73, 292, 639, 657, 662, 664, 690, 700, 735], "graph": [73, 174, 254, 674, 714, 735], "parallel": [73, 74, 99, 103, 110, 116, 158, 173, 174, 186, 254, 309, 409, 639, 650, 671, 676, 677, 719, 735, 785, 893, 1051], "threadpool": [73, 128], "Will": [73, 657, 662, 664, 690, 700, 735, 1051], "try": [73, 85, 87, 101, 102, 105, 106, 110, 112, 114, 116, 657, 662, 664, 690, 700, 735], "branch": [73, 657, 662, 664, 690, 700, 735], "subplan": [73, 657, 662, 664, 690, 700, 735], "union": [73, 74, 424, 657, 662, 664, 690, 700, 735, 738, 908], "subexpress": [73, 657, 662, 664, 690, 700, 735], "reus": [73, 657, 662, 664, 690, 700, 735], "part": [73, 90, 124, 517, 531, 532, 657, 662, 664, 690, 700, 714, 735, 988, 1002, 1003], "fashion": [73, 172, 254, 657, 662, 664, 690, 700, 735], "item": [74, 102, 195, 198, 254, 365, 406, 412, 414, 493, 532, 639, 845, 890, 896, 898, 959, 1003, 1051], "iter": [74, 125, 127, 134, 157, 158, 159, 170, 171, 185, 195, 196, 197, 200, 201, 207, 221, 222, 231, 233, 234, 254, 309, 363, 465, 506, 564, 565, 566, 567, 573, 576, 577, 578, 579, 585, 586, 593, 606, 607, 610, 611, 619, 622, 623, 624, 639, 653, 670, 671, 672, 696, 697, 702, 707, 713, 717, 735, 785, 1051, 1059], "polarstyp": 74, "concatmethod": 74, "vertic": [74, 146, 225, 229, 254, 509, 980], "rechunk": [74, 90, 95, 101, 102, 106, 110, 112, 114, 115, 116, 146, 254, 639, 744, 773, 846, 927, 1051], "combin": [74, 85, 87, 158, 159, 160, 173, 227, 254, 265, 279, 341, 352, 464, 522, 528, 534, 588, 639, 671, 672, 677, 700, 735, 822, 826, 833, 993, 999, 1005], "concaten": [74, 152, 186, 254, 467, 578, 579, 639, 689, 735, 773, 927, 1051], "diagon": [74, 222, 254], "vstack": [74, 146, 254], "vertical_relax": 74, "coerc": [74, 477, 639], "equal": [74, 75, 101, 102, 112, 119, 120, 134, 153, 158, 173, 180, 221, 254, 292, 358, 359, 376, 398, 431, 462, 477, 482, 483, 484, 485, 486, 487, 489, 490, 491, 520, 521, 527, 543, 617, 618, 639, 653, 671, 677, 686, 702, 707, 735, 915, 948, 949, 950, 951, 952, 953, 955, 956, 957, 961, 991, 992, 998, 1014, 1051, 1059], "supertyp": [74, 148, 254, 267, 639, 666, 735], "find": [74, 150, 254, 494, 639, 960, 1051], "miss": [74, 101, 102, 112, 147, 254, 285, 360, 361, 362, 374, 389, 391, 639, 665, 735, 841, 842, 843, 1041, 1051], "stack": [74, 163, 229, 254], "don": [74, 133, 223, 225, 254, 268, 309, 409, 465, 471, 568, 639, 708, 735, 738, 745, 785, 893, 938, 961, 1041, 1051], "auto": [74, 90, 92, 93, 94, 96, 108, 109, 110, 116, 222, 254, 735, 1059], "logic": [74, 133, 236, 254, 268, 554, 568, 639, 669, 676, 692, 716, 719, 735, 745, 1034, 1051], "align_fram": 74, "pattern": [74, 101, 102, 112, 114, 115, 116, 170, 254, 446, 510, 511, 516, 517, 525, 526, 719, 738, 962, 963, 981, 982, 987, 988, 996, 997, 1051], "collis": 74, "need": [74, 97, 101, 102, 103, 105, 119, 120, 158, 159, 197, 205, 217, 254, 431, 440, 498, 520, 538, 613, 616, 631, 639, 671, 672, 735, 968, 991, 1009, 1051], "sure": [74, 90, 95, 101, 102, 106, 110, 158, 159, 190, 254, 671, 672, 735], "contigu": [74, 90, 95, 101, 102, 106, 110, 112, 114, 115, 116, 190, 254], "relev": 74, "df_h1": 74, "l1": 74, "l2": 74, "df_h2": 74, "r1": 74, "r2": 74, "r3": 74, "df_d1": 74, "df_d2": 74, "df_a1": 74, "df_a2": 74, "df_a3": 74, "disabl": [75, 129, 170, 254], "encount": [76, 158, 254, 459, 460, 518, 519, 580, 583, 595, 639, 671, 735, 930, 931, 989, 990, 1051], "least": [82, 124, 466, 560, 639, 934, 1039, 1051], "unexpect": [83, 254, 268, 438, 639, 745, 1051], "caus": [83, 91, 101, 102, 112, 132, 146, 254, 744, 846, 1051], "panic": 83, "mismatch": [85, 109], "incompat": 87, "pa": [90, 117], "chunkedarrai": [90, 182, 254, 789, 1051], "recordbatch": [90, 171, 254], "schemadefinit": [90, 92, 93, 94, 96, 108, 109, 254, 735], "schema_overrid": [90, 92, 93, 94, 95, 96, 108, 109, 171, 217, 254, 284, 735, 738, 760], "copi": [90, 91, 132, 135, 136, 171, 212, 217, 218, 231, 254, 366, 543, 639, 655, 656, 713, 735, 774, 778, 791, 847, 1014, 1027, 1032, 1033, 1051], "closest": 90, "pair": [90, 92, 93, 94, 96, 108, 109, 123, 191, 254, 693, 735, 1059], "sever": [90, 92, 93, 94, 96, 108, 109, 254, 735, 1059], "wai": [90, 92, 93, 94, 96, 108, 109, 140, 157, 171, 186, 207, 234, 254, 465, 467, 506, 516, 577, 639, 659, 670, 689, 702, 717, 719, 735, 987], "form": [90, 92, 93, 94, 96, 108, 109, 170, 196, 225, 254, 466, 639, 735, 934, 1051], "them": [90, 92, 93, 94, 96, 108, 109, 112, 146, 158, 159, 173, 180, 227, 254, 383, 414, 459, 460, 465, 578, 639, 671, 672, 677, 686, 735, 738, 744, 846, 898, 930, 931, 1051], "dimens": [90, 92, 94, 96, 108, 109, 254, 478, 639, 735, 944, 1051], "allow_copi": [91, 132], "interchang": [91, 132], "__dataframe__": 91, "convers": [91, 132, 170, 171, 196, 197, 214, 218, 254, 535, 536, 537, 540, 588, 650, 1006, 1007, 1008, 1011, 1031, 1032, 1033, 1051], "detail": [91, 103, 119, 120, 132, 254, 735, 1059], "latest": [91, 104, 113, 132, 344, 352, 374, 449, 639, 825, 833], "runtimeerror": 91, "from_panda": [91, 105], "from_arrow": 91, "effici": [91, 171, 254], "clone": [92, 93, 94, 95, 96, 135, 217, 218, 254, 655, 735, 774, 1031, 1032, 1033, 1041, 1051], "dimension": [92, 94, 96, 217, 254, 735, 1051], "infer_schema_length": [93, 96, 101, 102, 105, 112, 115, 254, 518, 735, 989], "NOT": [93, 119, 120, 447, 1058], "typic": [93, 133, 254, 324, 738, 745, 801, 1051], "clearer": 93, "load": [93, 95, 104, 113, 125, 127, 254, 650, 673, 680, 735, 1059], "_partial_": [93, 254, 735], "omit": [93, 97, 122, 124, 126, 130, 183, 197, 254, 627, 628, 738], "mani": [93, 96, 103, 146, 254, 518, 744, 846, 989, 1051], "scan": [93, 96, 101, 102, 110, 112, 113, 114, 115, 116, 117, 158, 159, 254, 664, 671, 672, 673, 680, 735], "slow": [93, 96, 101, 102, 112, 268, 309, 639, 719, 785, 1051], "partial": 93, "present": [93, 119, 124, 387, 639, 1041, 1051], "np": [94, 149, 217, 254, 550, 639, 735, 865, 869, 871, 872, 948, 1022, 1051], "ndarrai": [94, 149, 217, 254, 550, 639, 735, 789, 960, 963, 1022, 1032, 1051], "numpi": [94, 118, 138, 170, 196, 197, 214, 217, 218, 254, 459, 460, 639, 735, 865, 869, 871, 872, 930, 931, 948, 1032, 1033, 1041, 1051], "columnar": [94, 96, 170, 196, 254], "interpret": [94, 96, 101, 102, 112, 254, 735], "yield": [94, 96, 101, 102, 112, 144, 146, 222, 254, 465, 639, 735, 744, 840, 846, 1051], "conclus": [94, 96, 254, 735], "nan_to_nul": [95, 254, 735, 1051], "include_index": 95, "pd": [95, 105, 554, 639, 1033, 1034, 1051], "panda": [95, 105, 118, 158, 218, 254, 337, 338, 554, 639, 671, 735, 818, 819, 1033, 1034, 1051], "instal": [95, 101, 102, 103, 106, 110, 118, 138, 217, 218, 254, 700, 735, 1033, 1051], "nan": [95, 119, 120, 124, 132, 147, 218, 254, 314, 315, 358, 359, 367, 376, 377, 382, 389, 391, 392, 393, 398, 437, 441, 454, 459, 460, 461, 462, 556, 580, 639, 665, 735, 747, 751, 790, 848, 871, 872, 930, 931, 948, 1032, 1033, 1051, 1059], "convert": [95, 104, 105, 113, 132, 213, 214, 215, 216, 217, 220, 254, 311, 319, 348, 351, 431, 439, 473, 524, 535, 536, 537, 538, 540, 639, 735, 796, 829, 832, 915, 995, 1006, 1007, 1008, 1009, 1011, 1019, 1030, 1031, 1032, 1033, 1041, 1051], "pd_df": 95, "pd_seri": 95, "tbl": [97, 99, 102], "reconstruct": 97, "repr": [97, 124, 126], "trim": 97, "whitespac": [97, 522, 528, 534, 993, 999, 1005], "prompt": 97, "extract": [97, 320, 322, 323, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 342, 343, 346, 347, 349, 353, 354, 356, 467, 517, 518, 519, 639, 797, 798, 799, 800, 803, 804, 806, 810, 811, 812, 813, 815, 816, 817, 820, 821, 823, 824, 827, 828, 830, 834, 835, 837, 988, 989, 990], "to_init_repr": [97, 254, 1051], "truncat": [97, 158, 170, 196, 197, 214, 254, 341, 671, 690, 735, 822], "identifi": [97, 179, 185, 223, 254, 685, 708, 735], "compound": [97, 197, 254, 738], "struct": [97, 183, 200, 220, 224, 231, 254, 310, 431, 440, 471, 480, 481, 518, 531, 532, 560, 583, 584, 586, 605, 639, 696, 709, 713, 719, 735, 786, 915, 938, 946, 989, 1000, 1002, 1003, 1051], "neither": [97, 105, 198, 254, 431, 915], "source_ac": 97, "source_cha": 97, "ident": [97, 135, 136, 254, 348, 480, 481, 639, 655, 656, 735, 774, 778, 829, 946, 947, 1051], "timestamp": [97, 344, 597, 825], "tor_id": 97, "nnel_id": 97, "\u03bc": [97, 124, 158, 159, 170, 173, 196, 197, 214, 227, 254, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 483, 484, 486, 489, 490, 491, 535, 537, 588, 591, 597, 639, 671, 672, 677, 735, 738, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 834, 835, 836, 837, 1006, 1008], "asia": [97, 738, 797, 798, 830], "tokyo": [97, 738], "123456780": 97, "9876543210": 97, "56": [97, 552, 639], "59": [97, 123, 318, 334, 346, 590, 626, 627, 628, 738, 795, 815, 827], "663053": 97, "jst": [97, 738], "803065983": 97, "2055938745": 97, "38": [97, 124], "18": [97, 159, 180, 254, 292, 308, 345, 352, 355, 382, 395, 535, 537, 570, 588, 627, 639, 672, 686, 690, 735, 738, 744, 836, 1006, 1008, 1051], "050545": 97, "source_actor_id": 97, "source_channel_id": 97, "sr": 97, "to_list": [97, 159, 254, 672, 735, 981, 1051], "datatypeclass": 98, "uint32": [98, 118, 144, 254, 278, 322, 326, 330, 332, 334, 336, 339, 342, 343, 346, 353, 354, 403, 404, 416, 477, 511, 520, 523, 550, 554, 639, 738, 755, 767, 799, 803, 810, 812, 815, 817, 820, 823, 824, 827, 834, 835, 840, 870, 887, 888, 900, 961, 982, 991, 994, 1034, 1051], "regular": [98, 170, 195, 196, 227, 254, 363, 510, 511, 516, 517, 525, 526, 577, 593, 606, 610, 623, 639, 738, 981, 982, 987, 988, 996, 997], "uint64": [98, 160, 254, 378, 403, 404, 476, 639, 855, 887, 888, 942, 1051], "bigidx": 98, "read": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 146, 254, 375, 438, 630, 639, 664, 669, 692, 735, 744, 846, 1051], "batch": [99, 102, 115, 681, 735], "over": [99, 101, 102, 104, 112, 124, 133, 146, 170, 171, 195, 196, 197, 222, 233, 236, 254, 268, 309, 368, 438, 439, 471, 474, 482, 483, 484, 485, 486, 487, 489, 490, 491, 568, 583, 584, 595, 605, 615, 639, 719, 738, 744, 745, 785, 846, 948, 949, 950, 952, 956, 1051], "fetch": [99, 112, 174, 254, 655, 657, 673, 680, 735], "ideal": 99, "read_csv_batch": [99, 651], "tpch": [99, 102], "tables_scale_100": [99, 102], "lineitem": [99, 102, 103], "try_parse_d": [99, 101, 102, 112], "n_row": [100, 101, 102, 106, 110, 112, 114, 115, 116, 171, 254, 664, 735], "accept": [100, 101, 102, 104, 106, 110, 134, 145, 157, 200, 207, 221, 231, 234, 254, 261, 363, 383, 440, 465, 506, 563, 564, 565, 566, 567, 573, 576, 577, 578, 579, 585, 586, 593, 606, 607, 610, 611, 619, 622, 623, 624, 630, 639, 653, 663, 670, 696, 702, 707, 713, 717, 735, 861, 1051], "stop": [100, 101, 102, 106, 110, 112, 114, 115, 116, 322, 325, 326, 328, 329, 334, 336, 342, 343, 345, 346, 350, 352, 353, 354, 356, 483, 484, 486, 489, 490, 491, 639, 794, 796, 799, 802, 803, 805, 810, 812, 815, 817, 820, 823, 824, 826, 827, 831, 833, 834, 835, 836, 837], "textio": 101, "new_column": [101, 102, 105, 112, 192, 254], "comment_char": [101, 102, 112], "quote_char": [101, 102, 112], "skip_row": [101, 102, 112], "missing_utf8_is_empty_str": [101, 102, 112], "ignore_error": [101, 102, 109, 112], "n_thread": [101, 102], "8192": 101, "csvencod": [101, 102, 112], "low_memori": [101, 102, 110, 112, 115, 116], "skip_rows_after_head": [101, 102, 112], "row_count_nam": [101, 102, 106, 110, 112, 114, 115, 116], "row_count_offset": [101, 102, 106, 110, 112, 114, 115, 116], "sample_s": [101, 102], "eol_char": [101, 102, 112], "handler": [101, 102, 105], "g": [101, 102, 104, 105, 106, 110, 113, 114, 116, 158, 159, 173, 217, 225, 227, 254, 261, 268, 310, 341, 345, 352, 363, 471, 483, 484, 485, 486, 487, 489, 490, 491, 498, 593, 639, 671, 672, 677, 693, 735, 822, 826, 833, 961, 1032, 1051], "builtin": [101, 102, 105], "stringio": [101, 102], "fsspec": [101, 102, 106, 110, 113, 114, 116, 118], "remot": [101, 102, 106, 110], "autogener": [101, 102, 112], "column_x": [101, 102, 112], "enumer": [101, 102, 112, 171, 254], "shorter": [101, 102], "comment": [101, 102, 112], "instanc": [101, 102, 112, 124, 126, 130, 146, 152, 254, 293, 449, 483, 484, 485, 486, 487, 489, 490, 491, 583, 595, 639, 681, 715, 735, 744, 767, 846, 1051], "escap": [101, 102, 112], "dure": [101, 102, 112, 130, 146, 254, 744, 846, 1051], "would": [101, 102, 112, 278, 412, 448, 474, 573, 588, 639, 738, 754, 896, 940, 1032, 1051], "prefer": [101, 102, 104, 112, 127, 133, 146, 170, 195, 196, 236, 254, 268, 482, 639, 735, 744, 745, 846, 948, 1051, 1059], "treat": [101, 102, 112, 510, 525, 526, 981, 996, 997], "10000": [101, 171, 254, 543], "might": [101, 102, 112, 128, 134, 217, 221, 254, 268, 558, 639, 653, 702, 707, 735, 1033, 1051], "issu": [101, 102, 105, 112, 307, 308, 548, 639, 783, 784, 1020, 1051], "iso8601": [101, 102, 112], "physic": [101, 102, 173, 254, 295, 554, 639, 654, 676, 677, 735, 770, 1034, 1051], "cpu": [101, 102], "system": [101, 102], "wrongli": 101, "done": [101, 102, 112, 117, 156, 173, 254, 267, 269, 293, 465, 521, 527, 569, 639, 677, 735, 767, 992, 998, 1051], "buffer": [101, 102, 144, 170, 254, 840, 1051], "modifi": [101, 102, 112, 128, 130, 146, 163, 170, 229, 254, 279, 344, 355, 510, 516, 517, 525, 639, 744, 825, 836, 846, 943, 981, 987, 988, 996, 1010, 1012, 1013, 1051], "upper": [101, 102, 144, 158, 254, 298, 299, 383, 431, 559, 570, 588, 589, 601, 602, 627, 628, 639, 671, 735, 776, 840, 861, 920, 1038, 1051], "bound": [101, 102, 144, 158, 254, 298, 299, 300, 383, 412, 430, 431, 436, 559, 570, 588, 589, 601, 602, 627, 628, 639, 671, 735, 776, 777, 840, 861, 896, 914, 920, 1038, 1051], "lossi": [101, 102, 112], "decod": [101, 102], "usag": [101, 102, 112, 124, 126, 205, 254, 738, 969, 1051], "expens": [101, 102, 110, 112, 115, 116, 125, 127, 133, 158, 159, 170, 195, 196, 197, 222, 223, 254, 268, 639, 671, 672, 708, 735, 744, 745, 846, 1051, 1059], "aggreg": [101, 102, 110, 152, 157, 158, 159, 176, 177, 178, 181, 183, 187, 188, 189, 208, 209, 225, 228, 234, 235, 238, 240, 254, 262, 369, 380, 438, 465, 482, 483, 484, 485, 486, 487, 489, 490, 491, 560, 564, 565, 566, 567, 583, 584, 585, 586, 595, 600, 606, 607, 610, 611, 615, 623, 624, 639, 671, 672, 681, 682, 683, 684, 687, 688, 691, 703, 704, 711, 717, 718, 721, 723, 735, 858, 948, 949, 950, 952, 955, 956, 957, 1051], "nativ": [101, 106, 110, 122, 133, 170, 196, 197, 214, 236, 254, 268, 568, 639, 644, 719, 745, 1051, 1059], "parser": 101, "even": [101, 467, 471, 639, 938, 1051], "regard": [101, 580], "sens": [101, 106, 110, 114, 116, 180, 227, 254, 465, 639, 686, 735], "particular": [101, 106, 110, 114, 116, 144, 254, 840, 1051], "usernam": [101, 103, 106, 110, 114, 116], "password": [101, 103, 106, 110, 114, 116], "skip": [101, 102, 105, 110, 112, 116, 225, 254, 745, 1051], "offset": [101, 102, 106, 110, 112, 114, 115, 116, 158, 159, 206, 227, 232, 254, 316, 324, 337, 338, 341, 345, 352, 426, 504, 529, 535, 537, 588, 589, 639, 671, 672, 701, 715, 735, 793, 801, 818, 819, 822, 826, 833, 910, 975, 1000, 1006, 1008, 1051], "row_count": [101, 102, 106, 110, 112, 114, 115, 116], "sampl": [101, 102, 236, 254, 503, 639, 719, 974, 1051], "estim": [101, 102, 144, 254, 269, 361, 362, 396, 569, 639, 735, 840, 842, 843, 881, 1051], "alloc": [101, 102, 144, 190, 254, 840, 1051], "lazili": [101, 102, 112, 113, 114, 115, 116, 440, 639], "glob": [101, 102, 112, 114, 115, 116], "continu": [101, 110, 310, 471, 503, 639, 786, 938, 974, 1051], "benchmark": [101, 110], "50000": 102, "batchedcsvread": [102, 650], "upon": 102, "creation": 102, "gather": 102, "next_batch": 102, "big": 102, "interest": 102, "seen_group": 102, "big_fil": 102, "df_current_batch": 102, "concat": [102, 773, 927, 1051], "partition_df": 102, "partition_bi": [102, 171, 254], "as_dict": [102, 185, 254], "fh": 102, "write_csv": [102, 112, 254], "els": [102, 630], "partition_on": 103, "partition_rang": 103, "partition_num": 103, "dbreadengin": 103, "raw": 103, "connectorx": [103, 118], "driver": 103, "snowflak": 103, "warehous": 103, "role": 103, "transfer": 103, "document": [103, 105, 348, 351, 519, 535, 536, 537, 540, 829, 832, 990, 1006, 1007, 1008, 1011], "redshift": 103, "mysql": 103, "mariadb": 103, "clickhous": 103, "oracl": 103, "bigqueri": 103, "pleas": [103, 158, 254, 671, 735], "doc": [103, 138, 254], "github": 103, "sfu": 103, "connector": 103, "destin": 103, "small": [103, 123, 174, 254, 345, 664, 735, 1059], "still": 103, "develop": [103, 124, 126], "explicitli": [103, 122, 124, 130, 440, 622, 639, 649], "test_tabl": 103, "compani": 103, "testdb": 103, "public": [103, 254, 639, 650, 735, 1051], "myrol": 103, "delta_table_opt": [104, 113], "root": [104, 113, 296, 395, 439, 450, 469, 507, 547, 638, 639, 771, 977, 1051], "absolut": [104, 113, 119, 120, 260, 360, 361, 362, 639, 740, 841, 842, 843, 1051], "sinc": [104, 113, 134, 221, 254, 292, 325, 535, 537, 570, 588, 597, 616, 627, 639, 653, 702, 707, 735, 744, 802, 1006, 1008, 1051], "avoid": [104, 196, 254, 263, 639], "year": [104, 113, 158, 159, 173, 227, 254, 328, 329, 341, 342, 345, 352, 353, 483, 484, 485, 486, 487, 489, 490, 491, 587, 588, 590, 639, 671, 672, 677, 735, 805, 806, 822, 823, 826, 833, 834], "2021": [104, 113, 139, 156, 158, 227, 254, 535, 604, 671, 735, 738, 797, 798, 806, 830, 877, 1006, 1051], "aw": [104, 113], "googl": [104, 113], "service_account": [104, 113], "service_account_json_absolute_path": [104, 113], "az": [104, 113], "adl": [104, 113], "abf": [104, 113], "azure_storage_account_nam": [104, 113], "azure_storage_account_kei": [104, 113], "without_fil": [104, 113], "track": [104, 113, 133, 254, 431, 1058], "sheet_id": 105, "sheet_nam": 105, "xlsx2csv_option": 105, "read_csv_opt": 105, "noreturn": 105, "xlsx2csv": [105, 118], "read_csv": [105, 112], "nor": [105, 198, 254], "skip_empty_lin": 105, "my": [105, 117, 541, 1012], "datasheet": 105, "correct": [105, 361, 362, 396, 488, 503, 639, 681, 735, 842, 843, 881, 954, 974, 1051], "look": [105, 286, 431, 761], "whole": [105, 505, 506, 516, 639, 719, 735, 987], "With": [105, 133, 169, 254, 268, 483, 484, 485, 486, 487, 489, 490, 491, 639, 745, 880, 1051], "1000": [105, 144, 216, 254, 330, 331, 543, 811, 1030, 1051, 1059], "spreadsheet": [105, 187, 254], "xl": 105, "xlsm": 105, "xlsb": 105, "odf": 105, "od": 105, "odt": 105, "memory_map": [106, 110, 114], "v2": [106, 114], "greatli": [106, 114], "repeat": [106, 114, 310, 471, 475, 477, 613, 631, 639], "give": [106, 110, 114, 115, 116, 179, 223, 254, 325, 396, 477, 556, 639, 650, 685, 708, 735, 802, 881, 1051], "That": [106, 681, 735], "filenam": 106, "my_fil": 106, "write_ipc": [106, 254], "read_ndjson": 108, "becaus": [109, 133, 144, 158, 174, 225, 236, 254, 409, 493, 499, 588, 639, 671, 719, 735, 745, 840, 893, 1051], "parallelstrategi": [110, 116], "use_statist": [110, 116], "awar": [110, 170, 196, 197, 214, 254, 535, 537, 1006, 1008], "stabl": [110, 134, 138, 198, 221, 254, 435, 639, 653, 685, 702, 707, 735], "row_group": [110, 116], "read_tabl": 110, "with_column_nam": 112, "push": [112, 114, 115, 116, 117], "down": [112, 114, 115, 116, 117, 372, 639, 852, 1051], "therebi": [112, 114, 115, 116], "potenti": [112, 114, 115, 116, 170, 195, 197, 254], "overhead": [112, 114, 115, 116], "realloc": [112, 114, 115, 146, 254, 744, 846, 1051], "headerless": 112, "unlik": [112, 158, 254, 671, 735], "fewer": [112, 471, 639, 938, 1051], "my_long_fil": 112, "doesn": [112, 158, 254, 357, 639, 671, 735, 839, 1041, 1051], "thing": [112, 594, 603], "less": [112, 173, 254, 398, 437, 521, 527, 532, 543, 639, 677, 735, 992, 998, 1003, 1014, 1059], "breezah": 112, "languag": [112, 158, 159, 173, 227, 254, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 639, 671, 672, 677, 735, 822, 826, 833], "hard": [112, 681, 735], "mydf": 112, "lambda": [112, 133, 152, 186, 236, 254, 268, 360, 361, 362, 431, 438, 439, 482, 568, 583, 584, 595, 605, 615, 639, 681, 689, 719, 735, 745, 841, 842, 843, 915, 1051], "lower": [112, 158, 189, 246, 254, 298, 300, 383, 436, 439, 472, 476, 487, 570, 588, 589, 601, 602, 614, 627, 628, 639, 664, 671, 691, 729, 735, 777, 861, 920, 939, 942, 953, 1038, 1051], "simpli": [112, 465, 583, 595, 639], "idx": [112, 158, 171, 254, 431, 671, 735, 915, 963, 1051], "uint16": [112, 307, 308, 548, 639, 738, 783, 784, 1020, 1051], "u16": [112, 124, 1059], "eu": 113, "central": [113, 396, 503, 639, 881, 974, 1051], "allow_pyarrow_filt": 117, "comparison": 117, "dset": 117, "folder": 117, "05": [117, 119, 120, 124, 173, 227, 254, 318, 319, 323, 344, 346, 348, 351, 588, 677, 735, 738, 795, 796, 797, 798, 799, 800, 825, 826, 829, 830, 832, 833, 835], "04": [117, 158, 227, 254, 318, 319, 323, 327, 334, 335, 336, 337, 338, 344, 345, 346, 347, 348, 351, 353, 355, 535, 588, 591, 671, 735, 738, 796, 800, 804, 810, 812, 815, 816, 817, 818, 819, 820, 824, 825, 827, 828, 829, 832, 834, 835, 836, 1006], "stdout": [118, 130, 156, 254, 451], "17": [118, 124, 234, 492, 597, 616, 627, 639, 717, 779, 826, 1051, 1059], "platform": 118, "linux": 118, "90": [118, 538, 1009], "wsl2": 118, "x86_64": 118, "glibc2": 118, "main": 118, "apr": 118, "14": [118, 124, 133, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 316, 329, 382, 474, 627, 639, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 738, 793, 826], "44": [118, 180, 254, 313, 639, 686, 735], "51": 118, "gcc": 118, "matplotlib": [118, 690, 700, 735], "check_dtyp": [119, 120], "check_exact": [119, 120], "rtol": [119, 120], "1e": [119, 120], "atol": [119, 120], "08": [119, 120, 124, 159, 254, 318, 345, 535, 588, 591, 672, 735, 738, 826, 833, 1006], "nans_compare_equ": [119, 120], "check_column_ord": 119, "check_row_ord": 119, "assertionerror": [119, 120], "compar": [119, 120, 153, 254, 358, 359, 376, 377, 398, 437, 461, 462, 639, 961, 1051], "exactli": [119, 120, 123, 124, 126, 531, 532, 969, 1002, 1003, 1051], "toler": [119, 120, 173, 254, 677, 735], "inexact": [119, 120], "assert": [119, 120, 122, 124, 126, 159, 254, 650, 672, 735, 738, 854, 1051], "irrespect": 119, "unsort": 119, "check_nam": 120, "s1": [120, 152, 254, 880, 915, 1033, 1042, 1051], "searchstrategi": [121, 123, 124, 126], "null_prob": [121, 124, 126], "percentag": [121, 124, 126, 466, 639, 934, 1051], "chanc": [121, 124, 126, 1059], "independ": [121, 122, 124, 126], "flag": [121, 254, 495, 510, 516, 517, 525, 639, 662, 681, 735, 964, 981, 987, 988, 996, 1051], "hypothesi": [121, 122, 123, 124, 125, 126, 1059], "sampled_from": [121, 1059], "unique_small_int": 121, "ccy": [121, 1059], "gbp": [121, 1059], "eur": [121, 139, 156, 254, 1059], "jpy": [121, 1059], "min_col": [122, 124], "max_col": [122, 124], "standalon": [122, 124], "mincol": 122, "assign": [122, 158, 254, 310, 431, 465, 471, 474, 531, 532, 639, 671, 735, 786, 915, 921, 938, 940, 1002, 1003, 1051], "exact": [122, 124, 126, 205, 254, 535, 536, 537, 556, 639, 1006, 1007, 1008], "especi": [122, 481, 639, 947, 1051], "test_unique_xyz": 122, "assert_someth": 122, "punctuat": 122, "test_special_char_colname_init": 122, "inner_dtyp": [123, 126], "select_from": [123, 126], "min_siz": [123, 124, 126, 1059], "max_siz": [123, 124, 126, 1059], "anoth": [123, 157, 254, 309, 317, 430, 444, 447, 639, 670, 714, 735, 785, 794, 846, 914, 961, 1051], "randomli": 123, "innermost": 123, "2x": 123, "lst": 123, "11330": 123, "24030": 123, "116": 123, "zz": [123, 126], "uint8_pair": [123, 1059], "uint": [123, 1059], "zip": [123, 1059], "131": 123, "176": 123, "149": [123, 1059], "max_data_s": [124, 126], "include_col": 124, "allow_infin": [124, 126], "allowed_dtyp": [124, 126, 1059], "excluded_dtyp": [124, 126], "describ": [124, 156, 254, 1051], "desir": [124, 431, 588, 589, 915], "n_chunk": [124, 126, 254, 744, 846, 1051], "randomis": 124, "onto": 124, "pct": 124, "preced": [124, 738], "disallow": [124, 126], "inf": [124, 126, 275, 310, 385, 388, 471, 556, 639, 751, 786, 857, 865, 869, 920, 934, 938, 1038, 1051], "exclud": [124, 126, 305, 308, 383, 577, 639, 861, 877, 1051], "deploi": [124, 126], "characterist": [124, 126], "concret": [124, 126], "test_repr": 124, "isinst": [124, 126, 254], "0x11f561580": 124, "known": [124, 431, 719, 915], "0565": 124, "34715": 124, "5844": 124, "33": [124, 180, 254, 492, 577, 639, 686, 735, 953, 1051], "076854": 124, "3382": 124, "48662": 124, "7540": 124, "29": [124, 158, 159, 173, 227, 254, 316, 337, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 639, 671, 672, 677, 735, 793, 818, 822, 826, 833], "836271": 124, "4063": 124, "06": [124, 227, 254, 318, 329, 343, 344, 356, 738, 825, 826, 835], "39092": 124, "1889": 124, "13": [124, 135, 136, 147, 148, 155, 159, 164, 174, 182, 231, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 263, 482, 538, 578, 583, 586, 595, 624, 629, 639, 655, 656, 665, 666, 672, 679, 713, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 735, 745, 826, 833, 834, 1009, 1051], "41": [124, 490, 639, 1059], "874455": 124, "15836": 124, "1755e": 124, "575050513": 124, "profil": [125, 127, 735], "balanc": [125, 127, 1059], "set_environ": 125, "polars_hypothesis_profil": [125, 127], "1500": 125, "constructor": 126, "normal": [126, 158, 254, 357, 396, 503, 639, 671, 735, 839, 881, 974, 1051], "test_repr_is_valid_str": 126, "experi": 126, "create_list_strategi": [126, 1059], "polars_max_thread": 128, "behind": 128, "lock": 128, "reason": 128, "pyspark": 128, "udf": [128, 133, 186, 236, 254, 268, 467, 568, 639, 689, 719, 735, 745, 1051], "recommend": [128, 170, 186, 254, 588, 738], "initi": [130, 583, 595, 630], "whatev": 130, "were": 130, "enter": 130, "advantag": [130, 186, 254], "initialis": [130, 735, 1058], "set_": 130, "set_verbos": 130, "do_various_th": 130, "restor": 130, "cleaner": 130, "breviti": 130, "vein": 130, "durat": [130, 173, 227, 254, 316, 323, 324, 327, 331, 333, 335, 340, 347, 352, 355, 554, 588, 589, 627, 628, 639, 677, 735, 738, 793, 800, 801, 804, 811, 813, 816, 821, 828, 833, 836, 1034, 1051], "set_ascii_t": 130, "write_ascii_frame_to_stdout": 130, "sy": 130, "nan_as_nul": 132, "_pyarrowdatafram": 132, "nullabl": 132, "extens": [132, 218, 254, 1033, 1051], "propag": [132, 177, 209, 254, 359, 459, 460, 462, 639, 930, 931, 1051], "inference_s": [133, 254], "256": [133, 254, 934, 1051], "much": [133, 225, 236, 254, 268, 309, 430, 568, 639, 719, 745, 785, 914, 1051], "almost": [133, 236, 254, 535, 536, 537, 588, 745, 1006, 1007, 1008, 1051], "_significantly_": [133, 236, 254, 745, 1051], "intens": [133, 236, 254, 465, 639, 745, 1051], "forc": [133, 173, 236, 254, 676, 677, 719, 735, 745, 1051], "materi": [133, 236, 254, 690, 719, 735, 738, 745, 1051], "parallelis": [133, 236, 254, 745, 1051], "optimis": [133, 197, 236, 254, 735, 745, 962, 963, 1051], "achiev": [133, 236, 254, 268, 639, 745, 1051], "best": [133, 236, 254, 268, 639, 745, 1051], "tri": [133, 254], "arbitrarili": [133, 254], "rearrang": [133, 254], "transform": [133, 254, 438, 539, 541, 542, 639], "preserv": [133, 157, 217, 218, 254, 500, 639, 971, 1033, 1051], "lru_cach": [133, 254, 268, 639, 745, 1051], "magnitud": [133, 254, 268, 639, 745, 1051], "column_1": [133, 222, 254], "better": [133, 217, 236, 254, 268, 560, 639, 719, 962, 963, 1051], "scalar": [133, 169, 195, 254, 494, 568, 604, 639, 880, 960, 1051], "k": [134, 197, 221, 254, 291, 295, 396, 555, 639, 653, 707, 735, 766, 770, 881, 1035, 1051], "intoexpr": [134, 157, 158, 159, 200, 207, 221, 231, 234, 254, 267, 383, 407, 421, 422, 423, 424, 465, 497, 506, 564, 565, 566, 567, 570, 573, 576, 578, 579, 583, 585, 586, 588, 589, 595, 601, 602, 606, 607, 610, 611, 616, 619, 622, 623, 624, 627, 628, 630, 639, 653, 667, 670, 671, 672, 696, 702, 707, 713, 717, 735, 861, 1051], "nulls_last": [134, 207, 221, 254, 278, 505, 639, 653, 702, 707, 735, 754, 1051], "smallest": [134, 221, 254, 291, 639, 653, 707, 735, 766, 1051], "largest": [134, 158, 159, 173, 221, 227, 254, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 555, 639, 653, 671, 672, 677, 707, 735, 822, 826, 833, 1035, 1051], "last": [134, 161, 173, 175, 187, 197, 207, 210, 221, 223, 248, 254, 278, 309, 322, 337, 342, 353, 395, 412, 429, 469, 505, 532, 547, 549, 588, 625, 639, 653, 677, 702, 705, 707, 708, 731, 735, 738, 754, 785, 799, 818, 823, 834, 856, 883, 896, 913, 1003, 1021, 1051], "wors": [134, 221, 254, 653, 702, 707, 735], "search": [134, 173, 221, 254, 653, 677, 702, 707, 735], "top_k": [134, 254, 291, 639, 653, 735, 766, 1051], "greater": [135, 173, 254, 376, 377, 503, 532, 639, 677, 735, 974, 1003, 1051], "cheap": [135, 136, 254, 655, 656, 735, 744, 774, 778, 1051], "deepcopi": [135, 136, 254, 655, 656, 735, 774, 778, 1051], "clear": [136, 254, 656, 735, 778, 1051], "properti": [137, 143, 151, 162, 199, 202, 230, 254, 658, 661, 695, 712, 735, 738, 1059], "appl": [137, 163, 172, 191, 193, 213, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 479, 514, 533, 639, 676, 693, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 735, 985, 1004], "banana": [137, 213, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 479, 639, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730], "pairwis": [138, 254], "pearson": [138, 254, 396, 503, 580, 639, 881, 974, 1051], "correl": [138, 254, 580, 617], "coeffici": [138, 254, 503, 639, 974, 1051], "corrcoef": [138, 254], "percentil": [139, 254, 787, 1051], "summari": [139, 254, 787, 1051], "glimps": [139, 161, 254], "usd": [139, 156, 254, 1059], "2020": [139, 156, 159, 254, 319, 323, 324, 327, 330, 331, 333, 335, 340, 344, 347, 348, 351, 352, 535, 536, 537, 672, 735, 738, 796, 800, 801, 804, 811, 813, 816, 821, 825, 828, 829, 832, 833, 1006, 1007, 1008], "null_count": [139, 142, 254, 309, 639, 735, 785, 787, 1051], "266667": [139, 254], "666667": [139, 177, 228, 242, 254, 360, 639, 711, 725, 735], "std": [139, 254, 482, 489, 639, 735, 787, 955, 1051], "101514": [139, 254], "707107": [139, 254, 361, 489, 639, 842, 1051], "57735": [139, 254], "median": [139, 187, 254, 368, 485, 639, 714, 735, 787, 951, 1051], "more_column": [140, 145, 201, 224, 254, 363, 593, 639, 659, 663, 697, 709, 735], "Or": [140, 157, 158, 159, 173, 207, 227, 234, 254, 465, 506, 577, 630, 639, 659, 670, 671, 672, 677, 702, 717, 735], "subset": [142, 183, 223, 254, 660, 708, 735], "snippet": [142, 254, 660, 735], "all_horizont": [142, 254, 564, 660, 735], "is_nul": [142, 254, 639, 660, 735, 1051], "sizeunit": [144, 254, 840, 1051], "heap": [144, 254, 840, 1051], "its": [144, 254, 318, 345, 352, 506, 639, 795, 826, 833, 840, 1051], "bitmap": [144, 254, 840, 1051], "therefor": [144, 254, 630, 840, 1051], "structarrai": [144, 254, 840, 1051], "constant": [144, 159, 254, 316, 366, 639, 672, 735, 793, 840, 847, 1051], "unchang": [144, 254, 554, 639, 681, 719, 735, 840, 1034, 1051], "capac": [144, 205, 254, 840, 969, 1051], "ffi": [144, 254, 840, 1051], "kb": [144, 254, 840, 1051], "mb": [144, 254, 840, 1051], "gb": [144, 254, 840, 1051], "tb": [144, 254, 840, 1051], "revers": [144, 254, 304, 305, 306, 307, 308, 439, 469, 547, 639, 735, 781, 782, 783, 784, 1051], "1_000_000": [144, 254, 840, 1051], "25888898": [144, 254], "689577102661133": [144, 254], "long": [145, 179, 225, 254, 663, 685, 735], "letter": [145, 239, 248, 254, 363, 517, 593, 639, 663, 722, 731, 735, 738, 988], "onlin": [146, 254, 744, 846, 1051], "rerun": [146, 254, 744, 846, 1051], "conveni": [146, 254, 744, 846, 1051], "evalu": [147, 149, 173, 254, 265, 279, 309, 381, 401, 402, 431, 440, 464, 564, 566, 570, 574, 588, 589, 592, 601, 602, 613, 616, 622, 627, 628, 630, 631, 639, 667, 674, 676, 677, 735, 755, 785, 885, 886, 1042, 1051], "Not": [147, 254, 389, 391, 440, 639, 665, 735], "To": [147, 254, 314, 315, 341, 368, 510, 516, 517, 525, 541, 623, 639, 665, 735, 822, 981, 987, 988, 996, 1012, 1032, 1051], "fillnullstrategi": [148, 254, 368, 639, 666, 735, 849, 1051], "matches_supertyp": [148, 254, 666, 735], "forward": [148, 173, 254, 337, 368, 374, 639, 666, 677, 735, 818, 849, 1051], "consecut": [148, 254, 285, 368, 374, 509, 639, 666, 735, 849, 980, 1051], "fill_nan": [148, 254, 639, 735, 1051], "OR": [149, 254, 566, 567, 667, 735, 738], "reduct": [152, 254], "supercast": [152, 254], "parent": [152, 254], "rule": [152, 254], "arithmet": [152, 254], "zip_with": [152, 254, 1051], "foo11": [152, 254], "bar22": [152, 254], "null_equ": [153, 254, 961, 1051], "retriev": [154, 254, 403, 404, 544, 887, 888, 1015], "return_as_str": [156, 254, 451], "preview": [156, 254], "wide": [156, 179, 225, 254, 685, 735], "nice": [156, 254], "few": [156, 254], "rather": [156, 173, 254, 451, 481, 543, 639, 677, 735, 947, 1014, 1051], "head": [156, 175, 210, 254, 267, 400, 639, 680, 735, 883, 1021, 1051], "tail": [156, 161, 254, 267, 503, 639, 735, 856, 974, 1051], "more_bi": [157, 185, 207, 254, 506, 639, 670, 702, 735], "consist": [157, 185, 254, 535, 670, 735, 744, 846, 1006, 1051], "regardless": [157, 254, 519, 990], "agg": [157, 158, 159, 254, 262, 268, 369, 371, 505, 506, 550, 562, 581, 639, 657, 662, 664, 670, 671, 672, 690, 700, 735, 738], "index_column": [158, 159, 254, 671, 672, 735], "timedelta": [158, 159, 227, 254, 322, 325, 326, 329, 334, 336, 341, 342, 343, 345, 346, 350, 352, 353, 354, 356, 483, 484, 485, 486, 487, 489, 490, 491, 588, 589, 627, 628, 639, 671, 672, 735, 738, 807, 809, 814, 822, 826, 833, 930, 931, 1051], "period": [158, 159, 203, 204, 254, 345, 352, 360, 361, 362, 425, 466, 496, 497, 588, 589, 627, 628, 639, 671, 672, 698, 699, 735, 826, 833, 841, 842, 843, 909, 934, 966, 967, 1051], "include_boundari": [158, 254, 671, 735], "closedinterv": [158, 159, 254, 383, 483, 484, 485, 486, 487, 489, 490, 491, 588, 589, 627, 628, 639, 671, 672, 735, 861, 1051], "start_bi": [158, 254, 671, 735], "startbi": [158, 254, 671, 735], "window": [158, 159, 254, 309, 345, 352, 360, 361, 362, 465, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 578, 617, 618, 639, 671, 672, 735, 785, 826, 833, 841, 842, 843, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 1051], "check_sort": [158, 159, 254, 671, 672, 735], "dynamicgroupbi": [158, 254], "groupbi": [158, 159, 183, 254, 262, 268, 309, 369, 371, 409, 465, 505, 506, 550, 562, 568, 581, 639, 657, 662, 664, 671, 672, 690, 700, 735, 738, 785, 893, 1051], "member": [158, 254, 671, 735, 868, 1051], "seen": [158, 254, 285, 374, 639, 671, 735], "roll": [158, 159, 254, 337, 338, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 578, 617, 618, 639, 671, 672, 735, 818, 819, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 1051], "slot": [158, 254, 309, 312, 408, 639, 671, 735, 785, 788, 892, 1051], "interv": [158, 159, 227, 254, 310, 328, 345, 346, 352, 383, 471, 483, 484, 485, 486, 487, 489, 490, 491, 588, 589, 627, 628, 639, 671, 672, 735, 786, 799, 802, 803, 805, 810, 812, 815, 817, 820, 823, 824, 826, 827, 831, 833, 834, 835, 837, 861, 938, 1051], "1n": [158, 159, 173, 227, 254, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 639, 671, 672, 677, 735, 822, 826, 833], "nanosecond": [158, 159, 173, 227, 254, 341, 345, 346, 352, 483, 484, 485, 486, 487, 489, 490, 491, 591, 639, 671, 672, 677, 735, 822, 826, 827, 833], "1u": [158, 159, 173, 227, 254, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 639, 671, 672, 677, 735, 822, 826, 833], "microsecond": [158, 159, 170, 173, 196, 197, 214, 227, 254, 341, 345, 346, 352, 483, 484, 485, 486, 487, 489, 490, 491, 590, 591, 626, 639, 671, 672, 677, 690, 735, 738, 822, 826, 833], "1m": [158, 159, 173, 227, 254, 330, 331, 333, 340, 341, 345, 347, 352, 483, 484, 485, 486, 487, 489, 490, 491, 639, 671, 672, 677, 735, 811, 813, 821, 822, 826, 828, 833], "millisecond": [158, 159, 173, 227, 254, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 591, 639, 671, 672, 677, 735, 738, 822, 826, 833], "minut": [158, 159, 173, 227, 254, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 590, 591, 626, 627, 639, 671, 672, 677, 735, 738, 822, 826, 833], "1h": [158, 159, 173, 227, 254, 324, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 627, 628, 639, 671, 672, 677, 735, 801, 803, 822, 826, 833], "hour": [158, 159, 173, 227, 254, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 588, 590, 591, 626, 627, 639, 671, 672, 677, 735, 738, 822, 826, 833], "1d": [158, 159, 173, 227, 254, 317, 327, 335, 341, 345, 352, 355, 483, 484, 485, 486, 487, 489, 490, 491, 588, 589, 604, 639, 671, 672, 677, 735, 738, 794, 802, 804, 807, 808, 809, 814, 816, 822, 826, 831, 833, 835, 836], "1w": [158, 159, 173, 227, 254, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 639, 671, 672, 677, 735, 822, 826, 833], "week": [158, 159, 173, 227, 254, 341, 345, 352, 354, 483, 484, 485, 486, 487, 489, 490, 491, 591, 639, 671, 672, 677, 735, 738, 822, 826, 833, 835], "1mo": [158, 159, 173, 227, 254, 319, 323, 337, 338, 341, 344, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 588, 589, 639, 671, 672, 677, 735, 796, 800, 817, 818, 819, 822, 823, 824, 825, 826, 833, 834], "month": [158, 159, 173, 227, 254, 322, 337, 338, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 587, 588, 589, 590, 639, 671, 672, 677, 735, 799, 818, 819, 822, 826, 833], "1q": [158, 159, 173, 227, 254, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 639, 671, 672, 677, 735, 822, 826, 833], "quarter": [158, 159, 173, 227, 254, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 639, 671, 672, 677, 735, 822, 826, 833], "1y": [158, 159, 173, 227, 254, 328, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 588, 639, 671, 672, 677, 735, 805, 822, 826, 833, 837], "1i": [158, 159, 173, 227, 254, 341, 483, 484, 485, 486, 487, 489, 490, 491, 639, 671, 672, 677, 735, 822], "3d12h4m25": [158, 159, 173, 227, 254, 345, 352, 671, 672, 677, 735, 826, 833], "suffix": [158, 159, 172, 173, 200, 227, 231, 234, 254, 263, 289, 341, 345, 352, 389, 391, 392, 393, 439, 465, 469, 479, 483, 484, 485, 486, 487, 489, 490, 491, 514, 639, 671, 672, 676, 677, 696, 713, 714, 717, 735, 738, 764, 822, 826, 833, 985], "_satur": [158, 159, 173, 227, 254, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 588, 589, 639, 671, 672, 677, 735, 822, 826, 833], "satur": [158, 159, 173, 227, 254, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 639, 671, 672, 677, 735, 822, 826, 833], "28": [158, 159, 173, 213, 227, 254, 261, 341, 344, 345, 352, 355, 483, 484, 485, 486, 487, 489, 490, 491, 588, 639, 671, 672, 677, 735, 822, 825, 826, 833, 836, 1059], "correspond": [158, 159, 173, 217, 227, 254, 329, 341, 345, 352, 474, 481, 483, 484, 485, 486, 487, 489, 490, 491, 639, 671, 672, 677, 735, 806, 822, 826, 833, 940, 947, 1051], "due": [158, 159, 173, 197, 227, 254, 263, 293, 324, 341, 345, 352, 395, 469, 483, 484, 485, 486, 487, 489, 490, 491, 493, 499, 547, 639, 671, 672, 677, 735, 767, 801, 822, 826, 833, 1051], "daylight": [158, 159, 173, 227, 254, 316, 324, 341, 345, 352, 483, 484, 485, 486, 487, 489, 490, 491, 639, 671, 672, 677, 735, 801, 822, 826, 833], "10i": [158, 159, 254, 671, 672, 735], "ascend": [158, 159, 254, 671, 672, 735], "dynam": [158, 254, 431, 483, 484, 485, 486, 487, 489, 490, 491, 639, 671, 735, 915], "matter": [158, 159, 170, 196, 197, 214, 254, 671, 672, 735], "_lower_bound": [158, 254, 671, 735], "_upper_bound": [158, 254, 671, 735], "harder": [158, 254, 671, 735], "tempor": [158, 159, 170, 196, 197, 214, 254, 383, 483, 484, 485, 486, 487, 489, 490, 491, 639, 650, 671, 672, 735, 738, 861, 877, 1051], "inclus": [158, 159, 254, 383, 483, 484, 485, 486, 487, 489, 490, 491, 530, 531, 570, 588, 589, 601, 602, 627, 628, 639, 671, 672, 735, 861, 1001, 1002, 1051], "datapoint": [158, 254, 671, 735], "mondai": [158, 254, 352, 354, 671, 735, 833, 835], "tuesdai": [158, 254, 671, 735], "wednesdai": [158, 254, 671, 735], "thursdai": [158, 254, 671, 735], "fridai": [158, 254, 671, 735], "saturdai": [158, 254, 671, 735], "sundai": [158, 254, 354, 671, 735, 835], "weekli": [158, 254, 352, 671, 735, 833], "sorted": [158, 159, 254, 671, 672, 735], "metadata": [158, 159, 254, 671, 672, 735], "verifi": [158, 159, 254, 671, 672, 735], "incorrectli": [158, 159, 254, 431, 671, 672, 735], "incorrect": [158, 159, 254, 355, 495, 639, 671, 672, 719, 735, 836, 964, 1051], "re": [158, 217, 254, 337, 338, 671, 735, 818, 819, 1058], "come": [158, 254, 337, 338, 396, 639, 651, 671, 734, 735, 818, 819, 881, 1051], "set_index": [158, 254, 671, 735], "resampl": [158, 254, 671, 735], "reset_index": [158, 254, 671, 735], "though": [158, 254, 671, 735], "evenli": [158, 254, 471, 639, 671, 735, 938, 1051], "upsampl": [158, 254, 671, 735], "date_rang": [158, 227, 254, 317, 319, 322, 323, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 350, 352, 353, 354, 355, 356, 483, 484, 486, 489, 490, 491, 639, 671, 735, 793, 794, 796, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 833, 834, 835, 836, 837], "30m": [158, 254, 345, 352, 671, 735, 826, 833], "time_min": [158, 254, 671, 735], "time_max": [158, 254, 671, 735], "23": [158, 159, 254, 318, 322, 326, 342, 345, 354, 483, 484, 486, 489, 490, 491, 590, 626, 627, 628, 639, 671, 672, 735, 738, 795, 803, 1059], "boundari": [158, 254, 298, 299, 300, 352, 639, 671, 735, 775, 776, 777, 833, 857, 1051], "time_count": [158, 254, 671, 735], "_lower_boundari": [158, 254, 671, 735], "_upper_boundari": [158, 254, 671, 735], "lower_bound": [158, 254, 298, 300, 383, 639, 671, 735, 775, 777, 861, 1038, 1051], "upper_bound": [158, 254, 298, 299, 383, 431, 639, 671, 735, 775, 776, 861, 920, 1051], "time_agg_list": [158, 254, 671, 735], "int_rang": [158, 225, 236, 254, 570, 671, 719, 735], "2i": [158, 254, 671, 735], "3i": [158, 254, 671, 735], "a_agg_list": [158, 254, 671, 735], "rollinggroupbi": [159, 254], "dynamic_groupbi": [159, 254, 672, 735], "groupby_dynam": [159, 254, 672, 735], "t_0": [159, 254, 483, 484, 485, 486, 487, 489, 490, 491, 639, 672, 735], "t_1": [159, 254, 483, 484, 485, 486, 487, 489, 490, 491, 639, 672, 735], "t_n": [159, 254, 483, 484, 485, 486, 487, 489, 490, 491, 639, 672, 735], "19": [159, 173, 254, 345, 484, 486, 538, 639, 672, 677, 735, 826, 833, 1009], "43": [159, 254, 308, 490, 639, 672, 735], "strptime": [159, 254, 344, 672, 735, 825], "set_sort": [159, 173, 227, 254, 639, 672, 677, 735, 1051], "2d": [159, 217, 254, 604, 672, 735, 793, 799], "sum_a": [159, 254, 672, 735], "min_a": [159, 254, 672, 735], "max_a": [159, 254, 672, 735], "seed": [160, 198, 254, 378, 474, 493, 499, 639, 855, 940, 959, 970, 1051], "seed_1": [160, 254, 378, 639, 855, 1051], "seed_2": [160, 254, 378, 639, 855, 1051], "seed_3": [160, 254, 378, 639, 855, 1051], "hash": [160, 254, 639, 1051], "u64": [160, 254, 378, 476, 639, 690, 735, 855, 1051], "10783150408545073287": [160, 254], "1438741209321515184": [160, 254], "10047419486152048166": [160, 254], "2047317070637311557": [160, 254], "ab": [161, 175, 210, 231, 254, 544, 545, 639, 713, 735, 856, 883, 1021, 1051], "grown": [163, 254], "intermedi": [165, 254, 675, 735, 1059], "linear": [165, 189, 246, 254, 382, 405, 443, 472, 487, 578, 579, 614, 639, 675, 691, 729, 735, 860, 889, 939, 953, 1051], "mask": [166, 168, 254, 287, 384, 386, 394, 510, 512, 639, 762, 850, 861, 863, 866, 878, 935, 936, 962, 981, 983, 1042, 1051], "visual": [166, 168, 254], "buffer_s": [170, 254], "intern": [170, 254], "veri": [170, 222, 254, 268, 639, 656, 719, 735, 778, 1051], "fit": [170, 205, 225, 254, 498, 616, 639, 968, 969, 1051], "signific": [170, 254, 268, 639], "4x": [170, 254], "materialis": [170, 171, 195, 196, 197, 254], "rows_by_kei": [170, 196, 254], "iter_row": [171, 195, 196, 197, 254], "17_500": [171, 254], "klmnoopqrstuvwxyz": [171, 254], "__name__": [171, 254], "7500": [171, 254], "15_000": [171, 254], "record_batch": [171, 254], "to_arrow": [171, 254, 1051], "to_batch": [171, 254], "date32": [171, 254], "large_str": [171, 212, 218, 254], "15000": [171, 254], "2500": [171, 254], "left_on": [172, 173, 254, 676, 677, 735], "right_on": [172, 173, 254, 676, 677, 735], "_right": [172, 173, 254, 676, 677, 735], "joinvalid": [172, 254, 676, 735], "semi": [172, 254, 676, 735], "anti": [172, 254, 676, 719, 735, 962, 963, 1051], "cross": [172, 254, 352, 676, 735, 833], "many_to_mani": [172, 254, 676, 735], "one_to_on": [172, 254, 676, 735], "one_to_mani": [172, 254, 676, 735], "many_to_on": [172, 254, 676, 735], "join_asof": [172, 254, 676, 735], "stringcach": [172, 254, 650], "other_df": [172, 254], "by_left": [173, 254, 677, 735], "by_right": [173, 254, 677, 735], "asofjoinstrategi": [173, 254, 677, 735], "allow_parallel": [173, 254, 676, 677, 735], "force_parallel": [173, 254, 676, 677, 735], "asof": [173, 254, 677, 735], "asof_join": [173, 254], "distanc": [173, 254, 677, 735, 857, 1051], "plan": [173, 174, 254, 654, 662, 669, 676, 677, 692, 700, 716, 735], "gdp": [173, 254, 677, 735], "2016": [173, 254, 677, 735], "2017": [173, 254, 677, 735], "2018": [173, 254, 344, 677, 735, 825], "2019": [173, 254, 677, 735], "record": [173, 217, 254, 677, 735], "jan": [173, 254, 677, 735], "1st": [173, 254, 588, 677, 735], "4164": [173, 254, 677, 735], "4411": [173, 254, 677, 735], "4566": [173, 254, 677, 735], "4696": [173, 254, 677, 735], "popul": [173, 254, 677, 735], "12th": [173, 254, 677, 735], "82": [173, 254, 677, 735], "66": [173, 254, 490, 563, 639, 677, 735, 953, 1051], "83": [173, 254, 677, 735], "52": [173, 231, 254, 492, 639, 677, 713, 735], "request": [174, 254], "describe_plan": [174, 254], "unoptim": [174, 254], "describe_optimized_plan": [174, 254], "show_graph": [174, 254, 735], "un": [174, 254], "graphviz": [174, 254, 700, 735], "axi": [176, 177, 179, 181, 209, 254, 571, 572, 685, 735], "null_strategi": [177, 209, 254], "nullstrategi": [177, 209, 254], "spam": [177, 254, 517, 988], "id_var": [179, 254, 685, 735], "value_var": [179, 254, 685, 735], "variable_nam": [179, 254, 685, 735], "value_nam": [179, 254, 685, 735], "unpivot": [179, 254, 685, 735], "leav": [179, 254, 431, 685, 735], "massag": [179, 254, 685, 735], "measur": [179, 254, 685, 735], "merg": [180, 254, 686, 735], "caller": [180, 254, 431, 681, 686, 719, 735], "respons": [180, 254, 686, 735], "steve": [180, 254, 686, 735], "elis": [180, 254, 686, 735], "bob": [180, 254, 686, 735], "ag": [180, 254, 686, 735], "anna": [180, 254, 686, 735], "megan": [180, 254, 686, 735], "thoma": [180, 254, 686, 735], "21": [180, 209, 254, 483, 484, 486, 489, 490, 491, 597, 639, 686, 735, 738], "what": [183, 254, 1032, 1041, 1051], "pack": [183, 254], "expr_unique_subset": [183, 254], "df_nuniqu": [183, 254], "df_agg_nuniqu": [183, 254], "include_kei": [185, 197, 254], "offer": [186, 254, 467, 639, 689, 735], "fulli": [186, 198, 254], "cast_str_to_int": [186, 254, 689, 735], "col_nam": [186, 254, 689, 735], "tdf": [186, 254, 689, 735], "aggregate_funct": [187, 254], "pivotagg": [187, 254], "nodefault": [187, 254], "_nodefault": [187, 254], "no_default": [187, 254], "sort_column": [187, 254], "predefin": [187, 254], "predict": [187, 190, 227, 254, 493, 499, 639], "transpos": [187, 254], "discoveri": [187, 254], "col1": [187, 222, 225, 254, 735, 1059], "col2": [187, 222, 225, 254, 735, 1059], "col3": [187, 254, 1059], "tanh": [187, 254, 639, 1051], "998347": [187, 254], "964028": [187, 254], "999954": [187, 254], "interpol": [189, 246, 254, 368, 443, 472, 487, 614, 639, 691, 729, 735, 939, 953, 1051], "rollinginterpolationmethod": [189, 246, 254, 472, 487, 614, 639, 691, 729, 735, 939, 953, 1051], "midpoint": [189, 246, 254, 472, 487, 614, 639, 691, 729, 735, 939, 953, 1051], "by_pred": [195, 254], "accord": [195, 254, 440, 588, 639, 806], "never": [195, 254, 588], "mutual": [195, 254], "exclus": [195, 254, 563, 570, 601, 602, 639], "addition": [195, 254], "clariti": [195, 254], "toomanyrowsreturnederror": [195, 254, 650], "norowsreturnederror": [195, 254, 650], "inherit": [195, 254], "rowserror": [195, 254, 650], "selectortyp": [197, 254, 738], "high": [197, 254], "cost": [197, 254], "reoconstruct": [197, 254], "defaultdict": [197, 254], "assum": [197, 254, 681, 719, 735], "with_replac": [198, 254, 493, 639, 959, 1051], "shuffl": [198, 236, 254, 493, 639, 719, 959, 1051], "modul": [198, 254, 493, 499, 638, 639, 738, 959, 970, 1051], "named_expr": [200, 231, 254, 619, 622, 696, 713, 735], "threshold": [200, 254, 696, 735], "set_auto_structifi": [200, 231, 254, 696, 713, 735], "auto_structifi": [200, 231, 254, 696, 713, 735], "is_odd": [200, 254, 696, 735], "_is_odd": [200, 254, 696, 735], "shift_and_fil": [203, 254, 639, 735, 1051], "fill_valu": [204, 225, 254, 497, 639, 699, 735, 967, 1051], "shift": [204, 254, 312, 408, 466, 497, 578, 639, 699, 735, 788, 892, 934, 967, 1051], "shrink": [205, 254, 498, 639, 968, 969, 1051], "hold": [205, 254], "ddof": [208, 228, 254, 489, 491, 508, 561, 580, 617, 618, 621, 629, 639, 703, 711, 735, 955, 957, 978, 1040, 1051], "deviat": [208, 254, 361, 489, 508, 621, 639, 703, 735, 842, 978, 1051], "degre": [208, 228, 254, 473, 489, 491, 508, 561, 572, 580, 617, 618, 621, 629, 639, 703, 711, 735, 955, 957, 978, 1040, 1051], "freedom": [208, 228, 254, 489, 491, 508, 561, 580, 617, 618, 621, 629, 639, 703, 711, 735, 955, 957, 978, 1040, 1051], "divisor": [208, 228, 254, 489, 491, 508, 561, 580, 617, 618, 621, 629, 639, 703, 711, 735, 955, 957, 978, 1040, 1051], "816497": [208, 254], "16a": [209, 254], "27b": [209, 254], "38c": [209, 254], "nth": [211, 254, 532, 551, 639, 706, 735, 1003, 1023, 1051], "mostli": [212, 254, 369, 639], "categoricaltyp": [212, 254], "as_seri": [213, 254], "fruit": [213, 254, 479, 514, 533, 639, 985, 1004], "car": [213, 254, 479, 639], "beetl": [213, 254, 479, 639], "audi": [213, 254, 479, 639], "300": [213, 254, 949, 950, 952, 1051], "drop_first": [215, 254], "dummi": [215, 254, 1028, 1051], "foo_1": [215, 254], "foo_2": [215, 254], "bar_3": [215, 254], "bar_4": [215, 254], "ham_a": [215, 254], "ham_b": [215, 254], "instantiat": [216, 254, 1030, 1051], "from_repr": [216, 254, 1030, 1051], "df_from_str_repr": [216, 254], "eval": [216, 254, 592, 1030, 1051], "indexord": [217, 254], "fortran": [217, 254], "downstream": [217, 254, 495, 639, 964, 1051], "applic": [217, 254, 483, 484, 485, 486, 487, 489, 490, 491, 639], "prevent": [217, 254, 263, 307, 308, 395, 548, 639, 735, 783, 784, 1020, 1051], "reshap": [217, 254, 410, 639, 894, 1051], "ll": [217, 254], "u1": [217, 254], "f4": [217, 254], "view": [217, 254, 1032, 1051], "recarrai": [217, 254], "rec": [217, 254], "use_pyarrow_extension_arrai": [218, 254, 1033, 1051], "trigger": [218, 254, 1033, 1051], "sent": [218, 254, 1032, 1033, 1051], "pandas_df1": [218, 254], "pandas_df2": [218, 254], "pandas_df2_pa": [218, 254], "na": [218, 254, 1033, 1051], "get_column": [219, 254], "four": [220, 254], "five": [220, 254, 1059], "bottom_k": [221, 254, 555, 639, 707, 735, 1035, 1051], "include_head": [222, 254], "header_nam": [222, 254], "column_nam": [222, 254], "perhap": [222, 254], "column_2": [222, 254], "name_gener": [222, 254], "base_nam": [222, 254], "my_column_": [222, 254], "my_column_0": [222, 254], "my_column_1": [222, 254], "my_column_2": [222, 254], "new_id": [222, 254], "uniquekeepstrategi": [223, 254, 708, 735], "kept": [223, 254, 708, 735], "decompos": [224, 254, 709, 735], "t_a": [224, 254, 709, 735], "t_b": [224, 254, 709, 735], "t_c": [224, 254, 709, 735], "t_d": [224, 254, 709, 735], "womp": [224, 254, 709, 735], "t_": [224, 254, 709, 735], "t_struct": [224, 254, 709, 735], "step": [225, 254, 570, 601, 602], "unstackdirect": [225, 254], "pivot": [225, 254], "phase": [225, 254], "subject": [225, 254], "ascii_uppercas": [225, 254], "h": [225, 254, 261, 348, 351, 498, 535, 537, 540, 639, 1006, 1008, 1011], "col1_0": [225, 254], "col1_1": [225, 254], "col1_2": [225, 254], "col2_0": [225, 254], "col2_1": [225, 254], "col2_2": [225, 254], "syntact": [226, 254, 593, 594, 598, 603, 613, 614, 619, 631, 710, 735, 977, 1051], "sugar": [226, 254, 593, 594, 598, 603, 613, 614, 619, 631, 710, 735, 977, 1051], "coalesc": [226, 254, 535, 710, 735, 1006], "400": [226, 254, 710, 735, 949, 950, 952, 1051], "600": [226, 254, 710, 735, 738], "700": [226, 254, 710, 735], "new_df": [226, 254, 710, 735], "time_column": [227, 254], "frequenc": [227, 254], "forward_fil": [227, 254, 305, 308, 639], "varianc": [228, 254, 362, 396, 491, 561, 629, 639, 711, 735, 843, 881, 957, 1040, 1051], "grow": [229, 254], "is_not": [231, 254, 639, 713, 735], "not_c": [231, 254, 713, 735], "diff": [231, 254, 323, 327, 331, 333, 335, 340, 347, 421, 639, 713, 735, 800, 804, 811, 813, 816, 821, 828, 905, 1051], "_diff": [231, 254, 713, 735], "row_nr": [232, 254, 440, 483, 484, 486, 489, 490, 491, 639, 715, 735, 963, 1051], "named_agg": [234, 717], "_sum": [234, 717], "_mean_squar": [234, 717], "b_sum": [234, 717], "c_mean_squar": [234, 717], "sub": [236, 281, 282, 283, 639, 757, 758, 759], "triangl": [236, 719], "group_df": [236, 719], "deem": [237, 303, 581, 639, 720], "nr": [239, 248, 722, 731], "maxim": [241, 276, 639, 724, 752, 1051], "833333": [242, 725], "minim": [244, 277, 404, 498, 506, 639, 727, 753, 888, 925, 968, 1051], "overview": [254, 639, 650, 735, 1051, 1059], "frameinittyp": [254, 735], "variou": [254, 639, 735, 738, 1051], "entri": [254, 735, 1058], "behavior": [254, 268, 430, 568, 639, 744, 914, 1051], "mydatafram": 254, "notic": [254, 735, 1051], "df4": 254, "df5": 254, "df6": 254, "corr": 254, "drop_in_plac": 254, "drop_nul": [254, 264, 266, 314, 639, 735, 742, 743, 1051], "estimated_s": [254, 1051], "explod": [254, 371, 465, 478, 639, 735, 944, 1051], "find_idx_by_nam": 254, "fold": [254, 449, 576, 583, 584, 615], "frame_equ": [254, 345, 352], "groupby_rol": [254, 483, 484, 485, 486, 487, 489, 490, 491, 639, 671, 735], "hash_row": 254, "hstack": 254, "insert_at_idx": 254, "is_dupl": [254, 639, 1051], "is_empti": [254, 1051], "is_uniqu": [254, 639, 1051], "iter_slic": 254, "melt": [254, 735], "merge_sort": [254, 735], "n_uniqu": [254, 639, 1051], "pipe": [254, 639, 735], "quantil": [254, 471, 487, 639, 735, 938, 953, 1051], "replace_at_idx": 254, "shrink_to_fit": [254, 1051], "take_everi": [254, 639, 735, 1051], "to_dict": 254, "to_dummi": [254, 1051], "to_numpi": [254, 438, 639, 1051], "to_panda": [254, 1051], "to_struct": [254, 517], "unnest": [254, 480, 517, 531, 532, 545, 639, 735, 915, 946, 1002, 1003, 1051], "unstack": 254, "write_avro": 254, "write_databas": 254, "write_delta": 254, "write_excel": 254, "write_json": [254, 692, 735], "write_parquet": 254, "cumprod": [261, 639, 1051], "ghi": [261, 517, 639, 738, 988], "94": [262, 639], "map_alia": [263, 639], "to_uppercas": [263, 639], "confus": [264, 389, 391, 639], "tt": [264, 639], "tf": [264, 266, 639], "ff": [264, 266, 639], "bitwis": [265, 464, 563, 564, 565, 566, 567, 639], "upcast": [267, 639], "skip_nul": [268, 639, 745, 1051], "pass_nam": [268, 639], "applystrategi": [268, 639], "thread_loc": [268, 639], "unknown": [268, 440, 516, 604, 639, 987], "stage": [268, 639], "code": [268, 286, 288, 289, 290, 495, 639, 679, 735, 964, 1051], "amount": [268, 639], "releas": [268, 639, 1059], "gil": [268, 639], "bug": [268, 438, 639, 681, 719, 735, 745, 1051], "discourag": [268, 639], "loop": [268, 639], "a_times_2": [268, 639], "approx": [269, 569, 639, 735], "hyperloglog": [269, 569, 639, 735], "algorithm": [269, 569, 639, 735], "cardin": [269, 569, 639, 735], "invers": [270, 271, 272, 273, 274, 275, 639, 746, 747, 748, 749, 750, 751, 1051], "cosin": [270, 271, 301, 302, 438, 639, 746, 747, 779, 780, 1051], "570796": [270, 272, 639, 746, 748, 1051], "hyperbol": [271, 273, 275, 302, 502, 553, 639, 747, 749, 751, 780, 973, 1025, 1051], "sine": [272, 273, 438, 501, 502, 639, 748, 749, 972, 973, 1051], "881374": [273, 639, 749, 1051], "tangent": [274, 275, 552, 553, 639, 750, 751, 1024, 1025, 1051], "785398": [274, 571, 572, 639, 750, 1051], "arg_wher": [279, 639], "substr": [286, 289, 290, 510, 514, 525, 526, 530, 531, 532, 533, 738, 761, 764, 765, 981, 985, 996, 997, 1001, 1002, 1003, 1004], "ends_with": [286, 290, 510, 533, 738, 1004], "x00": [286, 288, 289, 290], "xff": [286, 288, 289, 290], "hex": [286, 287, 288, 289, 290, 512, 513, 524, 762, 763, 983, 984, 995], "code_encoded_hex": [286, 288, 289, 290], "contains_ff": [286, 289, 290], "starts_with_ff": [286, 289, 290], "ends_with_ff": [286, 289, 290], "000000": [286, 288, 289, 290], "ffff00": [286, 288, 289, 290], "0000ff": [286, 288, 289, 290], "transferencod": [287, 288, 512, 513, 762, 763, 983, 984], "strict": [287, 293, 510, 512, 524, 535, 536, 537, 540, 639, 762, 767, 961, 981, 983, 995, 1006, 1007, 1008, 1011, 1051], "base64": [287, 288, 512, 513, 762, 763, 983, 984], "anywher": [289, 290, 535, 536, 537, 1006, 1007, 1008], "complex": [291, 309, 555, 639, 766, 785, 1035, 1051], "frac": [291, 360, 361, 362, 503, 555, 639, 766, 841, 842, 843, 974, 1035, 1051], "deprec": [292, 535, 537, 564, 566, 570, 585, 588, 606, 610, 616, 623, 627, 639, 744, 1006, 1008, 1051], "supersed": [292, 639], "overflow": [293, 307, 308, 524, 548, 639, 767, 783, 784, 995, 1020, 1051], "to_fram": [294, 345, 352, 535, 962, 963, 1002, 1003, 1006, 1051], "categoricalord": [295, 770], "lexic": [295, 738, 770], "259921": [296, 639, 771, 1051], "587401": [296, 639], "foo_clip": [298, 299, 300, 639], "clip": [299, 300, 639, 776, 777, 1051], "543081": [302, 639, 780, 1051], "cumul": [304, 305, 306, 307, 308, 583, 584, 585, 586, 639, 781, 782, 783, 784, 1051], "a_revers": [304, 305, 306, 307, 308, 439, 479, 547, 639], "value_cummax": [305, 639], "value_cummax_all_fil": [305, 639], "value_cumsum": [308, 639], "value_cumsum_all_fil": [308, 639], "min_period": [309, 360, 361, 362, 482, 483, 484, 485, 486, 487, 489, 490, 491, 617, 618, 639, 785, 841, 842, 843, 948, 949, 950, 951, 952, 953, 955, 956, 957, 1051], "slide": [309, 639, 785, 1051], "realli": [309, 639, 785, 1051], "visit": [309, 639, 785, 1051], "label": [310, 471, 482, 483, 484, 485, 486, 487, 489, 490, 491, 639, 690, 735, 786, 938, 948, 949, 950, 951, 952, 953, 955, 956, 957, 1051], "left_clos": [310, 471, 639, 786, 938, 1051], "include_break": [310, 471, 639, 786, 938, 1051], "bin": [310, 471, 524, 563, 633, 639, 786, 857, 938, 995, 1045, 1051], "discret": [310, 312, 357, 408, 421, 471, 639, 786, 788, 839, 857, 892, 905, 938, 1051], "endpoint": [310, 471, 483, 484, 485, 486, 487, 489, 490, 491, 639, 786, 938, 1051], "observ": [310, 360, 361, 362, 471, 639, 786, 841, 842, 843, 938, 1051], "fall": [310, 471, 481, 639, 786, 861, 938, 947, 1051], "radian": [311, 571, 639], "pi": [311, 639, 779, 972, 1024, 1051], "720": [311, 473, 639], "540": [311, 473, 639], "360": [311, 473, 639], "180": [311, 329, 343, 356, 473, 639], "null_behavior": [312, 408, 639, 788, 892, 1051], "nullbehavior": [312, 408, 639, 788, 892, 1051], "th": [312, 408, 421, 503, 639, 788, 892, 905, 974, 1051], "drop_nan": [315, 639, 1051], "utc": [316, 319, 324, 344, 535, 537, 738, 793, 796, 801, 825, 1006, 1008], "usual": [316, 793], "vari": [316, 588, 793, 1059], "rare": [316, 793], "countri": [316, 793], "switch": [316, 793], "samoa": [316, 793], "apia": [316, 793], "did": [316, 517, 793, 988], "2011": [316, 793], "dst_offset": [316, 352, 793, 833], "2012": [316, 793], "replace_time_zon": [316, 324, 797, 798, 830], "pacif": [316, 793], "11h": [316, 793], "13h": [316, 793], "lose": [317, 570, 794], "2001": [317, 322, 325, 326, 328, 329, 334, 336, 341, 342, 343, 345, 346, 350, 352, 353, 354, 355, 356, 483, 484, 486, 489, 490, 491, 535, 639, 794, 799, 802, 803, 805, 807, 808, 809, 810, 812, 814, 815, 817, 820, 822, 823, 824, 826, 827, 831, 833, 834, 835, 836, 837, 1006], "time_unit_m": [317, 794], "time_unit_n": [317, 794], "naiv": [318, 535, 537, 795, 1006, 1008], "compon": [318, 346, 535, 537, 591, 795, 827, 1006, 1008], "resolv": 318, "tm": [318, 738], "456000": [318, 795], "101000": 318, "456": [318, 738, 795, 1029, 1051], "07": [318, 344, 345, 352, 535, 588, 597, 738, 795, 799, 825, 835, 1006], "101": [318, 524, 995, 1059], "d1": 318, "d2": 318, "d3": 318, "europ": [319, 324, 344, 352, 796, 801, 825, 833], "london": [319, 324, 344, 352, 796, 801, 825, 833], "gmt": [319, 324, 344, 352, 796, 801, 825, 833], "bst": [319, 324, 344, 352, 796, 801, 825, 833], "weekdai": [322, 342], "ordinal_dai": [322, 354], "day_of_month": [322, 342, 354], "day_of_year": [322, 342, 354], "356": [322, 342, 354], "357": [322, 342, 354], "358": [322, 342, 354], "359": [322, 342, 354], "days_diff": 323, "base_utc_offset": [324, 801], "26": [324, 801], "0m": [324, 801], "epochtimeunit": [325, 597, 802], "unix": [325, 597, 802], "epoch_n": [325, 802], "epoch_": [325, 802], "978307200000000": [325, 350, 802, 831], "978307200": [325, 802], "978393600000000": [325, 350, 802, 831], "978393600": [325, 802], "978480000000000": [325, 350, 802, 831], "978480000": [325, 802], "hours_diff": 327, "leap": [328, 341, 588, 805, 822], "2002": [328, 329, 341, 343, 356, 805, 822, 837], "iso": [329, 353, 354, 806, 834, 835], "2006": [329, 341, 822], "2004": [329, 341, 822], "2005": [329, 341, 822], "1_001": [330, 331, 333, 340], "002": [330, 331, 333, 340, 591, 811, 813, 821], "003": [330, 331, 333, 340], "3000": 330, "997": [330, 331, 333, 340], "997000": 330, "998": [330, 331, 333, 340], "998000": 330, "999": [330, 331, 333, 340, 738, 1059], "999000": [330, 738], "microseconds_diff": 331, "milliseconds_diff": 333, "minutes_diff": 335, "1440": [335, 816], "think": [337, 338, 818, 819], "vectoris": [337, 338, 818, 819], "tseri": [337, 338, 818, 819], "monthend": [337, 818], "rollforward": [337, 818], "monthbegin": [338, 819], "rollback": [338, 819], "nanoseconds_diff": 340, "1000000": [340, 543, 821], "minu": [341, 822], "dictat": [341, 822], "date_plus_1i": [341, 822], "1y2mo": [341, 822], "date_min": 341, "1998": [341, 822], "1999": [341, 738, 822], "2003": [341, 597, 822], "ordin": [342, 474, 639, 823, 940, 1051], "366": [342, 823], "use_earliest": [344, 352, 825, 833], "convert_time_zon": [344, 825], "ambigu": [344, 352, 825, 833], "earliest": [344, 352, 825, 833], "london_timezon": [344, 825], "amsterdam": [344, 825], "london_to_amsterdam": [344, 825], "cet": [344, 825], "cest": [344, 825], "dst": [344, 825], "ts_local": [344, 825], "brussel": [344, 825], "half": [345, 360, 361, 362, 639, 826, 841, 842, 843, 1051], "225": [345, 352], "10m": [345, 352, 826, 833], "milli": [346, 827], "micro": [346, 827], "456789": [346, 738], "654321": 346, "111110": 346, "765431": 346, "sec": [346, 1059], "11111": 346, "seconds_diff": 347, "to_str": [348, 829], "datetime_str": [348, 351], "timestamp_n": [350, 831], "timestamp_m": 350, "978307200000": 350, "978393600000": 350, "978480000000": 350, "strftime": [351, 832], "offset_bi": [352, 833], "15m": [352, 833], "53": [353, 834], "time_unit_u": [355, 836], "32971": [355, 836], "32974": [355, 836], "32976": [355, 836], "718281828459045": [357, 433, 639, 839, 917, 1051], "pk": [357, 639, 839, 1051], "probabl": [357, 471, 639, 839, 938, 1051], "459148": [357, 639], "754888": [357, 639], "eq": [359, 639, 1051], "span": [360, 361, 362, 639, 841, 842, 843, 1051], "half_lif": [360, 361, 362, 639, 841, 842, 843, 1051], "adjust": [360, 361, 362, 503, 639, 841, 842, 843, 974, 1051], "ignore_nul": [360, 361, 362, 639, 841, 842, 843, 1041, 1051], "exponenti": [360, 361, 362, 364, 468, 639, 841, 842, 843, 844, 1051], "weight": [360, 361, 362, 482, 483, 484, 485, 486, 487, 489, 490, 491, 503, 639, 841, 842, 843, 948, 949, 950, 951, 952, 953, 955, 956, 957, 974, 1051], "decai": [360, 361, 362, 639, 841, 842, 843, 1051], "term": [360, 361, 362, 520, 523, 639, 841, 842, 843, 991, 994, 1051], "mass": [360, 361, 362, 639, 841, 842, 843, 1051], "gamma": [360, 361, 362, 639, 841, 842, 843, 1051], "foral": [360, 361, 362, 639, 841, 842, 843, 1051], "geq": [360, 361, 362, 639, 841, 842, 843, 1051], "theta": [360, 361, 362, 639, 841, 842, 843, 1051], "life": [360, 361, 362, 639, 841, 842, 843, 1051], "exp": [360, 361, 362, 639, 841, 842, 843, 1051], "ln": [360, 361, 362, 639, 841, 842, 843, 1051], "smooth": [360, 361, 362, 639, 841, 842, 843, 1051], "factor": [360, 361, 362, 554, 639, 841, 842, 843, 1034, 1051], "leq": [360, 361, 362, 639, 841, 842, 843, 1051], "imbal": [360, 361, 362, 639, 841, 842, 843, 1051], "ew": [360, 361, 362, 639, 841, 842, 843, 1051], "w_i": [360, 361, 362, 639, 841, 842, 843, 1051], "recurs": [360, 361, 362, 639, 841, 842, 843, 1051], "y_0": [360, 361, 362, 639, 841, 842, 843, 1051], "x_0": [360, 361, 362, 639, 841, 842, 843, 1051], "y_t": [360, 361, 362, 639, 841, 842, 843, 1051], "y_": [360, 361, 362, 639, 841, 842, 843, 1051], "x_t": [360, 361, 362, 639, 841, 842, 843, 1051], "x_2": [360, 361, 362, 639, 841, 842, 843, 1051], "428571": [360, 639], "bia": [361, 362, 396, 488, 503, 639, 842, 843, 881, 954, 974, 1051], "unbias": [361, 362, 639, 842, 843, 1051], "963624": [361, 639, 842, 1051], "928571": [362, 639, 843, 1051], "wildcard": [363, 577, 583, 584, 595, 615, 639], "regex": [363, 446, 510, 511, 514, 516, 517, 525, 526, 533, 593, 623, 639, 738, 981, 982, 985, 987, 988, 996, 997, 1004], "aa": [363, 510, 593, 639, 981], "ba": [363, 593, 639, 738], "cc": [363, 593, 639], "718282": [364, 639], "389056": [364, 639], "54": [364, 639, 1059], "59815": [364, 639], "expand": [365, 445, 446, 477, 639, 845, 1051], "pythonliter": [366, 606, 610, 639, 847, 922, 925, 1051], "extrem": [366, 639, 847, 1051], "group_col": [369, 562, 639], "g1": [369, 562, 639], "g2": [369, 562, 639], "lt": [369, 562, 639, 1051], "gte": [369, 562, 639], "exprlistnamespac": [371, 639], "divis": [373, 556, 639], "truediv": [373, 639], "9774092659964970114": [378, 639], "13614470193936745724": [378, 639], "1101441246220388612": [378, 639], "11638928888656214026": [378, 639], "13382926553367784577": [378, 639], "cumsum": [381, 546, 586, 639, 674, 735, 880, 1051], "interpolationmethod": [382, 639, 860, 1051], "regrid": [382, 639], "grid": [382, 639], "df_original_grid": [382, 639], "grid_point": [382, 639], "df_new_grid": [382, 639], "conflat": [383, 639], "finit": [385, 556, 580, 639, 865, 1051], "primit": [387, 639, 1032, 1051], "optional_memb": [387, 639, 868, 1051], "infinit": [388, 556, 639, 869, 1051], "_isnan": [389, 639], "b_isnan": [389, 639], "negat": [390, 639], "_is_not_nan": [391, 639], "b_is_not_nan": [391, 639], "_not_nul": [392, 639], "a_not_nul": [392, 639], "b_not_nul": [392, 639], "_isnul": [393, 639], "a_isnul": [393, 639], "b_isnul": [393, 639], "constraint": [395, 469, 547, 639], "chain": [395, 469, 547, 630, 639], "undo": [395, 452, 469, 547, 639], "333333": [395, 639, 934, 957, 1051], "fisher": [396, 503, 639, 881, 974, 1051], "fourth": [396, 639, 881, 1051], "subtract": [396, 546, 639, 881, 1051], "distribut": [396, 503, 639, 881, 974, 1051], "elimin": [396, 639, 881, 1051], "bias": [396, 503, 639, 881, 974, 1051], "scipi": [396, 503, 639, 881, 974, 1051], "stat": [396, 503, 639, 881, 974, 1051], "153061": [396, 639], "sublist": [403, 404, 406, 408, 411, 412, 413, 414, 415, 421, 426, 429, 430, 431, 868, 887, 888, 890, 892, 895, 896, 897, 898, 899, 905, 910, 913, 914, 915, 1051], "membership": [406, 890], "listcol": 407, "number_of_two": 407, "blindli": [409, 893], "worth": [409, 893], "enough": [409, 503, 639, 893, 974, 1051], "concat_list": [409, 592, 893], "rank": [409, 580, 592, 639, 893, 1051], "exprnamespac": 410, "flat": [410, 478, 639, 894, 944, 1051], "symmetr": [423, 907], "sdiff": 423, "taken": [426, 529, 910, 1000], "null_on_oob": [430, 914], "cheaper": [430, 914], "n_field_strategi": [431, 915], "tostructstrategi": [431, 915], "first_non_nul": [431, 915], "max_width": [431, 915], "field_0": [431, 915], "field_1": [431, 915], "field_n": [431, 915], "pre": [431, 613, 616, 631], "n0": 431, "n1": 431, "logarithm": [433, 434, 435, 639, 917, 918, 919, 1051], "584963": [433, 639], "30103": [434, 639], "60206": [434, 639], "natur": [435, 639, 919, 1051], "plu": [435, 639, 919, 1051], "693147": [435, 639], "098612": [435, 639], "386294": [435, 639], "lowest": [436, 639], "9223372036854775808": [436, 639], "agg_list": [438, 639], "elementwis": [438, 482, 483, 484, 486, 490, 639, 948, 949, 950, 951, 952, 953, 955, 956, 957, 1051], "third": [438, 639], "parti": [438, 639], "book": [438, 639], "map_dict": [438, 639, 1051], "argmax": [438, 639], "b_revers": [439, 479, 547, 639], "rstrip": [439, 639], "_revers": [439, 479, 547, 639], "remap": [440, 639, 921, 1051], "lookup": [440, 639, 921, 1051], "country_code_dict": [440, 639], "ca": [440, 639], "canada": [440, 639], "de": [440, 639], "germani": [440, 639], "fr": [440, 639], "franc": [440, 639], "country_cod": [440, 639], "rest": [440, 639], "exprmetanamespac": [444, 447], "computeerror": [448, 524, 650, 995], "tree": 451, "keep_nam": [452, 639], "modulu": [455, 639], "xlog2": [457, 468, 639], "poison": [459, 460, 639, 930, 931, 1051], "nanmax": [459, 460, 639, 930, 931, 1051], "wherea": [459, 460, 588, 639, 673, 680, 735, 930, 931, 1051], "inequ": [461, 639], "ne": [462, 639, 1051], "more_expr": [465, 564, 566, 573, 576, 578, 579, 585, 606, 610, 623, 639], "mapping_strategi": [465, 639], "windowmappingstrategi": [465, 639], "group_to_row": [465, 639], "outcom": [465, 639], "group_dtyp": [465, 639], "warn": [465, 639], "flatten": [465, 639], "_max": [465, 639], "c_max": [465, 639], "_min": [465, 639], "c_min": [465, 639], "percent": [466, 639, 934, 1051], "090909": [466, 639], "extract_numb": [467, 639], "digit": [467, 492, 517, 543, 639, 958, 982, 988, 1014, 1051, 1059], "scale_negative_even": [467, 639], "expon": [468, 639, 1051], "reverse_": [469, 639], "reverse_a": [469, 639], "reverse_b": [469, 639], "allow_dupl": [471, 639, 938, 1051], "prob": [471, 639, 938, 1051], "lo": [471, 639], "566371": [473, 639], "424778": [473, 639], "283185": [473, 639], "141593": [473, 639, 746, 1051], "rankmethod": [474, 639, 940, 1051], "ti": [474, 639, 940, 1051], "competit": [474, 639, 940, 1051], "highest": [474, 559, 580, 639, 735, 940, 1051], "immedi": [474, 570, 574, 588, 589, 601, 602, 613, 616, 622, 627, 628, 631, 639, 940, 1051], "64bit": [476, 639, 942, 1051], "safe": [476, 535, 537, 639, 942, 1006, 1008, 1032, 1051], "fruits_revers": [479, 639], "cars_revers": [479, 639], "rle": [481, 639, 947, 1051], "themselv": [481, 639, 947, 1051], "a_r": [481, 639], "ab_r": [481, 639], "window_s": [482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 617, 618, 639, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 1051], "rolling_min": [482, 639, 948, 1051], "rolling_max": [482, 639, 948, 1051], "rolling_mean": [482, 639, 948, 1051], "rolling_sum": [482, 639, 948, 1051], "multipli": [482, 483, 484, 486, 489, 490, 491, 639, 948, 949, 950, 951, 952, 953, 955, 956, 957, 1051], "358899": [482, 639], "041452": [482, 639], "567764": [482, 639], "travers": [483, 484, 486, 490, 639, 949, 950, 952, 955, 956, 957, 1051], "vector": [483, 484, 486, 490, 639, 949, 950, 952, 955, 956, 957, 1051], "5h": [483, 484, 485, 486, 487, 489, 490, 491, 639], "df_tempor": [483, 484, 486, 489, 490, 491, 639], "closur": [483, 484, 489, 490, 491, 639], "rolling_row_max": [483, 639], "2h": [483, 484, 486, 489, 490, 491, 639], "rolling_row_mean": [484, 639], "contribut": [485, 487, 489, 491, 639], "rolling_row_min": [486, 639], "625": [487, 639], "skew": [488, 639, 954, 1051], "381802": [488, 639, 954, 1051], "47033": [488, 639, 954, 1051], "38180177416060584": [488, 639, 954, 1051], "47033046033698594": [488, 639, 954, 1051], "433013": [489, 639, 703, 735], "rolling_row_std": [489, 639], "rolling_row_sum": [490, 639], "39": [490, 597, 639], "63": [490, 639], "69": [490, 639], "1875": [491, 639, 711, 735], "rolling_row_var": [491, 639], "fixed_se": [493, 499, 639], "increment": [493, 499, 639], "schedul": [493, 499, 639], "searchsortedsid": [494, 639, 960, 1051], "leftmost": [494, 639, 960, 1051], "rightmost": [494, 639, 960, 1051], "six": [494, 639], "extrema": [498, 639, 968, 1051], "112": [498, 639, 1059], "129": [498, 639], "i8": [498, 613, 616, 631, 639, 788, 945, 1038, 1051], "8589934592": [498, 639], "1073741824": [498, 639], "content": [499, 560, 639, 970, 1051], "175201": [502, 639, 973, 1051], "about": [503, 510, 516, 517, 525, 639, 974, 981, 987, 988, 996, 1051, 1059], "unimod": [503, 639, 974, 1051], "skewtest": [503, 639, 974, 1051], "speak": [503, 639, 974, 1051], "g_1": [503, 639, 974, 1051], "m_3": [503, 639, 974, 1051], "m_2": [503, 639, 974, 1051], "m_i": [503, 639, 974, 1051], "sum_": [503, 639, 974, 1051], "texttt": [503, 639, 974, 1051], "k_3": [503, 639, 974, 1051], "k_2": [503, 639, 974, 1051], "sqrt": [503, 571, 572, 639, 974, 1051], "343622": [503, 639], "value1": [506, 639], "value2": [506, 639], "attain": [506, 639], "414214": [507, 639, 977, 1051], "sensit": [510, 517, 525, 981, 988, 996], "ilmsuxu": [510, 516, 517, 525, 981, 987, 988, 996], "default_match": 510, "insensitive_match": 510, "section": [510, 516, 517, 525, 981, 987, 988, 996], "crab": [510, 981], "dog": [510, 539, 542, 579, 981, 1010, 1013], "rab": [510, 981], "success": [511, 517, 982, 988], "overlap": [511, 517, 982, 988], "captur": [511, 516, 517, 982, 987, 988], "123": [511, 517, 526, 738, 982, 988, 997, 1029, 1051], "bla": [511, 517, 982, 988], "asd": [511, 517, 982, 988], "678": [511, 517, 982, 988], "910t": [511, 517, 982, 988], "count_digit": 511, "666f6f": [513, 984], "626172": [513, 984], "mango": [514, 533, 985, 1004], "go": [514, 985], "has_suffix": 514, "group_index": [516, 987], "nthose": [516, 987], "nodd": [516, 987], "nthe": [516, 987], "url": [516, 987], "vote": [516, 987], "ballon_dor": [516, 987], "404": [516, 987], "ref": [516, 987], "candid": [516, 987], "messi": [516, 987], "ronaldo": [516, 987], "email": [517, 988], "real": [517, 988], "some_account": [517, 988], "somewher": [517, 988], "net": [517, 988], "jkl": [517, 988], "uvw": [517, 988], "co": [517, 639, 988, 1051], "uk": [517, 988], "address": 517, "xi": [517, 988], "insensit": [517, 525, 738, 981, 988, 996], "quantifi": [517, 988], "email_part": [517, 988], "extracted_nr": 517, "910": [517, 988], "json_path_match": [518, 989], "jsonpath": [518, 519, 989, 990], "json_path": [519, 990], "json_val": [519, 990], "n_char": [520, 991], "caf\u00e9": [520, 523, 991, 994], "345": [520, 523, 991, 994], "\u6771\u4eac": [520, 523, 991, 994], "nchar": [520, 523], "fill_char": [521, 527, 992, 998], "justifi": [521, 527, 992, 998], "pad": [521, 527, 543, 992, 998, 1014], "cow": [521, 527, 992, 998], "monkei": [521, 527, 992, 998], "hippopotamu": [521, 527, 992, 998], "strip": [522, 528, 993, 999], "tworld": [522, 993, 1005], "wod": [522, 993], "rld": [522, 534, 993], "radix": [524, 995], "parseerror": [524, 995], "becom": [524, 995], "silent": [524, 995], "110": [524, 995], "010": [524, 995], "fa1e": [524, 995], "ff00": [524, 995], "cafe": [524, 995], "64030": [524, 995], "65280": [524, 995], "51966": [524, 995], "replace_al": [525, 996], "citi": 525, "philadelphia": 525, "season": 525, "spring": 525, "summer": 525, "autumn": 525, "winter": 525, "weather": [525, 996], "raini": [525, 996], "sunni": [525, 996], "cloudi": 525, "snowi": 525, "foggi": [525, 996], "123abc": [525, 996], "abc456": [525, 996], "abcabc": [526, 997], "123a123": [526, 997], "bc": [526, 623, 997], "trail": [528, 534, 999, 1005], "oldw": 528, "he": 528, "subslic": [529, 1000], "pear": [529, 1000], "papaya": [529, 1000], "dragonfruit": [529, 1000], "s_slice": 529, "ear": [529, 1000], "aya": [529, 1000], "uit": [529, 1000], "ya": [529, 1000], "onf": [529, 1000], "a_1": [531, 1002, 1028, 1051], "d_4": [531, 1002], "rename_field": [531, 532, 1002, 1003], "first_part": [531, 532, 1002, 1003], "second_part": [531, 532, 1002, 1003], "remaind": [532, 1003], "app": [533, 1004], "has_prefix": 533, "nworld": 534, "ow": 534, "hell": [534, 1005], "polarstemporaltyp": [535, 1006], "introduc": [535, 536, 537, 1006, 1007, 1008], "penalti": [535, 536, 537, 1006, 1007, 1008], "clean": [535, 536, 537, 1006, 1007, 1008], "beforehand": [535, 536, 537, 1006, 1007, 1008], "certainli": [535, 536, 537, 1006, 1007, 1008], "3f": [535, 537, 1006, 1008], "00z": [535, 537, 1006, 1008], "sun": [535, 1006], "jul": [535, 1006], "34": [535, 1006], "inference_length": [538, 1009], "3420": [538, 1009], "120134": [538, 1009], "3212": [538, 1009], "143": [538, 1009, 1059], "lowercas": [539, 1010], "variant": [539, 541, 542], "titlecas": [541, 1012], "sing": [541, 1012], "welcom": [541, 1012], "THERE": [541, 1012], "NO": [541, 738, 1012], "There": [541, 1012], "uppercas": [542, 1013], "100000": 543, "0010": 543, "0001": 543, "00000": 543, "00001": 543, "cd": [544, 545], "struct_col": [544, 545], "www": 545, "xxx": 545, "yyi": 545, "zzz": 545, "obvious": 545, "structfieldnotfounderror": [545, 650], "761594": [553, 639, 1025, 1051], "replic": [554, 639, 1034, 1051], "vals_phys": [554, 639], "floordiv": [556, 639], "ieee": [556, 639], "754": [556, 639], "mathemat": [556, 592, 639], "undefin": [556, 639], "On": [556, 639], "operand": [556, 639], "infin": [556, 639], "value_count": [558, 639, 1051], "9223372036854775807": [559, 639], "multithread": [560, 639], "binary_str": [563, 639], "zfill": [563, 639], "250": [563, 639, 950, 1051, 1059], "bin_x": [563, 639], "bin_i": [563, 639], "xor_xi": [563, 639], "bin_xor_xi": [563, 639], "00001010": [563, 639], "00000001": [563, 639], "00001011": [563, 639], "00001000": [563, 639], "00000010": [563, 639], "11111010": [563, 639], "00000011": [563, 639], "249": [563, 639], "11111001": [563, 639], "01000010": [563, 639], "00000100": [563, 639], "70": [563, 639], "01000110": [563, 639], "AND": [564, 565, 738, 1032, 1051], "any_horizont": 566, "returns_scalar": 568, "product_a": 568, "49": 568, "arctan": [571, 572, 639, 1051], "angl": [571, 572], "plane": [571, 572], "rai": [571, 572], "tworoottwo": [571, 572], "arctan2d": 571, "atan2d": [571, 572], "atan2": [571, 572], "135": [571, 572], "356194": [571, 572], "arctan2": 572, "arg_tru": [574, 639, 1051], "more_nam": 577, "hamburg": 577, "lag": 578, "mimic": 578, "a_lag_": 578, "a_rol": 578, "swim": 579, "walk": 579, "full_sent": 579, "correlationmethod": 580, "propagate_nan": 580, "spearman": 580, "544705": 580, "covari": [582, 618], "acc": [583, 584, 595, 615], "include_init": 583, "accumul": [583, 584, 595, 615], "fn": [583, 584, 595, 615], "new_valu": [583, 584, 595, 615], "cumreduc": 583, "cumsum_horizont": 585, "1h30m25": [588, 589, 627, 628], "further": [588, 589, 1033, 1051], "granular": 588, "finer": 588, "permut": 588, "februari": 588, "febrari": 588, "28th": 588, "march": 588, "31st": 588, "approach": 588, "prior": 588, "began": 588, "januari": 588, "1mo_satur": 588, "month_end": 588, "routin": 588, "1985": 588, "america": 588, "new_york": 588, "est": 588, "999999": [590, 626, 627, 628, 738], "tbl_width_char": 591, "120": 591, "add_week": 591, "add_dai": 591, "add_second": 591, "add_milli": 591, "add_hour": 591, "a_b_doubl": 592, "f_string": 596, "placehold": 596, "hello_": 596, "_world": 596, "foo_": 596, "_bar_": 596, "foo_a_bar_1": 596, "foo_b_bar_2": 596, "foo_c_bar_3": 596, "epoch": 597, "timestep": 597, "1666683077": 597, "1666683099": 597, "12345": [597, 772, 852, 958, 1051], "12346": 597, "agg_group": [598, 639], "polarsintegertyp": [601, 602], "allow_object": 604, "valueexcept": 604, "test_func": 605, "max_horizont": 606, "min_horizont": [610, 619], "power": [620, 1051], "a_a": 620, "a_txt": 620, "605551": 621, "605551275463989": 621, "my_struct": 622, "isn": 630, "thens": 630, "elif": 630, "pick": 630, "arr": [632, 1032, 1043, 1051], "sometim": 638, "and_": 639, "approx_uniqu": [639, 735], "arcco": [639, 1051], "arccosh": [639, 1051], "arcsin": [639, 1051], "arcsinh": [639, 1051], "arctanh": [639, 1051], "arg_max": [639, 1051], "arg_min": [639, 1051], "arg_sort": [639, 1051], "arg_uniqu": [639, 1051], "backward_fil": 639, "cbrt": [639, 1051], "clip_max": [639, 1051], "clip_min": [639, 1051], "cosh": [639, 1051], "cumcount": 639, "cummax": [639, 1051], "cummin": [639, 1051], "cumulative_ev": [639, 1051], "cut": [639, 1051], "entropi": [639, 1051], "eq_miss": [639, 1051], "ewm_mean": [639, 1051], "ewm_std": [639, 1051], "ewm_var": [639, 1051], "extend_const": [639, 1051], "from_json": [639, 692, 735], "ge": [639, 1051], "gt": [639, 1051], "implod": [639, 1051], "inspect": [639, 735], "is_between": [639, 1051], "is_finit": [639, 1051], "is_first": [639, 1051], "is_in": [639, 1051], "is_infinit": [639, 1051], "is_nan": [639, 1051], "is_not_nan": [639, 1051], "is_not_nul": [639, 1051], "kurtosi": [639, 1051], "le": [639, 1051], "log10": [639, 1051], "log1p": [639, 1051], "mod": 639, "mul": 639, "nan_max": [639, 1051], "nan_min": [639, 1051], "ne_miss": [639, 1051], "or_": 639, "pct_chang": [639, 1051], "pow": [639, 1051], "qcut": [639, 1051], "reinterpret": [639, 1051], "repeat_bi": 639, "rle_id": [639, 1051], "rolling_appli": [639, 1051], "rolling_median": [639, 1051], "rolling_quantil": [639, 1051], "rolling_skew": [639, 1051], "rolling_std": [639, 1051], "rolling_var": [639, 1051], "search_sort": [639, 1051], "shrink_dtyp": [639, 1051], "sin": [639, 1051], "sinh": [639, 1051], "sort_bi": 639, "tan": [639, 1051], "to_phys": [639, 1051], "unique_count": [639, 1051], "xor": 639, "expos": 650, "miscellan": 650, "arrowerror": 650, "columnnotfounderror": 650, "duplicateerror": 650, "invalidoperationerror": 650, "nodataerror": 650, "polarspanicerror": 650, "schemaerror": 650, "schemafieldnotfounderror": 650, "shapeerror": 650, "parametr": 650, "build_info": 650, "get_index_typ": 650, "show_vers": 650, "threadpool_s": 650, "sqlcontext": [650, 1058], "hit": [654, 735], "node": [654, 674, 681, 685, 690, 693, 735], "huge": [657, 735], "saver": [657, 735], "purpos": [664, 735], "influenc": [664, 681, 735], "read_json": [669, 716, 735], "lazygroupbi": [670, 671, 672, 735], "other_lf": [676, 735], "validate_output_schema": [681, 735], "streamabl": [681, 685, 735], "past": [681, 735], "paramount": [681, 735], "elig": [681, 735], "invari": [681, 735], "upheld": [681, 735], "prune": [681, 735], "show_plot": [690, 735], "truncate_nod": [690, 735], "figsiz": [690, 700, 735], "gantt": [690, 735], "plot": [690, 700, 735], "groupby_partit": [690, 735], "470": [690, 735], "475": [690, 735], "1964": [690, 735], "swap": [693, 735], "output_path": [700, 735], "raw_output": [700, 735], "figur": [700, 735], "290994": [703, 735], "118034": [703, 735], "extern": [714, 735], "lf_other": [714, 735], "afoo": [714, 735], "cfoo": [714, 735], "train_lf": [714, 735], "feature_0": [714, 735], "feature_1": [714, 735], "test_lf": [714, 735], "_train": [714, 735], "feature_0_train": [714, 735], "dataframescan": [716, 735], "output_schema": [716, 735], "opaqu": 719, "idiomat": 719, "my_column": 719, "lf5": 735, "lf6": 735, "explain": 735, "sink_ipc": 735, "sink_parquet": 735, "with_context": 735, "intuit": 738, "relat": 738, "broadcast": 738, "emploi": 738, "complement": 738, "plenti": 738, "cde": 738, "fgg": 738, "jjk": 738, "lmn": 738, "opp": 738, "qqr": 738, "by_dtyp": 738, "as_expr": 738, "dispatch": 738, "2024": 738, "1_234_500": 738, "5_000_555": 738, "1234500": 738, "5000555": 738, "2010": 738, "4_500_000": 738, "4500000": 738, "3265500": 738, "by_nam": 738, "zap": 738, "tstamp_tokyo": 738, "987654": 738, "123465": 738, "tstamp_utc": 738, "2025": 738, "666000": 738, "tstamp": 738, "600000": 738, "123000": 738, "666": 738, "td1": 738, "123456": 738, "987000": 738, "td2": 738, "td3": 738, "2m": [738, 815], "456m": 738, "7d": 738, "456789\u00b5": 738, "18d": 738, "999999\u00b5": 738, "23h": 738, "987m": 738, "14d": 738, "16h": 738, "39m": 738, "21d": 738, "456001\u00b5": 738, "is_selector": 738, "obj": 738, "selector_column_nam": 738, "colz": [738, 1059], "include_categor": 738, "set_ord": 738, "2345": 738, "3456": 738, "append_chunk": [744, 1051], "behav": [744, 1051], "super": [744, 1051], "292432": [747, 1051], "549306": [751, 1051], "catnamespac": 768, "56789": [772, 852, 958, 1051], "901234": [772, 852, 958, 1051], "1232e": [779, 1051], "break_point_label": [786, 938, 1051], "break_point": [786, 857, 938, 1051], "category_label": [786, 938, 1051], "breakpoint": [786, 938, 1051], "quick": [787, 1051, 1059], "series_num": [787, 1051], "581139": [787, 1051], "series_str": [787, 1051], "datetimeindex": [789, 1051], "datetimenamespac": 792, "ser": [793, 797, 798, 801, 830, 833], "kathmandu": [797, 798, 830], "0545": [797, 798, 830], "500m": [810, 812, 820, 827], "500000": 810, "500000000": 820, "date_minus_1y_2mon": 822, "165": [826, 833], "series_equ": [826, 833, 1051], "timestamp_u": 831, "978307200000000000": 831, "978393600000000000": 831, "978480000000000000": 831, "005": [839, 1051], "06293300616044681": [839, 1051], "65": [839, 1051], "8568409950394724": [839, 1051], "4000000": [840, 1051], "814697265625": [840, 1051], "bitmask": [854, 1051], "swiftli": [854, 1051], "10734580197236529959": [855, 1051], "3022416320763508302": [855, 1051], "13756996518000038261": [855, 1051], "bin_count": [857, 1051], "occurr": [857, 1051], "a_count": [857, 1051], "listnamespac": 884, "field_2": 915, "n00": 915, "n01": 915, "n02": 915, "2147483648": [920, 1051], "iso3166": [921, 1051], "tur": [921, 1012, 1051], "jpn": [921, 1051], "nld": [921, 1051], "country_lookup": [921, 1051], "japan": [921, 1051], "t\u00fcrkiy": [921, 1051], "netherland": [921, 1051], "unrecognis": [921, 1051], "unspecifi": [921, 1051], "country_nam": [921, 1051], "166667": [934, 1051], "142857": [934, 1051], "peak": [935, 936, 1051], "nanstd": [948, 1051], "858612": [948, 1051], "200": [949, 950, 952, 1051], "150": [950, 1051], "350": [950, 1051], "450": [950, 1051], "dev": [955, 1051], "527525": [955, 1051], "57": [958, 1051, 1059], "frequent": [962, 963, 1051], "mutat": [963, 1051], "2246e": [972, 1024, 1051], "stringnamespac": 979, "orld": 999, "6331e16": [1024, 1051], "lib": [1027, 1051], "int64arrai": [1027, 1051], "a_2": [1028, 1051], "a_3": [1028, 1051], "s_from_str_repr": [1030, 1051], "zero_copy_onli": [1032, 1051], "writabl": [1032, 1051], "complet": [1032, 1051], "presenc": [1032, 1051], "immut": [1032, 1051], "127": [1038, 1051], "seriesview": [1041, 1051], "arraylik": 1051, "dtype_if_empti": 1051, "position": 1051, "scenario": 1051, "chunk_length": 1051, "get_chunk": 1051, "has_valid": 1051, "hist": 1051, "is_boolean": 1051, "is_float": 1051, "is_integ": 1051, "is_numer": [1051, 1059], "is_sort": 1051, "is_tempor": 1051, "is_utf8": 1051, "new_from_index": 1051, "peak_max": 1051, "peak_min": 1051, "set_at_idx": 1051, "two_a": 1058, "__enter__": 1058, "__exit__": 1058, "exc_typ": 1058, "baseexcept": 1058, "exc_val": 1058, "exc_tb": 1058, "tracebacktyp": 1058, "guid": 1059, "easi": 1059, "approxim": 1059, "own": 1059, "machin": 1059, "xdist": 1059, "significantli": 1059, "hardwar": 1059, "setup": 1059, "numeric_dtyp": 1059, "null_probabililti": 1059, "test_numer": 1059, "col0": 1059, "col4": 1059, "29096": 1059, "485": 1059, "2147483647": 1059, "8257e14": 1059, "7508": 1059, "37338": 1059, "7264": 1059, "321": 1059, "16996": 1059, "121": 1059, "361": 1059, "63204": 1059, "1443e235": 1059, "conform": 1059, "ascii_lett": 1059, "id_char": 1059, "alphabet": 1059, "price": 1059, "min_valu": 1059, "max_valu": 1059, "test_price_calcul": 1059, "a101": 1059, "8nin": 1059, "qhoo": 1059, "714": 1059, "544": 1059, "i0e0": 1059, "0000": 1059, "test_miscellan": 1059, "235": 1059, "87": 1059, "186": 1059, "174": 1059, "179": 1059, "213": 1059, "221": 1059, "86": 1059, "255": 1059}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [36, 0, 1, "", "DataType"], [37, 0, 1, "", "Date"], [38, 0, 1, "", "Datetime"], [39, 0, 1, "", "Decimal"], [40, 0, 1, "", "Duration"], [41, 0, 1, "", "Float32"], [42, 0, 1, "", "Float64"], [43, 0, 1, "", "Int16"], [44, 0, 1, "", "Int32"], [45, 0, 1, "", "Int64"], [46, 0, 1, "", "Int8"], [49, 0, 1, "", "List"], [50, 0, 1, "", "Null"], [51, 0, 1, "", "Object"], [1058, 0, 1, "", "SQLContext"], [58, 0, 1, "", "StringCache"], [59, 0, 1, "", "Struct"], [60, 0, 1, "", "Time"], [61, 0, 1, "", "UInt16"], [62, 0, 1, "", "UInt32"], [63, 0, 1, "", "UInt64"], [64, 0, 1, "", "UInt8"], [65, 0, 1, "", "Unknown"], [66, 0, 1, "", "Utf8"], [67, 4, 1, "", "align_frames"], [564, 4, 1, "", "all"], [565, 4, 1, "", "all_horizontal"], [566, 4, 1, "", "any"], [567, 4, 1, "", "any_horizontal"], [568, 4, 1, "", "apply"], [569, 4, 1, "", "approx_unique"], [570, 4, 1, "", "arange"], [571, 4, 1, "", "arctan2"], [572, 4, 1, "", "arctan2d"], [573, 4, 1, "", "arg_sort_by"], [574, 4, 1, "", "arg_where"], [575, 4, 1, "", "avg"], [72, 4, 1, "", "build_info"], [576, 4, 1, "", "coalesce"], [577, 4, 1, "", "col"], [73, 4, 1, "", "collect_all"], [74, 4, 1, "", "concat"], [578, 4, 1, "", "concat_list"], [579, 4, 1, "", "concat_str"], [580, 4, 1, "", "corr"], [581, 4, 1, "", "count"], [582, 4, 1, "", "cov"], [583, 4, 1, "", "cumfold"], [584, 4, 1, "", "cumreduce"], [585, 4, 1, "", "cumsum"], [586, 4, 1, "", "cumsum_horizontal"], [587, 4, 1, "", "date"], [588, 4, 1, "", "date_range"], [589, 4, 1, "", "date_ranges"], [590, 4, 1, "", "datetime"], [591, 4, 1, "", "duration"], [592, 4, 1, "", "element"], [75, 4, 1, "", "enable_string_cache"], [593, 4, 1, "", "exclude"], [594, 4, 1, "", "first"], [595, 4, 1, "", "fold"], [596, 4, 1, "", "format"], [90, 4, 1, "", "from_arrow"], [91, 4, 1, "", "from_dataframe"], [92, 4, 1, "", "from_dict"], [93, 4, 1, "", "from_dicts"], [597, 4, 1, "", "from_epoch"], [94, 4, 1, "", "from_numpy"], [95, 4, 1, "", "from_pandas"], [96, 4, 1, "", "from_records"], [97, 4, 1, "", "from_repr"], [98, 4, 1, "", "get_index_type"], [598, 4, 1, "", "groups"], [599, 4, 1, "", "head"], [600, 4, 1, "", "implode"], [601, 4, 1, "", "int_range"], [602, 4, 1, "", "int_ranges"], [603, 4, 1, "", "last"], [604, 4, 1, "", "lit"], [605, 4, 1, "", "map"], [606, 4, 1, "", "max"], [607, 4, 1, "", "max_horizontal"], [608, 4, 1, "", "mean"], [609, 4, 1, "", "median"], [610, 4, 1, "", "min"], [611, 4, 1, "", "min_horizontal"], [612, 4, 1, "", "n_unique"], [613, 4, 1, "", "ones"], [614, 4, 1, "", "quantile"], [100, 4, 1, "", "read_avro"], [101, 4, 1, "", "read_csv"], [102, 4, 1, "", "read_csv_batched"], [103, 4, 1, "", "read_database"], [104, 4, 1, "", "read_delta"], [105, 4, 1, "", "read_excel"], [106, 4, 1, "", "read_ipc"], [107, 4, 1, "", "read_ipc_schema"], [108, 4, 1, "", "read_json"], [109, 4, 1, "", "read_ndjson"], [110, 4, 1, "", "read_parquet"], [111, 4, 1, "", "read_parquet_schema"], [615, 4, 1, "", "reduce"], [616, 4, 1, "", "repeat"], [617, 4, 1, "", "rolling_corr"], [618, 4, 1, "", "rolling_cov"], [112, 4, 1, "", "scan_csv"], [113, 4, 1, "", "scan_delta"], [114, 4, 1, "", "scan_ipc"], [115, 4, 1, "", "scan_ndjson"], [116, 4, 1, "", "scan_parquet"], [117, 4, 1, "", "scan_pyarrow_dataset"], [619, 4, 1, "", "select"], [738, 6, 0, "-", "selectors"], [118, 4, 1, "", "show_versions"], [620, 4, 1, "", "sql_expr"], [621, 4, 1, "", "std"], [622, 4, 1, "", "struct"], [623, 4, 1, "", "sum"], [624, 4, 1, "", "sum_horizontal"], [625, 4, 1, "", "tail"], [128, 4, 1, "", "threadpool_size"], [626, 4, 1, "", "time"], [627, 4, 1, "", "time_range"], [628, 4, 1, "", "time_ranges"], [129, 4, 1, "", "using_string_cache"], [629, 4, 1, "", "var"], [630, 4, 1, "", "when"], [631, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "restore_defaults"], [9, 1, 1, "", "save"], [10, 1, 1, "", "set_ascii_tables"], [11, 1, 1, "", "set_fmt_float"], [12, 1, 1, "", "set_fmt_str_lengths"], [13, 1, 1, "", "set_streaming_chunk_size"], [14, 1, 1, "", "set_tbl_cell_alignment"], [15, 1, 1, "", "set_tbl_cols"], [16, 1, 1, "", "set_tbl_column_data_type_inline"], [17, 1, 1, "", "set_tbl_dataframe_shape_below"], [18, 1, 1, "", "set_tbl_formatting"], [19, 1, 1, "", "set_tbl_hide_column_data_types"], [20, 1, 1, "", "set_tbl_hide_column_names"], [21, 1, 1, "", "set_tbl_hide_dataframe_shape"], [22, 1, 1, "", "set_tbl_hide_dtype_separator"], [23, 1, 1, "", "set_tbl_rows"], [24, 1, 1, "", "set_tbl_width_chars"], [25, 1, 1, "", "set_verbose"], [26, 1, 1, "", "state"]], "polars.DataFrame": [[132, 1, 1, "", "__dataframe__"], [133, 1, 1, "", "apply"], [134, 1, 1, "", "bottom_k"], [135, 1, 1, "", "clear"], [136, 1, 1, "", "clone"], [137, 2, 1, "", "columns"], [138, 1, 1, "", "corr"], [139, 1, 1, "", "describe"], [140, 1, 1, "", "drop"], [141, 1, 1, "", "drop_in_place"], [142, 1, 1, "", "drop_nulls"], [143, 2, 1, "", "dtypes"], [144, 1, 1, "", "estimated_size"], [145, 1, 1, "", "explode"], [146, 1, 1, "", "extend"], [147, 1, 1, "", "fill_nan"], [148, 1, 1, "", "fill_null"], [149, 1, 1, "", "filter"], [150, 1, 1, "", "find_idx_by_name"], [151, 2, 1, "", "flags"], [152, 1, 1, "", "fold"], [153, 1, 1, "", "frame_equal"], [154, 1, 1, "", "get_column"], [155, 1, 1, "", "get_columns"], [156, 1, 1, "", "glimpse"], [157, 1, 1, "", "groupby"], [158, 1, 1, "", "groupby_dynamic"], [159, 1, 1, "", "groupby_rolling"], [160, 1, 1, "", "hash_rows"], [161, 1, 1, "", "head"], [162, 2, 1, "", "height"], [163, 1, 1, "", "hstack"], [164, 1, 1, "", "insert_at_idx"], [165, 1, 1, "", "interpolate"], [166, 1, 1, "", "is_duplicated"], [167, 1, 1, "", "is_empty"], [168, 1, 1, "", "is_unique"], [169, 1, 1, "", "item"], [170, 1, 1, "", "iter_rows"], [171, 1, 1, "", "iter_slices"], [172, 1, 1, "", "join"], [173, 1, 1, "", "join_asof"], [174, 1, 1, "", "lazy"], [175, 1, 1, "", "limit"], [176, 1, 1, "", "max"], [177, 1, 1, "", "mean"], [178, 1, 1, "", "median"], [179, 1, 1, "", "melt"], [180, 1, 1, "", "merge_sorted"], [181, 1, 1, "", "min"], [182, 1, 1, "", "n_chunks"], [183, 1, 1, "", "n_unique"], [184, 1, 1, "", "null_count"], [185, 1, 1, "", "partition_by"], [186, 1, 1, "", "pipe"], [187, 1, 1, "", "pivot"], [188, 1, 1, "", "product"], [189, 1, 1, "", "quantile"], [190, 1, 1, "", "rechunk"], [191, 1, 1, "", "rename"], [192, 1, 1, "", "replace"], [193, 1, 1, "", "replace_at_idx"], [194, 1, 1, "", "reverse"], [195, 1, 1, "", "row"], [196, 1, 1, "", "rows"], [197, 1, 1, "", "rows_by_key"], [198, 1, 1, "", "sample"], [199, 2, 1, "", "schema"], [200, 1, 1, "", "select"], [201, 1, 1, "", "set_sorted"], [202, 2, 1, "", "shape"], [203, 1, 1, "", "shift"], [204, 1, 1, "", "shift_and_fill"], [205, 1, 1, "", "shrink_to_fit"], [206, 1, 1, "", "slice"], [207, 1, 1, "", "sort"], [208, 1, 1, "", "std"], [209, 1, 1, "", "sum"], [210, 1, 1, "", "tail"], [211, 1, 1, "", "take_every"], [212, 1, 1, "", "to_arrow"], [213, 1, 1, "", "to_dict"], [214, 1, 1, "", "to_dicts"], [215, 1, 1, "", "to_dummies"], [216, 1, 1, "", "to_init_repr"], [217, 1, 1, "", "to_numpy"], [218, 1, 1, "", "to_pandas"], [219, 1, 1, "", "to_series"], [220, 1, 1, "", "to_struct"], [221, 1, 1, "", "top_k"], [222, 1, 1, "", "transpose"], [223, 1, 1, "", "unique"], [224, 1, 1, "", "unnest"], [225, 1, 1, "", "unstack"], [226, 1, 1, "", "update"], [227, 1, 1, "", "upsample"], [228, 1, 1, "", "var"], [229, 1, 1, "", "vstack"], [230, 2, 1, "", "width"], [231, 1, 1, "", "with_columns"], [232, 1, 1, "", "with_row_count"], [27, 1, 1, "", "write_avro"], [28, 1, 1, "", "write_csv"], [29, 1, 1, "", "write_database"], [30, 1, 1, "", "write_delta"], [31, 1, 1, "", "write_excel"], [32, 1, 1, "", "write_ipc"], [33, 1, 1, "", "write_json"], [34, 1, 1, "", "write_ndjson"], [35, 1, 1, "", "write_parquet"]], "polars.DataType": [[36, 1, 1, "", "__init__"]], "polars.Date": [[37, 1, 1, "", "__init__"]], "polars.Datetime": [[38, 1, 1, "", "__init__"]], "polars.Decimal": [[39, 1, 1, "", "__init__"]], "polars.Duration": [[40, 1, 1, "", "__init__"]], "polars.Expr": [[260, 1, 1, "", "abs"], [261, 1, 1, "", "add"], [262, 1, 1, "", "agg_groups"], [263, 1, 1, "", "alias"], [264, 1, 1, "", "all"], [265, 1, 1, "", "and_"], [266, 1, 1, "", "any"], [267, 1, 1, "", "append"], [268, 1, 1, "", "apply"], [269, 1, 1, "", "approx_unique"], [270, 1, 1, "", "arccos"], [271, 1, 1, "", "arccosh"], [272, 1, 1, "", "arcsin"], [273, 1, 1, "", "arcsinh"], [274, 1, 1, "", "arctan"], [275, 1, 1, "", "arctanh"], [276, 1, 1, "", "arg_max"], [277, 1, 1, "", "arg_min"], [278, 1, 1, "", "arg_sort"], [279, 1, 1, "", "arg_true"], [280, 1, 1, "", "arg_unique"], [285, 1, 1, "", "backward_fill"], [291, 1, 1, "", "bottom_k"], [292, 1, 1, "", "cache"], [293, 1, 1, "", "cast"], [296, 1, 1, "", "cbrt"], [297, 1, 1, "", "ceil"], [298, 1, 1, "", "clip"], [299, 1, 1, "", "clip_max"], [300, 1, 1, "", "clip_min"], [301, 1, 1, "", "cos"], [302, 1, 1, "", "cosh"], [303, 1, 1, "", "count"], [304, 1, 1, "", "cumcount"], [305, 1, 1, "", "cummax"], [306, 1, 1, "", "cummin"], [307, 1, 1, "", "cumprod"], [308, 1, 1, "", "cumsum"], [309, 1, 1, "", "cumulative_eval"], [310, 1, 1, "", "cut"], [311, 1, 1, "", "degrees"], [312, 1, 1, "", "diff"], [313, 1, 1, "", "dot"], [314, 1, 1, "", "drop_nans"], [315, 1, 1, "", "drop_nulls"], [357, 1, 1, "", "entropy"], [358, 1, 1, "", "eq"], [359, 1, 1, "", "eq_missing"], [360, 1, 1, "", "ewm_mean"], [361, 1, 1, "", "ewm_std"], [362, 1, 1, "", "ewm_var"], [363, 1, 1, "", "exclude"], [364, 1, 1, "", "exp"], [365, 1, 1, "", "explode"], [366, 1, 1, "", "extend_constant"], [367, 1, 1, "", "fill_nan"], [368, 1, 1, "", "fill_null"], [369, 1, 1, "", "filter"], [370, 1, 1, "", "first"], [371, 1, 1, "", "flatten"], [372, 1, 1, "", "floor"], [373, 1, 1, "", "floordiv"], [374, 1, 1, "", "forward_fill"], [375, 1, 1, "", "from_json"], [376, 1, 1, "", "ge"], [377, 1, 1, "", "gt"], [378, 1, 1, "", "hash"], [379, 1, 1, "", "head"], [380, 1, 1, "", "implode"], [381, 1, 1, "", "inspect"], [382, 1, 1, "", "interpolate"], [383, 1, 1, "", "is_between"], [384, 1, 1, "", "is_duplicated"], [385, 1, 1, "", "is_finite"], [386, 1, 1, "", "is_first"], [387, 1, 1, "", "is_in"], [388, 1, 1, "", "is_infinite"], [389, 1, 1, "", "is_nan"], [390, 1, 1, "", "is_not"], [391, 1, 1, "", "is_not_nan"], [392, 1, 1, "", "is_not_null"], [393, 1, 1, "", "is_null"], [394, 1, 1, "", "is_unique"], [395, 1, 1, "", "keep_name"], [396, 1, 1, "", "kurtosis"], [397, 1, 1, "", "last"], [398, 1, 1, "", "le"], [399, 1, 1, "", "len"], [400, 1, 1, "", "limit"], [433, 1, 1, "", "log"], [434, 1, 1, "", "log10"], [435, 1, 1, "", "log1p"], [436, 1, 1, "", "lower_bound"], [437, 1, 1, "", "lt"], [438, 1, 1, "", "map"], [439, 1, 1, "", "map_alias"], [440, 1, 1, "", "map_dict"], [441, 1, 1, "", "max"], [442, 1, 1, "", "mean"], [443, 1, 1, "", "median"], [454, 1, 1, "", "min"], [455, 1, 1, "", "mod"], [456, 1, 1, "", "mode"], [457, 1, 1, "", "mul"], [458, 1, 1, "", "n_unique"], [459, 1, 1, "", "nan_max"], [460, 1, 1, "", "nan_min"], [461, 1, 1, "", "ne"], [462, 1, 1, "", "ne_missing"], [463, 1, 1, "", "null_count"], [464, 1, 1, "", "or_"], [465, 1, 1, "", "over"], [466, 1, 1, "", "pct_change"], [467, 1, 1, "", "pipe"], [468, 1, 1, "", "pow"], [469, 1, 1, "", "prefix"], [470, 1, 1, "", "product"], [471, 1, 1, "", "qcut"], [472, 1, 1, "", "quantile"], [473, 1, 1, "", "radians"], [474, 1, 1, "", "rank"], [475, 1, 1, "", "rechunk"], [476, 1, 1, "", "reinterpret"], [477, 1, 1, "", "repeat_by"], [478, 1, 1, "", "reshape"], [479, 1, 1, "", "reverse"], [480, 1, 1, "", "rle"], [481, 1, 1, "", "rle_id"], [482, 1, 1, "", "rolling_apply"], [483, 1, 1, "", "rolling_max"], [484, 1, 1, "", "rolling_mean"], [485, 1, 1, "", "rolling_median"], [486, 1, 1, "", "rolling_min"], [487, 1, 1, "", "rolling_quantile"], [488, 1, 1, "", "rolling_skew"], [489, 1, 1, "", "rolling_std"], [490, 1, 1, "", "rolling_sum"], [491, 1, 1, "", "rolling_var"], [492, 1, 1, "", "round"], [493, 1, 1, "", "sample"], [494, 1, 1, "", "search_sorted"], [495, 1, 1, "", "set_sorted"], [496, 1, 1, "", "shift"], [497, 1, 1, "", "shift_and_fill"], [498, 1, 1, "", "shrink_dtype"], [499, 1, 1, "", "shuffle"], [500, 1, 1, "", "sign"], [501, 1, 1, "", "sin"], [502, 1, 1, "", "sinh"], [503, 1, 1, "", "skew"], [504, 1, 1, "", "slice"], [505, 1, 1, "", "sort"], [506, 1, 1, "", "sort_by"], [507, 1, 1, "", "sqrt"], [508, 1, 1, "", "std"], [546, 1, 1, "", "sub"], [547, 1, 1, "", "suffix"], [548, 1, 1, "", "sum"], [549, 1, 1, "", "tail"], [550, 1, 1, "", "take"], [551, 1, 1, "", "take_every"], [552, 1, 1, "", "tan"], [553, 1, 1, "", "tanh"], [554, 1, 1, "", "to_physical"], [555, 1, 1, "", "top_k"], [556, 1, 1, "", "truediv"], [557, 1, 1, "", "unique"], [558, 1, 1, "", "unique_counts"], [559, 1, 1, "", "upper_bound"], [560, 1, 1, "", "value_counts"], [561, 1, 1, "", "var"], [562, 1, 1, "", "where"], [563, 1, 1, "", "xor"]], "polars.Expr.arr": [[281, 1, 1, "", "max"], [282, 1, 1, "", "min"], [283, 1, 1, "", "sum"], [284, 1, 1, "", "unique"]], "polars.Expr.bin": [[286, 1, 1, "", "contains"], [287, 1, 1, "", "decode"], [288, 1, 1, "", "encode"], [289, 1, 1, "", "ends_with"], [290, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[294, 1, 1, "", "get_categories"], [295, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[316, 1, 1, "", "base_utc_offset"], [317, 1, 1, "", "cast_time_unit"], [318, 1, 1, "", "combine"], [319, 1, 1, "", "convert_time_zone"], [320, 1, 1, "", "date"], [321, 1, 1, "", "datetime"], [322, 1, 1, "", "day"], [323, 1, 1, "", "days"], [324, 1, 1, "", "dst_offset"], [325, 1, 1, "", "epoch"], [326, 1, 1, "", "hour"], [327, 1, 1, "", "hours"], [328, 1, 1, "", "is_leap_year"], [329, 1, 1, "", "iso_year"], [330, 1, 1, "", "microsecond"], [331, 1, 1, "", "microseconds"], [332, 1, 1, "", "millisecond"], [333, 1, 1, "", "milliseconds"], [334, 1, 1, "", "minute"], [335, 1, 1, "", "minutes"], [336, 1, 1, "", "month"], [337, 1, 1, "", "month_end"], [338, 1, 1, "", "month_start"], [339, 1, 1, "", "nanosecond"], [340, 1, 1, "", "nanoseconds"], [341, 1, 1, "", "offset_by"], [342, 1, 1, "", "ordinal_day"], [343, 1, 1, "", "quarter"], [344, 1, 1, "", "replace_time_zone"], [345, 1, 1, "", "round"], [346, 1, 1, "", "second"], [347, 1, 1, "", "seconds"], [348, 1, 1, "", "strftime"], [349, 1, 1, "", "time"], [350, 1, 1, "", "timestamp"], [351, 1, 1, "", "to_string"], [352, 1, 1, "", "truncate"], [353, 1, 1, "", "week"], [354, 1, 1, "", "weekday"], [355, 1, 1, "", "with_time_unit"], [356, 1, 1, "", "year"]], "polars.Expr.list": [[401, 1, 1, "", "all"], [402, 1, 1, "", "any"], [403, 1, 1, "", "arg_max"], [404, 1, 1, "", "arg_min"], [405, 1, 1, "", "concat"], [406, 1, 1, "", "contains"], [407, 1, 1, "", "count_match"], [408, 1, 1, "", "diff"], [409, 1, 1, "", "eval"], [410, 1, 1, "", "explode"], [411, 1, 1, "", "first"], [412, 1, 1, "", "get"], [413, 1, 1, "", "head"], [414, 1, 1, "", "join"], [415, 1, 1, "", "last"], [416, 1, 1, "", "lengths"], [417, 1, 1, "", "max"], [418, 1, 1, "", "mean"], [419, 1, 1, "", "min"], [420, 1, 1, "", "reverse"], [421, 1, 1, "", "set_difference"], [422, 1, 1, "", "set_intersection"], [423, 1, 1, "", "set_symmetric_difference"], [424, 1, 1, "", "set_union"], [425, 1, 1, "", "shift"], [426, 1, 1, "", "slice"], [427, 1, 1, "", "sort"], [428, 1, 1, "", "sum"], [429, 1, 1, "", "tail"], [430, 1, 1, "", "take"], [431, 1, 1, "", "to_struct"], [432, 1, 1, "", "unique"]], "polars.Expr.meta": [[444, 1, 1, "", "eq"], [445, 1, 1, "", "has_multiple_outputs"], [446, 1, 1, "", "is_regex_projection"], [447, 1, 1, "", "ne"], [448, 1, 1, "", "output_name"], [449, 1, 1, "", "pop"], [450, 1, 1, "", "root_names"], [451, 1, 1, "", "tree_format"], [452, 1, 1, "", "undo_aliases"], [453, 1, 1, "", "write_json"]], "polars.Expr.str": [[509, 1, 1, "", "concat"], [510, 1, 1, "", "contains"], [511, 1, 1, "", "count_match"], [512, 1, 1, "", "decode"], [513, 1, 1, "", "encode"], [514, 1, 1, "", "ends_with"], [515, 1, 1, "", "explode"], [516, 1, 1, "", "extract"], [517, 1, 1, "", "extract_all"], [518, 1, 1, "", "json_extract"], [519, 1, 1, "", "json_path_match"], [520, 1, 1, "", "lengths"], [521, 1, 1, "", "ljust"], [522, 1, 1, "", "lstrip"], [523, 1, 1, "", "n_chars"], [524, 1, 1, "", "parse_int"], [525, 1, 1, "", "replace"], [526, 1, 1, "", "replace_all"], [527, 1, 1, "", "rjust"], [528, 1, 1, "", "rstrip"], [529, 1, 1, "", "slice"], [530, 1, 1, "", "split"], [531, 1, 1, "", "split_exact"], [532, 1, 1, "", "splitn"], [533, 1, 1, "", "starts_with"], [534, 1, 1, "", "strip"], [535, 1, 1, "", "strptime"], [536, 1, 1, "", "to_date"], [537, 1, 1, "", "to_datetime"], [538, 1, 1, "", "to_decimal"], [539, 1, 1, "", "to_lowercase"], [540, 1, 1, "", "to_time"], [541, 1, 1, "", "to_titlecase"], [542, 1, 1, "", "to_uppercase"], [543, 1, 1, "", "zfill"]], "polars.Expr.struct": [[544, 1, 1, "", "field"], [545, 1, 1, "", "rename_fields"]], "polars.Float32": [[41, 1, 1, "", "__init__"]], "polars.Float64": [[42, 1, 1, "", "__init__"]], "polars.Int16": [[43, 1, 1, "", "__init__"]], "polars.Int32": [[44, 1, 1, "", "__init__"]], "polars.Int64": [[45, 1, 1, "", "__init__"]], "polars.Int8": [[46, 1, 1, "", "__init__"]], "polars.LazyFrame": [[653, 1, 1, "", "bottom_k"], [654, 1, 1, "", "cache"], [655, 1, 1, "", "clear"], [656, 1, 1, "", "clone"], [657, 1, 1, "", "collect"], [658, 2, 1, "", "columns"], [659, 1, 1, "", "drop"], [660, 1, 1, "", "drop_nulls"], [661, 2, 1, "", "dtypes"], [662, 1, 1, "", "explain"], [663, 1, 1, "", "explode"], [664, 1, 1, "", "fetch"], [665, 1, 1, "", "fill_nan"], [666, 1, 1, "", "fill_null"], [667, 1, 1, "", "filter"], [668, 1, 1, "", "first"], [669, 1, 1, "", "from_json"], [670, 1, 1, "", "groupby"], [671, 1, 1, "", "groupby_dynamic"], [672, 1, 1, "", "groupby_rolling"], [673, 1, 1, "", "head"], [674, 1, 1, "", "inspect"], [675, 1, 1, "", "interpolate"], [676, 1, 1, "", "join"], [677, 1, 1, "", "join_asof"], [678, 1, 1, "", "last"], [679, 1, 1, "", "lazy"], [680, 1, 1, "", "limit"], [681, 1, 1, "", "map"], [682, 1, 1, "", "max"], [683, 1, 1, "", "mean"], [684, 1, 1, "", "median"], [685, 1, 1, "", "melt"], [686, 1, 1, "", "merge_sorted"], [687, 1, 1, "", "min"], [688, 1, 1, "", "null_count"], [689, 1, 1, "", "pipe"], [690, 1, 1, "", "profile"], [691, 1, 1, "", "quantile"], [692, 1, 1, "", "read_json"], [693, 1, 1, "", "rename"], [694, 1, 1, "", "reverse"], [695, 2, 1, "", "schema"], [696, 1, 1, "", "select"], [697, 1, 1, "", "set_sorted"], [698, 1, 1, "", "shift"], [699, 1, 1, "", "shift_and_fill"], [700, 1, 1, "", "show_graph"], [47, 1, 1, "", "sink_ipc"], [48, 1, 1, "", "sink_parquet"], [701, 1, 1, "", "slice"], [702, 1, 1, "", "sort"], [703, 1, 1, "", "std"], [704, 1, 1, "", "sum"], [705, 1, 1, "", "tail"], [706, 1, 1, "", "take_every"], [707, 1, 1, "", "top_k"], [708, 1, 1, "", "unique"], [709, 1, 1, "", "unnest"], [710, 1, 1, "", "update"], [711, 1, 1, "", "var"], [712, 2, 1, "", "width"], [713, 1, 1, "", "with_columns"], [714, 1, 1, "", "with_context"], [715, 1, 1, "", "with_row_count"], [716, 1, 1, "", "write_json"]], "polars.List": [[49, 1, 1, "", "__init__"]], "polars.Null": [[50, 1, 1, "", "__init__"]], "polars.Object": [[51, 1, 1, "", "__init__"]], "polars.SQLContext": [[1058, 1, 1, "", "__enter__"], [1058, 1, 1, "", "__exit__"], [1058, 1, 1, "", "__init__"], [52, 1, 1, "", "execute"], [53, 1, 1, "", "register"], [54, 1, 1, "", "register_globals"], [55, 1, 1, "", "register_many"], [56, 1, 1, "", "tables"], [57, 1, 1, "", "unregister"]], "polars.Series": [[740, 1, 1, "", "abs"], [741, 1, 1, "", "alias"], [742, 1, 1, "", "all"], [743, 1, 1, "", "any"], [744, 1, 1, "", "append"], [745, 1, 1, "", "apply"], [746, 1, 1, "", "arccos"], [747, 1, 1, "", "arccosh"], [748, 1, 1, "", "arcsin"], [749, 1, 1, "", "arcsinh"], [750, 1, 1, "", "arctan"], [751, 1, 1, "", "arctanh"], [752, 1, 1, "", "arg_max"], [753, 1, 1, "", "arg_min"], [754, 1, 1, "", "arg_sort"], [755, 1, 1, "", "arg_true"], [756, 1, 1, "", "arg_unique"], [766, 1, 1, "", "bottom_k"], [767, 1, 1, "", "cast"], [768, 3, 1, "", "cat"], [771, 1, 1, "", "cbrt"], [772, 1, 1, "", "ceil"], [773, 1, 1, "", "chunk_lengths"], [774, 1, 1, "", "clear"], [775, 1, 1, "", "clip"], [776, 1, 1, "", "clip_max"], [777, 1, 1, "", "clip_min"], [778, 1, 1, "", "clone"], [779, 1, 1, "", "cos"], [780, 1, 1, "", "cosh"], [781, 1, 1, "", "cummax"], [782, 1, 1, "", "cummin"], [783, 1, 1, "", "cumprod"], [784, 1, 1, "", "cumsum"], [785, 1, 1, "", "cumulative_eval"], [786, 1, 1, "", "cut"], [787, 1, 1, "", "describe"], [788, 1, 1, "", "diff"], [789, 1, 1, "", "dot"], [790, 1, 1, "", "drop_nans"], [791, 1, 1, "", "drop_nulls"], [792, 3, 1, "", "dt"], [838, 3, 1, "", "dtype"], [839, 1, 1, "", "entropy"], [840, 1, 1, "", "estimated_size"], [841, 1, 1, "", "ewm_mean"], [842, 1, 1, "", "ewm_std"], [843, 1, 1, "", "ewm_var"], [844, 1, 1, "", "exp"], [845, 1, 1, "", "explode"], [846, 1, 1, "", "extend"], [847, 1, 1, "", "extend_constant"], [848, 1, 1, "", "fill_nan"], [849, 1, 1, "", "fill_null"], [850, 1, 1, "", "filter"], [851, 3, 1, "", "flags"], [852, 1, 1, "", "floor"], [853, 1, 1, "", "get_chunks"], [854, 1, 1, "", "has_validity"], [855, 1, 1, "", "hash"], [856, 1, 1, "", "head"], [857, 1, 1, "", "hist"], [858, 1, 1, "", "implode"], [859, 3, 1, "", "inner_dtype"], [860, 1, 1, "", "interpolate"], [861, 1, 1, "", "is_between"], [862, 1, 1, "", "is_boolean"], [863, 1, 1, "", "is_duplicated"], [864, 1, 1, "", "is_empty"], [865, 1, 1, "", "is_finite"], [866, 1, 1, "", "is_first"], [867, 1, 1, "", "is_float"], [868, 1, 1, "", "is_in"], [869, 1, 1, "", "is_infinite"], [870, 1, 1, "", "is_integer"], [871, 1, 1, "", "is_nan"], [872, 1, 1, "", "is_not_nan"], [873, 1, 1, "", "is_not_null"], [874, 1, 1, "", "is_null"], [875, 1, 1, "", "is_numeric"], [876, 1, 1, "", "is_sorted"], [877, 1, 1, "", "is_temporal"], [878, 1, 1, "", "is_unique"], [879, 1, 1, "", "is_utf8"], [880, 1, 1, "", "item"], [881, 1, 1, "", "kurtosis"], [882, 1, 1, "", "len"], [883, 1, 1, "", "limit"], [884, 3, 1, "", "list"], [917, 1, 1, "", "log"], [918, 1, 1, "", "log10"], [919, 1, 1, "", "log1p"], [920, 1, 1, "", "lower_bound"], [921, 1, 1, "", "map_dict"], [922, 1, 1, "", "max"], [923, 1, 1, "", "mean"], [924, 1, 1, "", "median"], [925, 1, 1, "", "min"], [926, 1, 1, "", "mode"], [927, 1, 1, "", "n_chunks"], [928, 1, 1, "", "n_unique"], [929, 3, 1, "", "name"], [930, 1, 1, "", "nan_max"], [931, 1, 1, "", "nan_min"], [932, 1, 1, "", "new_from_index"], [933, 1, 1, "", "null_count"], [934, 1, 1, "", "pct_change"], [935, 1, 1, "", "peak_max"], [936, 1, 1, "", "peak_min"], [937, 1, 1, "", "product"], [938, 1, 1, "", "qcut"], [939, 1, 1, "", "quantile"], [940, 1, 1, "", "rank"], [941, 1, 1, "", "rechunk"], [942, 1, 1, "", "reinterpret"], [943, 1, 1, "", "rename"], [944, 1, 1, "", "reshape"], [945, 1, 1, "", "reverse"], [946, 1, 1, "", "rle"], [947, 1, 1, "", "rle_id"], [948, 1, 1, "", "rolling_apply"], [949, 1, 1, "", "rolling_max"], [950, 1, 1, "", "rolling_mean"], [951, 1, 1, "", "rolling_median"], [952, 1, 1, "", "rolling_min"], [953, 1, 1, "", "rolling_quantile"], [954, 1, 1, "", "rolling_skew"], [955, 1, 1, "", "rolling_std"], [956, 1, 1, "", "rolling_sum"], [957, 1, 1, "", "rolling_var"], [958, 1, 1, "", "round"], [959, 1, 1, "", "sample"], [960, 1, 1, "", "search_sorted"], [961, 1, 1, "", "series_equal"], [962, 1, 1, "", "set"], [963, 1, 1, "", "set_at_idx"], [964, 1, 1, "", "set_sorted"], [965, 3, 1, "", "shape"], [966, 1, 1, "", "shift"], [967, 1, 1, "", "shift_and_fill"], [968, 1, 1, "", "shrink_dtype"], [969, 1, 1, "", "shrink_to_fit"], [970, 1, 1, "", "shuffle"], [971, 1, 1, "", "sign"], [972, 1, 1, "", "sin"], [973, 1, 1, "", "sinh"], [974, 1, 1, "", "skew"], [975, 1, 1, "", "slice"], [976, 1, 1, "", "sort"], [977, 1, 1, "", "sqrt"], [978, 1, 1, "", "std"], [979, 3, 1, "", "str"], [1020, 1, 1, "", "sum"], [1021, 1, 1, "", "tail"], [1022, 1, 1, "", "take"], [1023, 1, 1, "", "take_every"], [1024, 1, 1, "", "tan"], [1025, 1, 1, "", "tanh"], [1026, 3, 1, "", "time_unit"], [1027, 1, 1, "", "to_arrow"], [1028, 1, 1, "", "to_dummies"], [1029, 1, 1, "", "to_frame"], [1030, 1, 1, "", "to_init_repr"], [1031, 1, 1, "", "to_list"], [1032, 1, 1, "", "to_numpy"], [1033, 1, 1, "", "to_pandas"], [1034, 1, 1, "", "to_physical"], [1035, 1, 1, "", "top_k"], [1036, 1, 1, "", "unique"], [1037, 1, 1, "", "unique_counts"], [1038, 1, 1, "", "upper_bound"], [1039, 1, 1, "", "value_counts"], [1040, 1, 1, "", "var"], [1041, 1, 1, "", "view"], [1042, 1, 1, "", "zip_with"]], "polars.Series.arr": [[757, 1, 1, "", "max"], [758, 1, 1, "", "min"], [759, 1, 1, "", "sum"], [760, 1, 1, "", "unique"]], "polars.Series.bin": [[761, 1, 1, "", "contains"], [762, 1, 1, "", "decode"], [763, 1, 1, "", "encode"], [764, 1, 1, "", "ends_with"], [765, 1, 1, "", "starts_with"]], "polars.Series.cat": [[769, 1, 1, "", "get_categories"], [770, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[793, 1, 1, "", "base_utc_offset"], [794, 1, 1, "", "cast_time_unit"], [795, 1, 1, "", "combine"], [796, 1, 1, "", "convert_time_zone"], [797, 1, 1, "", "date"], [798, 1, 1, "", "datetime"], [799, 1, 1, "", "day"], [800, 1, 1, "", "days"], [801, 1, 1, "", "dst_offset"], [802, 1, 1, "", "epoch"], [803, 1, 1, "", "hour"], [804, 1, 1, "", "hours"], [805, 1, 1, "", "is_leap_year"], [806, 1, 1, "", "iso_year"], [807, 1, 1, "", "max"], [808, 1, 1, "", "mean"], [809, 1, 1, "", "median"], [810, 1, 1, "", "microsecond"], [811, 1, 1, "", "microseconds"], [812, 1, 1, "", "millisecond"], [813, 1, 1, "", "milliseconds"], [814, 1, 1, "", "min"], [815, 1, 1, "", "minute"], [816, 1, 1, "", "minutes"], [817, 1, 1, "", "month"], [818, 1, 1, "", "month_end"], [819, 1, 1, "", "month_start"], [820, 1, 1, "", "nanosecond"], [821, 1, 1, "", "nanoseconds"], [822, 1, 1, "", "offset_by"], [823, 1, 1, "", "ordinal_day"], [824, 1, 1, "", "quarter"], [825, 1, 1, "", "replace_time_zone"], [826, 1, 1, "", "round"], [827, 1, 1, "", "second"], [828, 1, 1, "", "seconds"], [829, 1, 1, "", "strftime"], [830, 1, 1, "", "time"], [831, 1, 1, "", "timestamp"], [832, 1, 1, "", "to_string"], [833, 1, 1, "", "truncate"], [834, 1, 1, "", "week"], [835, 1, 1, "", "weekday"], [836, 1, 1, "", "with_time_unit"], [837, 1, 1, "", "year"]], "polars.Series.list": [[885, 1, 1, "", "all"], [886, 1, 1, "", "any"], [887, 1, 1, "", "arg_max"], [888, 1, 1, "", "arg_min"], [889, 1, 1, "", "concat"], [890, 1, 1, "", "contains"], [891, 1, 1, "", "count_match"], [892, 1, 1, "", "diff"], [893, 1, 1, "", "eval"], [894, 1, 1, "", "explode"], [895, 1, 1, "", "first"], [896, 1, 1, "", "get"], [897, 1, 1, "", "head"], [898, 1, 1, "", "join"], [899, 1, 1, "", "last"], [900, 1, 1, "", "lengths"], [901, 1, 1, "", "max"], [902, 1, 1, "", "mean"], [903, 1, 1, "", "min"], [904, 1, 1, "", "reverse"], [905, 1, 1, "", "set_difference"], [906, 1, 1, "", "set_intersection"], [907, 1, 1, "", "set_symmetric_difference"], [908, 1, 1, "", "set_union"], [909, 1, 1, "", "shift"], [910, 1, 1, "", "slice"], [911, 1, 1, "", "sort"], [912, 1, 1, "", "sum"], [913, 1, 1, "", "tail"], [914, 1, 1, "", "take"], [915, 1, 1, "", "to_struct"], [916, 1, 1, "", "unique"]], "polars.Series.str": [[980, 1, 1, "", "concat"], [981, 1, 1, "", "contains"], [982, 1, 1, "", "count_match"], [983, 1, 1, "", "decode"], [984, 1, 1, "", "encode"], [985, 1, 1, "", "ends_with"], [986, 1, 1, "", "explode"], [987, 1, 1, "", "extract"], [988, 1, 1, "", "extract_all"], [989, 1, 1, "", "json_extract"], [990, 1, 1, "", "json_path_match"], [991, 1, 1, "", "lengths"], [992, 1, 1, "", "ljust"], [993, 1, 1, "", "lstrip"], [994, 1, 1, "", "n_chars"], [995, 1, 1, "", "parse_int"], [996, 1, 1, "", "replace"], [997, 1, 1, "", "replace_all"], [998, 1, 1, "", "rjust"], [999, 1, 1, "", "rstrip"], [1000, 1, 1, "", "slice"], [1001, 1, 1, "", "split"], [1002, 1, 1, "", "split_exact"], [1003, 1, 1, "", "splitn"], [1004, 1, 1, "", "starts_with"], [1005, 1, 1, "", "strip"], [1006, 1, 1, "", "strptime"], [1007, 1, 1, "", "to_date"], [1008, 1, 1, "", "to_datetime"], [1009, 1, 1, "", "to_decimal"], [1010, 1, 1, "", "to_lowercase"], [1011, 1, 1, "", "to_time"], [1012, 1, 1, "", "to_titlecase"], [1013, 1, 1, "", "to_uppercase"], [1014, 1, 1, "", "zfill"]], "polars.Series.struct": [[1015, 1, 1, "", "field"], [1016, 3, 1, "", "fields"], [1017, 1, 1, "", "rename_fields"], [1018, 3, 1, "", "schema"], [1019, 1, 1, "", "unnest"]], "polars.StringCache": [[58, 1, 1, "", "__init__"]], "polars.Struct": [[59, 1, 1, "", "__init__"]], "polars.Time": [[60, 1, 1, "", "__init__"]], "polars.UInt16": [[61, 1, 1, "", "__init__"]], "polars.UInt32": [[62, 1, 1, "", "__init__"]], "polars.UInt64": [[63, 1, 1, "", "__init__"]], "polars.UInt8": [[64, 1, 1, "", "__init__"]], "polars.Unknown": [[65, 1, 1, "", "__init__"]], "polars.Utf8": [[66, 1, 1, "", "__init__"]], "polars.api": [[68, 4, 1, "", "register_dataframe_namespace"], [69, 4, 1, "", "register_expr_namespace"], [70, 4, 1, "", "register_lazyframe_namespace"], [71, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[233, 1, 1, "", "__iter__"], [234, 1, 1, "", "agg"], [235, 1, 1, "", "all"], [236, 1, 1, "", "apply"], [237, 1, 1, "", "count"], [238, 1, 1, "", "first"], [239, 1, 1, "", "head"], [240, 1, 1, "", "last"], [241, 1, 1, "", "max"], [242, 1, 1, "", "mean"], [243, 1, 1, "", "median"], [244, 1, 1, "", "min"], [245, 1, 1, "", "n_unique"], [246, 1, 1, "", "quantile"], [247, 1, 1, "", "sum"], [248, 1, 1, "", "tail"]], "polars.exceptions": [[76, 5, 1, "", "ArrowError"], [77, 5, 1, "", "ColumnNotFoundError"], [78, 5, 1, "", "ComputeError"], [79, 5, 1, "", "DuplicateError"], [80, 5, 1, "", "InvalidOperationError"], [81, 5, 1, "", "NoDataError"], [82, 5, 1, "", "NoRowsReturnedError"], [83, 5, 1, "", "PolarsPanicError"], [84, 5, 1, "", "RowsError"], [85, 5, 1, "", "SchemaError"], [86, 5, 1, "", "SchemaFieldNotFoundError"], [87, 5, 1, "", "ShapeError"], [88, 5, 1, "", "StructFieldNotFoundError"], [89, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[99, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[717, 1, 1, "", "agg"], [718, 1, 1, "", "all"], [719, 1, 1, "", "apply"], [720, 1, 1, "", "count"], [721, 1, 1, "", "first"], [722, 1, 1, "", "head"], [723, 1, 1, "", "last"], [724, 1, 1, "", "max"], [725, 1, 1, "", "mean"], [726, 1, 1, "", "median"], [727, 1, 1, "", "min"], [728, 1, 1, "", "n_unique"], [729, 1, 1, "", "quantile"], [730, 1, 1, "", "sum"], [731, 1, 1, "", "tail"]], "polars.selectors": [[738, 4, 1, "", "all"], [738, 4, 1, "", "by_dtype"], [738, 4, 1, "", "by_name"], [738, 4, 1, "", "contains"], [738, 4, 1, "", "datetime"], [738, 4, 1, "", "duration"], [738, 4, 1, "", "ends_with"], [738, 4, 1, "", "first"], [738, 4, 1, "", "float"], [738, 4, 1, "", "integer"], [738, 4, 1, "", "is_selector"], [738, 4, 1, "", "last"], [738, 4, 1, "", "matches"], [738, 4, 1, "", "numeric"], [738, 4, 1, "", "selector_column_names"], [738, 4, 1, "", "starts_with"], [738, 4, 1, "", "string"], [738, 4, 1, "", "temporal"]], "polars.testing": [[119, 4, 1, "", "assert_frame_equal"], [120, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[121, 0, 1, "", "column"], [122, 4, 1, "", "columns"], [123, 4, 1, "", "create_list_strategy"], [124, 4, 1, "", "dataframes"], [125, 4, 1, "", "load_profile"], [126, 4, 1, "", "series"], [127, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[121, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"extend": [1, 146, 846], "api": [1, 68, 69, 70, 71, 650], "provid": 1, "new": 1, "function": [1, 130, 638, 649, 738], "avail": 1, "registr": 1, "exampl": [1, 738, 1059], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1059], "arrai": [2, 632, 1043], "binari": [3, 633, 644, 1045], "boolean": [4, 634, 1046], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 130], "activate_decim": 6, "load": [7, 130], "restore_default": 8, "save": [9, 130], "set_ascii_t": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_streaming_chunk_s": 13, "set_tbl_cell_align": 14, "set_tbl_col": 15, "set_tbl_column_data_type_inlin": 16, "set_tbl_dataframe_shape_below": 17, "set_tbl_format": 18, "set_tbl_hide_column_data_typ": 19, "set_tbl_hide_column_nam": 20, "set_tbl_hide_dataframe_shap": 21, "set_tbl_hide_dtype_separ": 22, "set_tbl_row": 23, "set_tbl_width_char": 24, "set_verbos": 25, "state": [26, 130], "datafram": [27, 28, 29, 30, 31, 32, 33, 34, 35, 124, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254], "write_avro": 27, "write_csv": 28, "write_databas": 29, "write_delta": 30, "write_excel": 31, "write_ipc": 32, "write_json": [33, 453, 716], "write_ndjson": 34, "write_parquet": 35, "datatyp": 36, "date": [37, 320, 587, 797], "datetim": [38, 321, 590, 798], "decim": 39, "durat": [40, 591], "float32": 41, "float64": 42, "int16": 43, "int32": 44, "int64": 45, "int8": 46, "lazyfram": [47, 48, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735], "sink_ipc": 47, "sink_parquet": 48, "list": [49, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 640, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 1052], "null": 50, "object": 51, "sqlcontext": [52, 53, 54, 55, 56, 57], "execut": 52, "regist": 53, "register_glob": 54, "register_mani": 55, "tabl": 56, "unregist": 57, "stringcach": [58, 649], "struct": [59, 544, 545, 622, 646, 1015, 1016, 1017, 1018, 1019, 1056], "time": [60, 349, 626, 830], "uint16": 61, "uint32": 62, "uint64": 63, "uint8": 64, "unknown": 65, "utf8": 66, "align_fram": 67, "register_dataframe_namespac": 68, "register_expr_namespac": 69, "register_lazyframe_namespac": 70, "register_series_namespac": 71, "build_info": 72, "collect_al": 73, "concat": [74, 405, 509, 889, 980], "enable_string_cach": 75, "except": [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 258], "arrowerror": 76, "columnnotfounderror": 77, "computeerror": 78, "duplicateerror": 79, "invalidoperationerror": 80, "nodataerror": 81, "norowsreturnederror": 82, "polarspanicerror": 83, "rowserror": 84, "schemaerror": 85, "schemafieldnotfounderror": 86, "shapeerror": 87, "structfieldnotfounderror": 88, "toomanyrowsreturnederror": 89, "from_arrow": 90, "from_datafram": 91, "from_dict": [92, 93], "from_numpi": 94, "from_panda": 95, "from_record": 96, "from_repr": 97, "get_index_typ": 98, "io": 99, "csv": [99, 651], "batched_read": 99, "batchedcsvread": [99, 651], "next_batch": 99, "read_avro": 100, "read_csv": 101, "read_csv_batch": 102, "read_databas": 103, "read_delta": 104, "read_excel": 105, "read_ipc": 106, "read_ipc_schema": 107, "read_json": [108, 692], "read_ndjson": 109, "read_parquet": 110, "read_parquet_schema": 111, "scan_csv": 112, "scan_delta": 113, "scan_ipc": 114, "scan_ndjson": 115, "scan_parquet": 116, "scan_pyarrow_dataset": 117, "show_vers": 118, "test": [119, 120, 121, 122, 123, 124, 125, 126, 127, 1059], "assert_frame_equ": 119, "assert_series_equ": 120, "parametr": [121, 122, 123, 124, 125, 126, 127, 1059], "column": [121, 122, 137, 636, 658], "create_list_strategi": 123, "load_profil": 125, "seri": [126, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1051], "set_profil": 127, "threadpool_s": 128, "using_string_cach": 129, "option": 130, "current": 130, "us": 130, "context": 130, "manag": 130, "decor": 130, "aggreg": [131, 259, 652, 739], "__dataframe__": 132, "appli": [133, 236, 268, 568, 719, 745], "bottom_k": [134, 291, 653, 766], "clear": [135, 655, 774], "clone": [136, 656, 778], "corr": [138, 580], "describ": [139, 787], "drop": [140, 659], "drop_in_plac": 141, "drop_nul": [142, 315, 660, 791], "dtype": [143, 661, 838], "estimated_s": [144, 840], "explod": [145, 365, 410, 515, 663, 845, 894, 986], "fill_nan": [147, 367, 665, 848], "fill_nul": [148, 368, 666, 849], "filter": [149, 369, 667, 850], "find_idx_by_nam": 150, "flag": [151, 851], "fold": [152, 595], "frame_equ": 153, "get_column": [154, 155], "glimps": 156, "groupbi": [157, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 253, 670, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734], "groupby_dynam": [158, 671], "groupby_rol": [159, 672], "hash_row": 160, "head": [161, 239, 379, 413, 599, 673, 722, 856, 897], "height": 162, "hstack": 163, "insert_at_idx": 164, "interpol": [165, 382, 675, 860], "is_dupl": [166, 384, 863], "is_empti": [167, 864], "is_uniqu": [168, 394, 878], "item": [169, 880], "iter_row": 170, "iter_slic": 171, "join": [172, 414, 676, 898], "join_asof": [173, 677], "lazi": [174, 679], "limit": [175, 400, 680, 883], "max": [176, 241, 281, 417, 441, 606, 682, 724, 757, 807, 901, 922], "mean": [177, 242, 418, 442, 608, 683, 725, 808, 902, 923], "median": [178, 243, 443, 609, 684, 726, 809, 924], "melt": [179, 685], "merge_sort": [180, 686], "min": [181, 244, 282, 419, 454, 610, 687, 727, 758, 814, 903, 925], "n_chunk": [182, 927], "n_uniqu": [183, 245, 458, 612, 728, 928], "null_count": [184, 463, 688, 933], "partition_bi": 185, "pipe": [186, 467, 689], "pivot": 187, "product": [188, 470, 937], "quantil": [189, 246, 472, 614, 691, 729, 939], "rechunk": [190, 475, 941], "renam": [191, 693, 943], "replac": [192, 525, 996], "replace_at_idx": 193, "revers": [194, 420, 479, 694, 904, 945], "row": [195, 196], "rows_by_kei": 197, "sampl": [198, 493, 959], "schema": [199, 695, 1018], "select": [200, 256, 619, 643, 696, 737, 1054], "set_sort": [201, 495, 697, 964], "shape": [202, 965], "shift": [203, 425, 496, 698, 909, 966], "shift_and_fil": [204, 497, 699, 967], "shrink_to_fit": [205, 969], "slice": [206, 426, 504, 529, 701, 910, 975, 1000], "sort": [207, 427, 505, 702, 911, 976], "std": [208, 508, 621, 703, 978], "sum": [209, 247, 283, 428, 548, 623, 704, 730, 759, 912, 1020], "tail": [210, 248, 429, 549, 625, 705, 731, 913, 1021], "take_everi": [211, 551, 706, 1023], "to_arrow": [212, 1027], "to_dict": [213, 214], "to_dummi": [215, 1028], "to_init_repr": [216, 1030], "to_numpi": [217, 1032], "to_panda": [218, 1033], "to_seri": 219, "to_struct": [220, 431, 915], "top_k": [221, 555, 707, 1035], "transpos": 222, "uniqu": [223, 284, 432, 557, 708, 760, 916, 1036], "unnest": [224, 709, 1019], "unstack": 225, "updat": [226, 710], "upsampl": 227, "var": [228, 561, 629, 711, 1040], "vstack": 229, "width": [230, 712], "with_column": [231, 713], "with_row_count": [232, 715], "__iter__": 233, "agg": [234, 717], "all": [235, 264, 401, 564, 718, 742, 885], "count": [237, 303, 581, 720], "first": [238, 370, 411, 594, 668, 721, 895], "last": [240, 397, 415, 603, 678, 723, 899], "attribut": [249, 732, 1044], "comput": [250, 637, 1048], "descript": [251, 733, 1049], "export": [252, 1050], "miscellan": [255, 642, 649, 736, 1053], "manipul": [256, 643, 737, 1054], "data": 257, "type": 257, "numer": [257, 644], "tempor": [257, 647, 1057], "nest": 257, "other": 257, "expr": [260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563], "ab": [260, 740], "add": 261, "agg_group": 262, "alia": [263, 741], "and_": 265, "ani": [266, 402, 566, 743, 886], "append": [267, 744], "approx_uniqu": [269, 569], "arcco": [270, 746], "arccosh": [271, 747], "arcsin": [272, 748], "arcsinh": [273, 749], "arctan": [274, 750], "arctanh": [275, 751], "arg_max": [276, 403, 752, 887], "arg_min": [277, 404, 753, 888], "arg_sort": [278, 754], "arg_tru": [279, 755], "arg_uniqu": [280, 756], "arr": [281, 282, 283, 284, 757, 758, 759, 760], "backward_fil": 285, "bin": [286, 287, 288, 289, 290, 761, 762, 763, 764, 765], "contain": [286, 406, 510, 761, 890, 981], "decod": [287, 512, 762, 983], "encod": [288, 513, 763, 984], "ends_with": [289, 514, 764, 985], "starts_with": [290, 533, 765, 1004], "cach": [292, 654], "cast": [293, 767], "cat": [294, 295, 768, 769, 770], "get_categori": [294, 769], "set_ord": [295, 770], "cbrt": [296, 771], "ceil": [297, 772], "clip": [298, 775], "clip_max": [299, 776], "clip_min": [300, 777], "co": [301, 779], "cosh": [302, 780], "cumcount": 304, "cummax": [305, 781], "cummin": [306, 782], "cumprod": [307, 783], "cumsum": [308, 585, 784], "cumulative_ev": [309, 785], "cut": [310, 786], "degre": 311, "diff": [312, 408, 788, 892], "dot": [313, 789], "drop_nan": [314, 790], "dt": [316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837], "base_utc_offset": [316, 793], "cast_time_unit": [317, 794], "combin": [318, 795], "convert_time_zon": [319, 796], "dai": [322, 323, 799, 800], "dst_offset": [324, 801], "epoch": [325, 802], "hour": [326, 327, 803, 804], "is_leap_year": [328, 805], "iso_year": [329, 806], "microsecond": [330, 331, 810, 811], "millisecond": [332, 333, 812, 813], "minut": [334, 335, 815, 816], "month": [336, 817], "month_end": [337, 818], "month_start": [338, 819], "nanosecond": [339, 340, 820, 821], "offset_bi": [341, 822], "ordinal_dai": [342, 823], "quarter": [343, 824], "replace_time_zon": [344, 825], "round": [345, 492, 826, 958], "second": [346, 347, 827, 828], "strftime": [348, 829], "timestamp": [350, 831], "to_str": [351, 832], "truncat": [352, 833], "week": [353, 834], "weekdai": [354, 835], "with_time_unit": [355, 836], "year": [356, 837], "entropi": [357, 839], "eq": [358, 444], "eq_miss": 359, "ewm_mean": [360, 841], "ewm_std": [361, 842], "ewm_var": [362, 843], "exclud": [363, 593], "exp": [364, 844], "extend_const": [366, 847], "flatten": 371, "floor": [372, 852], "floordiv": 373, "forward_fil": 374, "from_json": [375, 669], "ge": 376, "gt": 377, "hash": [378, 855], "implod": [380, 600, 858], "inspect": [381, 674], "is_between": [383, 861], "is_finit": [385, 865], "is_first": [386, 866], "is_in": [387, 868], "is_infinit": [388, 869], "is_nan": [389, 871], "is_not": 390, "is_not_nan": [391, 872], "is_not_nul": [392, 873], "is_nul": [393, 874], "keep_nam": 395, "kurtosi": [396, 881], "le": 398, "len": [399, 882], "count_match": [407, 511, 891, 982], "eval": [409, 893], "get": [412, 896], "length": [416, 520, 900, 991], "set_differ": [421, 905], "set_intersect": [422, 906], "set_symmetric_differ": [423, 907], "set_union": [424, 908], "take": [430, 550, 914, 1022], "log": [433, 917], "log10": [434, 918], "log1p": [435, 919], "lower_bound": [436, 920], "lt": 437, "map": [438, 605, 681], "map_alia": 439, "map_dict": [440, 921], "meta": [444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 641], "has_multiple_output": 445, "is_regex_project": 446, "ne": [447, 461], "output_nam": 448, "pop": 449, "root_nam": 450, "tree_format": 451, "undo_alias": 452, "mod": 455, "mode": [456, 926], "mul": 457, "nan_max": [459, 930], "nan_min": [460, 931], "ne_miss": 462, "or_": 464, "over": 465, "pct_chang": [466, 934], "pow": 468, "prefix": 469, "qcut": [471, 938], "radian": 473, "rank": [474, 940], "reinterpret": [476, 942], "repeat_bi": 477, "reshap": [478, 944], "rle": [480, 946], "rle_id": [481, 947], "rolling_appli": [482, 948], "rolling_max": [483, 949], "rolling_mean": [484, 950], "rolling_median": [485, 951], "rolling_min": [486, 952], "rolling_quantil": [487, 953], "rolling_skew": [488, 954], "rolling_std": [489, 955], "rolling_sum": [490, 956], "rolling_var": [491, 957], "search_sort": [494, 960], "shrink_dtyp": [498, 968], "shuffl": [499, 970], "sign": [500, 971], "sin": [501, 972], "sinh": [502, 973], "skew": [503, 974], "sort_bi": 506, "sqrt": [507, 977], "str": [509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014], "extract": [516, 987], "extract_al": [517, 988], "json_extract": [518, 989], "json_path_match": [519, 990], "ljust": [521, 992], "lstrip": [522, 993], "n_char": [523, 994], "parse_int": [524, 995], "replace_al": [526, 997], "rjust": [527, 998], "rstrip": [528, 999], "split": [530, 1001], "split_exact": [531, 1002], "splitn": [532, 1003], "strip": [534, 1005], "strptime": [535, 1006], "to_dat": [536, 1007], "to_datetim": [537, 1008], "to_decim": [538, 1009], "to_lowercas": [539, 1010], "to_tim": [540, 1011], "to_titlecas": [541, 1012], "to_uppercas": [542, 1013], "zfill": [543, 1014], "field": [544, 1015, 1016], "rename_field": [545, 1017], "sub": 546, "suffix": 547, "tan": [552, 1024], "tanh": [553, 1025], "to_phys": [554, 1034], "truediv": 556, "unique_count": [558, 1037], "upper_bound": [559, 1038], "value_count": [560, 1039], "where": 562, "xor": 563, "all_horizont": 565, "any_horizont": 567, "arang": 570, "arctan2": 571, "arctan2d": 572, "arg_sort_bi": 573, "arg_wher": 574, "avg": 575, "coalesc": 576, "col": 577, "concat_list": 578, "concat_str": 579, "cov": 582, "cumfold": 583, "cumreduc": 584, "cumsum_horizont": 586, "date_rang": [588, 589], "element": 592, "format": 596, "from_epoch": 597, "group": 598, "int_rang": [601, 602], "lit": 604, "max_horizont": 607, "min_horizont": 611, "ones": 613, "reduc": 615, "repeat": 616, "rolling_corr": 617, "rolling_cov": 618, "sql_expr": 620, "sum_horizont": 624, "time_rang": [627, 628], "when": 630, "zero": 631, "categori": [635, 1047], "name": [636, 929], "express": 639, "oper": [644, 738], "conjunct": 644, "comparison": 644, "string": [645, 1055], "window": 648, "convers": 649, "parallel": 649, "refer": 650, "input": 651, "output": 651, "feather": 651, "ipc": 651, "parquet": 651, "databas": 651, "json": 651, "avro": 651, "excel": 651, "delta": 651, "lake": 651, "dataset": 651, "collect": 657, "explain": 662, "fetch": 664, "profil": [690, 1059], "show_graph": 700, "with_context": 714, "lazygroupbi": [717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "read": 736, "write": 736, "logic": 736, "plan": 736, "selector": 738, "import": 738, "set": [738, 962], "chunk_length": 773, "get_chunk": 853, "has_valid": 854, "hist": 857, "inner_dtyp": 859, "is_boolean": 862, "is_float": 867, "is_integ": 870, "is_numer": 875, "is_sort": 876, "is_tempor": 877, "is_utf8": 879, "new_from_index": 932, "peak_max": 935, "peak_min": 936, "series_equ": 961, "set_at_idx": 963, "time_unit": 1026, "to_fram": 1029, "to_list": 1031, "view": 1041, "zip_with": 1042, "sql": 1058, "method": 1058, "assert": 1059, "primit": 1059, "strategi": 1059, "helper": 1059, "util": 1060}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 58}, "alltitles": {"polars.exceptions.ColumnNotFoundError": [[77, "polars-exceptions-columnnotfounderror"]], "polars.scan_ipc": [[114, "polars-scan-ipc"]], "polars.exceptions.RowsError": [[84, "polars-exceptions-rowserror"]], "polars.DataFrame.drop_in_place": [[141, "polars-dataframe-drop-in-place"]], "polars.enable_string_cache": [[75, "polars-enable-string-cache"]], "polars.read_json": [[108, "polars-read-json"]], "polars.from_dataframe": [[91, "polars-from-dataframe"]], "polars.from_dict": [[92, "polars-from-dict"]], "polars.DataFrame.clone": [[136, "polars-dataframe-clone"]], "polars.DataFrame.columns": [[137, "polars-dataframe-columns"]], "polars.read_ndjson": [[109, "polars-read-ndjson"]], "polars.from_repr": [[97, "polars-from-repr"]], "polars.testing.parametric.set_profile": [[127, "polars-testing-parametric-set-profile"]], "polars.DataFrame.drop_nulls": [[142, "polars-dataframe-drop-nulls"]], "polars.scan_csv": [[112, "polars-scan-csv"]], "polars.exceptions.PolarsPanicError": [[83, "polars-exceptions-polarspanicerror"]], "polars.read_avro": [[100, "polars-read-avro"]], "polars.testing.parametric.series": [[126, "polars-testing-parametric-series"]], "polars.using_string_cache": [[129, "polars-using-string-cache"]], "polars.read_parquet": [[110, "polars-read-parquet"]], "polars.from_pandas": [[95, "polars-from-pandas"]], "polars.scan_ndjson": [[115, "polars-scan-ndjson"]], "polars.show_versions": [[118, "polars-show-versions"]], "polars.read_database": [[103, "polars-read-database"]], "polars.testing.assert_frame_equal": [[119, "polars-testing-assert-frame-equal"]], "polars.collect_all": [[73, "polars-collect-all"]], "polars.exceptions.DuplicateError": [[79, "polars-exceptions-duplicateerror"]], "polars.exceptions.NoRowsReturnedError": [[82, "polars-exceptions-norowsreturnederror"]], "polars.exceptions.SchemaFieldNotFoundError": [[86, "polars-exceptions-schemafieldnotfounderror"]], "polars.get_index_type": [[98, "polars-get-index-type"]], "polars.exceptions.InvalidOperationError": [[80, "polars-exceptions-invalidoperationerror"]], "polars.read_excel": [[105, "polars-read-excel"]], "polars.read_ipc_schema": [[107, "polars-read-ipc-schema"]], "Config": [[130, "config"]], "Config options": [[130, "config-options"]], "Config load, save, and current state": [[130, "config-load-save-and-current-state"]], "Use as a context manager": [[130, "use-as-a-context-manager"]], "Use as a function decorator": [[130, "use-as-a-function-decorator"]], "Aggregation": [[131, "aggregation"], [739, "aggregation"], [652, "aggregation"], [259, "aggregation"]], "polars.DataFrame.drop": [[140, "polars-dataframe-drop"]], "polars.concat": [[74, "polars-concat"]], "polars.exceptions.SchemaError": [[85, "polars-exceptions-schemaerror"]], "polars.testing.assert_series_equal": [[120, "polars-testing-assert-series-equal"]], "polars.build_info": [[72, "polars-build-info"]], "polars.exceptions.NoDataError": [[81, "polars-exceptions-nodataerror"]], "polars.scan_parquet": [[116, "polars-scan-parquet"]], "polars.DataFrame.describe": [[139, "polars-dataframe-describe"]], "polars.from_numpy": [[94, "polars-from-numpy"]], "polars.read_csv_batched": [[102, "polars-read-csv-batched"]], "polars.scan_pyarrow_dataset": [[117, "polars-scan-pyarrow-dataset"]], "polars.from_arrow": [[90, "polars-from-arrow"]], "polars.from_records": [[96, "polars-from-records"]], "polars.exceptions.ComputeError": [[78, "polars-exceptions-computeerror"]], "polars.read_ipc": [[106, "polars-read-ipc"]], "polars.scan_delta": [[113, "polars-scan-delta"]], "polars.testing.parametric.columns": [[122, "polars-testing-parametric-columns"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[99, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.DataFrame.clear": [[135, "polars-dataframe-clear"]], "polars.exceptions.StructFieldNotFoundError": [[88, "polars-exceptions-structfieldnotfounderror"]], "polars.DataFrame.bottom_k": [[134, "polars-dataframe-bottom-k"]], "polars.testing.parametric.dataframes": [[124, "polars-testing-parametric-dataframes"]], "polars.exceptions.ArrowError": [[76, "polars-exceptions-arrowerror"]], "polars.read_parquet_schema": [[111, "polars-read-parquet-schema"]], "polars.threadpool_size": [[128, "polars-threadpool-size"]], "polars.from_dicts": [[93, "polars-from-dicts"]], "polars.testing.parametric.load_profile": [[125, "polars-testing-parametric-load-profile"]], "polars.testing.parametric.create_list_strategy": [[123, "polars-testing-parametric-create-list-strategy"]], "polars.testing.parametric.column": [[121, "polars-testing-parametric-column"]], "polars.DataFrame.apply": [[133, "polars-dataframe-apply"]], "polars.read_delta": [[104, "polars-read-delta"]], "polars.DataFrame.dtypes": [[143, "polars-dataframe-dtypes"]], "polars.read_csv": [[101, "polars-read-csv"]], "polars.DataFrame.__dataframe__": [[132, "polars-dataframe-dataframe"]], "polars.DataFrame.corr": [[138, "polars-dataframe-corr"]], "polars.exceptions.TooManyRowsReturnedError": [[89, "polars-exceptions-toomanyrowsreturnederror"]], "polars.exceptions.ShapeError": [[87, "polars-exceptions-shapeerror"]], "polars.Config.set_tbl_rows": [[23, "polars-config-set-tbl-rows"]], "polars.Config.state": [[26, "polars-config-state"]], "polars.Int32": [[44, "polars-int32"]], "polars.Datetime": [[38, "polars-datetime"]], "polars.api.register_lazyframe_namespace": [[70, "polars-api-register-lazyframe-namespace"]], "polars.LazyFrame.sink_ipc": [[47, "polars-lazyframe-sink-ipc"]], "polars.UInt32": [[62, "polars-uint32"]], "polars.UInt8": [[64, "polars-uint8"]], "polars.Int16": [[43, "polars-int16"]], "polars.SQLContext.register_many": [[55, "polars-sqlcontext-register-many"]], "polars.Config.set_streaming_chunk_size": [[13, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_ascii_tables": [[10, "polars-config-set-ascii-tables"]], "polars.Config.set_tbl_cols": [[15, "polars-config-set-tbl-cols"]], "polars.SQLContext.tables": [[56, "polars-sqlcontext-tables"]], "polars.DataType": [[36, "polars-datatype"]], "polars.Config.restore_defaults": [[8, "polars-config-restore-defaults"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.Time": [[60, "polars-time"]], "polars.Config.set_tbl_width_chars": [[24, "polars-config-set-tbl-width-chars"]], "polars.Config.set_tbl_hide_dataframe_shape": [[21, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_dataframe_shape_below": [[17, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.Int64": [[45, "polars-int64"]], "polars.DataFrame.write_ndjson": [[34, "polars-dataframe-write-ndjson"]], "polars.Config.set_tbl_cell_alignment": [[14, "polars-config-set-tbl-cell-alignment"]], "polars.DataFrame.write_excel": [[31, "polars-dataframe-write-excel"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1059, "examples"], [738, "examples"]], "polars.Date": [[37, "polars-date"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.DataFrame.write_csv": [[28, "polars-dataframe-write-csv"]], "polars.api.register_series_namespace": [[71, "polars-api-register-series-namespace"]], "polars.align_frames": [[67, "polars-align-frames"]], "polars.SQLContext.unregister": [[57, "polars-sqlcontext-unregister"]], "polars.StringCache": [[58, "polars-stringcache"]], "polars.Array": [[2, "polars-array"]], "polars.Config.set_verbose": [[25, "polars-config-set-verbose"]], "polars.Config.save": [[9, "polars-config-save"]], "polars.Binary": [[3, "polars-binary"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Null": [[50, "polars-null"]], "polars.Decimal": [[39, "polars-decimal"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.DataFrame.write_delta": [[30, "polars-dataframe-write-delta"]], "polars.DataFrame.write_ipc": [[32, "polars-dataframe-write-ipc"]], "polars.Duration": [[40, "polars-duration"]], "polars.Float32": [[41, "polars-float32"]], "polars.DataFrame.write_database": [[29, "polars-dataframe-write-database"]], "polars.Object": [[51, "polars-object"]], "polars.List": [[49, "polars-list"]], "polars.Config.set_tbl_hide_column_names": [[20, "polars-config-set-tbl-hide-column-names"]], "polars.UInt64": [[63, "polars-uint64"]], "polars.UInt16": [[61, "polars-uint16"]], "polars.Struct": [[59, "polars-struct"]], "polars.api.register_expr_namespace": [[69, "polars-api-register-expr-namespace"]], "polars.DataFrame.write_json": [[33, "polars-dataframe-write-json"]], "polars.Config.set_tbl_column_data_type_inline": [[16, "polars-config-set-tbl-column-data-type-inline"]], "polars.DataFrame.write_avro": [[27, "polars-dataframe-write-avro"]], "polars.Int8": [[46, "polars-int8"]], "polars.SQLContext.register": [[53, "polars-sqlcontext-register"]], "polars.Config.set_tbl_hide_dtype_separator": [[22, "polars-config-set-tbl-hide-dtype-separator"]], "polars.LazyFrame.sink_parquet": [[48, "polars-lazyframe-sink-parquet"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.api.register_dataframe_namespace": [[68, "polars-api-register-dataframe-namespace"]], "polars.Float64": [[42, "polars-float64"]], "polars.Utf8": [[66, "polars-utf8"]], "polars.SQLContext.execute": [[52, "polars-sqlcontext-execute"]], "polars.Config.set_tbl_hide_column_data_types": [[19, "polars-config-set-tbl-hide-column-data-types"]], "polars.DataFrame.write_parquet": [[35, "polars-dataframe-write-parquet"]], "polars.SQLContext.register_globals": [[54, "polars-sqlcontext-register-globals"]], "polars.Config.set_tbl_formatting": [[18, "polars-config-set-tbl-formatting"]], "polars.Unknown": [[65, "polars-unknown"]], "polars.Series.str.slice": [[1000, "polars-series-str-slice"]], "polars.Series.sinh": [[973, "polars-series-sinh"]], "polars.Series.sqrt": [[977, "polars-series-sqrt"]], "polars.Series.str.decode": [[983, "polars-series-str-decode"]], "polars.Series.str.lengths": [[991, "polars-series-str-lengths"]], "polars.Series.rolling_var": [[957, "polars-series-rolling-var"]], "polars.Series.rechunk": [[941, "polars-series-rechunk"]], "polars.Series.str.lstrip": [[993, "polars-series-str-lstrip"]], "polars.Series.rolling_std": [[955, "polars-series-rolling-std"]], "polars.Series.sign": [[971, "polars-series-sign"]], "polars.Series.std": [[978, "polars-series-std"]], "polars.Series.str.count_match": [[982, "polars-series-str-count-match"]], "polars.Series.str.json_path_match": [[990, "polars-series-str-json-path-match"]], "polars.Series.quantile": [[939, "polars-series-quantile"]], "polars.Series.str": [[979, "polars-series-str"]], "polars.Series.str.replace": [[996, "polars-series-str-replace"]], "polars.Series.str.replace_all": [[997, "polars-series-str-replace-all"]], "polars.Series.rolling_min": [[952, "polars-series-rolling-min"]], "polars.Series.round": [[958, "polars-series-round"]], "polars.Series.product": [[937, "polars-series-product"]], "polars.Series.rolling_median": [[951, "polars-series-rolling-median"]], "polars.Series.reshape": [[944, "polars-series-reshape"]], "polars.Series.shift": [[966, "polars-series-shift"]], "polars.Series.shrink_dtype": [[968, "polars-series-shrink-dtype"]], "polars.Series.rle": [[946, "polars-series-rle"]], "polars.Series.rolling_sum": [[956, "polars-series-rolling-sum"]], "polars.Series.str.parse_int": [[995, "polars-series-str-parse-int"]], "polars.Series.str.split_exact": [[1002, "polars-series-str-split-exact"]], "polars.Series.str.strip": [[1005, "polars-series-str-strip"]], "polars.Series.shrink_to_fit": [[969, "polars-series-shrink-to-fit"]], "polars.Series.set": [[962, "polars-series-set"]], "polars.Series.rolling_max": [[949, "polars-series-rolling-max"]], "polars.Series.shift_and_fill": [[967, "polars-series-shift-and-fill"]], "polars.Series.str.concat": [[980, "polars-series-str-concat"]], "polars.Series.str.starts_with": [[1004, "polars-series-str-starts-with"]], "polars.Series.str.split": [[1001, "polars-series-str-split"]], "polars.Series.sort": [[976, "polars-series-sort"]], "polars.Series.str.n_chars": [[994, "polars-series-str-n-chars"]], "polars.Series.rolling_apply": [[948, "polars-series-rolling-apply"]], "polars.Series.str.strptime": [[1006, "polars-series-str-strptime"]], "polars.Series.reinterpret": [[942, "polars-series-reinterpret"]], "polars.Series.rank": [[940, "polars-series-rank"]], "polars.Series.search_sorted": [[960, "polars-series-search-sorted"]], "polars.Series.str.explode": [[986, "polars-series-str-explode"]], "polars.Series.str.extract_all": [[988, "polars-series-str-extract-all"]], "polars.Series.str.ljust": [[992, "polars-series-str-ljust"]], "polars.Series.str.to_date": [[1007, "polars-series-str-to-date"]], "polars.Series.skew": [[974, "polars-series-skew"]], "polars.Series.rle_id": [[947, "polars-series-rle-id"]], "polars.Series.str.json_extract": [[989, "polars-series-str-json-extract"]], "polars.Series.series_equal": [[961, "polars-series-series-equal"]], "polars.Series.str.rstrip": [[999, "polars-series-str-rstrip"]], "polars.Series.str.contains": [[981, "polars-series-str-contains"]], "polars.Series.set_sorted": [[964, "polars-series-set-sorted"]], "polars.Series.shape": [[965, "polars-series-shape"]], "polars.Series.slice": [[975, "polars-series-slice"]], "polars.Series.peak_min": [[936, "polars-series-peak-min"]], "polars.Series.qcut": [[938, "polars-series-qcut"]], "polars.Series.rolling_quantile": [[953, "polars-series-rolling-quantile"]], "polars.Series.str.splitn": [[1003, "polars-series-str-splitn"]], "polars.Series.rolling_mean": [[950, "polars-series-rolling-mean"]], "polars.Series.sin": [[972, "polars-series-sin"]], "polars.Series.sample": [[959, "polars-series-sample"]], "polars.Series.str.ends_with": [[985, "polars-series-str-ends-with"]], "polars.Series.reverse": [[945, "polars-series-reverse"]], "polars.Series.str.extract": [[987, "polars-series-str-extract"]], "polars.Series.str.rjust": [[998, "polars-series-str-rjust"]], "polars.Series.rolling_skew": [[954, "polars-series-rolling-skew"]], "polars.Series.shuffle": [[970, "polars-series-shuffle"]], "polars.Series.str.encode": [[984, "polars-series-str-encode"]], "polars.Series.rename": [[943, "polars-series-rename"]], "polars.Series.set_at_idx": [[963, "polars-series-set-at-idx"]], "polars.Series.log1p": [[919, "polars-series-log1p"]], "polars.Series.nan_min": [[931, "polars-series-nan-min"]], "polars.Series.min": [[925, "polars-series-min"]], "polars.Series.is_numeric": [[875, "polars-series-is-numeric"]], "polars.Series.is_null": [[874, "polars-series-is-null"]], "polars.Series.list.tail": [[913, "polars-series-list-tail"]], "polars.Series.limit": [[883, "polars-series-limit"]], "polars.Series.list.count_match": [[891, "polars-series-list-count-match"]], "polars.Series.list.head": [[897, "polars-series-list-head"]], "polars.Series.lower_bound": [[920, "polars-series-lower-bound"]], "polars.Series.len": [[882, "polars-series-len"]], "polars.Series.list.join": [[898, "polars-series-list-join"]], "polars.Series.is_sorted": [[876, "polars-series-is-sorted"]], "polars.Series.is_temporal": [[877, "polars-series-is-temporal"]], "polars.Series.list.mean": [[902, "polars-series-list-mean"]], "polars.Series.is_utf8": [[879, "polars-series-is-utf8"]], "polars.Series.list.concat": [[889, "polars-series-list-concat"]], "polars.Series.is_empty": [[864, "polars-series-is-empty"]], "polars.Series.null_count": [[933, "polars-series-null-count"]], "polars.Series.list.last": [[899, "polars-series-list-last"]], "polars.Series.list.eval": [[893, "polars-series-list-eval"]], "polars.Series.list.get": [[896, "polars-series-list-get"]], "polars.Series.list.set_intersection": [[906, "polars-series-list-set-intersection"]], "polars.Series.list.set_symmetric_difference": [[907, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.set_union": [[908, "polars-series-list-set-union"]], "polars.Series.list.sum": [[912, "polars-series-list-sum"]], "polars.Series.list.min": [[903, "polars-series-list-min"]], "polars.Series.list.unique": [[916, "polars-series-list-unique"]], "polars.Series.median": [[924, "polars-series-median"]], "polars.Series.new_from_index": [[932, "polars-series-new-from-index"]], "polars.Series.list.set_difference": [[905, "polars-series-list-set-difference"]], "polars.Series.mean": [[923, "polars-series-mean"]], "polars.Series.log": [[917, "polars-series-log"]], "polars.Series.log10": [[918, "polars-series-log10"]], "polars.Series.nan_max": [[930, "polars-series-nan-max"]], "polars.Series.is_nan": [[871, "polars-series-is-nan"]], "polars.Series.list.explode": [[894, "polars-series-list-explode"]], "polars.Series.list.reverse": [[904, "polars-series-list-reverse"]], "polars.Series.is_integer": [[870, "polars-series-is-integer"]], "polars.Series.is_first": [[866, "polars-series-is-first"]], "polars.Series.list.max": [[901, "polars-series-list-max"]], "polars.Series.list.arg_max": [[887, "polars-series-list-arg-max"]], "polars.Series.list.take": [[914, "polars-series-list-take"]], "polars.Series.is_not_null": [[873, "polars-series-is-not-null"]], "polars.Series.kurtosis": [[881, "polars-series-kurtosis"]], "polars.Series.list.slice": [[910, "polars-series-list-slice"]], "polars.Series.list.to_struct": [[915, "polars-series-list-to-struct"]], "polars.Series.n_unique": [[928, "polars-series-n-unique"]], "polars.Series.list.lengths": [[900, "polars-series-list-lengths"]], "polars.Series.mode": [[926, "polars-series-mode"]], "polars.Series.map_dict": [[921, "polars-series-map-dict"]], "polars.Series.list.diff": [[892, "polars-series-list-diff"]], "polars.Series.max": [[922, "polars-series-max"]], "polars.Series.is_unique": [[878, "polars-series-is-unique"]], "polars.Series.n_chunks": [[927, "polars-series-n-chunks"]], "polars.Series.peak_max": [[935, "polars-series-peak-max"]], "polars.Series.list.sort": [[911, "polars-series-list-sort"]], "polars.Series.is_finite": [[865, "polars-series-is-finite"]], "polars.Series.list": [[884, "polars-series-list"]], "polars.Series.is_infinite": [[869, "polars-series-is-infinite"]], "polars.Series.is_in": [[868, "polars-series-is-in"]], "polars.Series.list.arg_min": [[888, "polars-series-list-arg-min"]], "polars.Series.list.all": [[885, "polars-series-list-all"]], "polars.Series.list.any": [[886, "polars-series-list-any"]], "polars.Series.is_float": [[867, "polars-series-is-float"]], "polars.Series.name": [[929, "polars-series-name"]], "polars.Series.is_not_nan": [[872, "polars-series-is-not-nan"]], "polars.Series.list.shift": [[909, "polars-series-list-shift"]], "polars.Series.list.contains": [[890, "polars-series-list-contains"]], "polars.Series.pct_change": [[934, "polars-series-pct-change"]], "polars.Series.list.first": [[895, "polars-series-list-first"]], "polars.Series.item": [[880, "polars-series-item"]], "polars.Series.dt.hour": [[803, "polars-series-dt-hour"]], "polars.Series.dt.mean": [[808, "polars-series-dt-mean"]], "polars.Series.dt.day": [[799, "polars-series-dt-day"]], "polars.Series.dt.microsecond": [[810, "polars-series-dt-microsecond"]], "polars.Series.is_duplicated": [[863, "polars-series-is-duplicated"]], "polars.Series.dt.millisecond": [[812, "polars-series-dt-millisecond"]], "polars.Series.dt.week": [[834, "polars-series-dt-week"]], "polars.Series.flags": [[851, "polars-series-flags"]], "polars.Series.interpolate": [[860, "polars-series-interpolate"]], "polars.Series.dt.days": [[800, "polars-series-dt-days"]], "polars.Series.filter": [[850, "polars-series-filter"]], "polars.Series.has_validity": [[854, "polars-series-has-validity"]], "polars.Series.implode": [[858, "polars-series-implode"]], "polars.Series.dt.combine": [[795, "polars-series-dt-combine"]], "polars.Series.ewm_std": [[842, "polars-series-ewm-std"]], "polars.Series.hist": [[857, "polars-series-hist"]], "polars.Series.dt.minute": [[815, "polars-series-dt-minute"]], "polars.Series.dt.truncate": [[833, "polars-series-dt-truncate"]], "polars.Series.is_between": [[861, "polars-series-is-between"]], "polars.Series.dt.nanoseconds": [[821, "polars-series-dt-nanoseconds"]], "polars.Series.dt.offset_by": [[822, "polars-series-dt-offset-by"]], "polars.Series.dt": [[792, "polars-series-dt"]], "polars.Series.is_boolean": [[862, "polars-series-is-boolean"]], "polars.Series.dt.epoch": [[802, "polars-series-dt-epoch"]], "polars.Series.dt.iso_year": [[806, "polars-series-dt-iso-year"]], "polars.Series.dt.convert_time_zone": [[796, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.replace_time_zone": [[825, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.base_utc_offset": [[793, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.milliseconds": [[813, "polars-series-dt-milliseconds"]], "polars.Series.head": [[856, "polars-series-head"]], "polars.Series.entropy": [[839, "polars-series-entropy"]], "polars.Series.hash": [[855, "polars-series-hash"]], "polars.Series.dt.hours": [[804, "polars-series-dt-hours"]], "polars.Series.dt.minutes": [[816, "polars-series-dt-minutes"]], "polars.Series.dt.second": [[827, "polars-series-dt-second"]], "polars.Series.dt.time": [[830, "polars-series-dt-time"]], "polars.Series.dt.with_time_unit": [[836, "polars-series-dt-with-time-unit"]], "polars.Series.estimated_size": [[840, "polars-series-estimated-size"]], "polars.Series.dt.datetime": [[798, "polars-series-dt-datetime"]], "polars.Series.explode": [[845, "polars-series-explode"]], "polars.Series.ewm_mean": [[841, "polars-series-ewm-mean"]], "polars.Series.get_chunks": [[853, "polars-series-get-chunks"]], "polars.Series.exp": [[844, "polars-series-exp"]], "polars.Series.dt.max": [[807, "polars-series-dt-max"]], "polars.Series.dt.timestamp": [[831, "polars-series-dt-timestamp"]], "polars.Series.dt.min": [[814, "polars-series-dt-min"]], "polars.Series.dt.date": [[797, "polars-series-dt-date"]], "polars.Series.dt.year": [[837, "polars-series-dt-year"]], "polars.Series.dt.microseconds": [[811, "polars-series-dt-microseconds"]], "polars.Series.inner_dtype": [[859, "polars-series-inner-dtype"]], "polars.Series.dt.seconds": [[828, "polars-series-dt-seconds"]], "polars.Series.ewm_var": [[843, "polars-series-ewm-var"]], "polars.Series.dt.month": [[817, "polars-series-dt-month"]], "polars.Series.dt.weekday": [[835, "polars-series-dt-weekday"]], "polars.Series.extend": [[846, "polars-series-extend"]], "polars.Series.dtype": [[838, "polars-series-dtype"]], "polars.Series.dt.month_start": [[819, "polars-series-dt-month-start"]], "polars.Series.dt.to_string": [[832, "polars-series-dt-to-string"]], "polars.Series.extend_constant": [[847, "polars-series-extend-constant"]], "polars.Series.dt.ordinal_day": [[823, "polars-series-dt-ordinal-day"]], "polars.Series.dt.month_end": [[818, "polars-series-dt-month-end"]], "polars.Series.dt.strftime": [[829, "polars-series-dt-strftime"]], "polars.Series.dt.nanosecond": [[820, "polars-series-dt-nanosecond"]], "polars.Series.fill_null": [[849, "polars-series-fill-null"]], "polars.Series.dt.cast_time_unit": [[794, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.median": [[809, "polars-series-dt-median"]], "polars.Series.dt.is_leap_year": [[805, "polars-series-dt-is-leap-year"]], "polars.Series.dt.round": [[826, "polars-series-dt-round"]], "polars.Series.floor": [[852, "polars-series-floor"]], "polars.Series.fill_nan": [[848, "polars-series-fill-nan"]], "polars.Series.dt.quarter": [[824, "polars-series-dt-quarter"]], "polars.Series.dt.dst_offset": [[801, "polars-series-dt-dst-offset"]], "polars.Series.to_init_repr": [[1030, "polars-series-to-init-repr"]], "polars.Series.unique": [[1036, "polars-series-unique"]], "polars.Series.tanh": [[1025, "polars-series-tanh"]], "polars.Series.to_list": [[1031, "polars-series-to-list"]], "polars.Series.to_physical": [[1034, "polars-series-to-physical"]], "polars.Series.take_every": [[1023, "polars-series-take-every"]], "polars.Series.struct.fields": [[1016, "polars-series-struct-fields"]], "Miscellaneous": [[1053, "miscellaneous"], [736, "miscellaneous"], [649, "miscellaneous"], [642, "miscellaneous"], [255, "miscellaneous"]], "polars.Series.str.to_time": [[1011, "polars-series-str-to-time"]], "Testing": [[1059, "testing"]], "Asserts": [[1059, "asserts"]], "Parametric testing": [[1059, "parametric-testing"]], "Polars primitives": [[1059, "polars-primitives"]], "Strategy helpers": [[1059, "strategy-helpers"]], "Profiles": [[1059, "profiles"]], "Binary": [[1045, "binary"], [633, "binary"], [644, "binary"]], "Descriptive": [[1049, "descriptive"], [733, "descriptive"], [251, "descriptive"]], "polars.Series.time_unit": [[1026, "polars-series-time-unit"]], "List": [[1052, "list"], [640, "list"]], "polars.Series.sum": [[1020, "polars-series-sum"]], "polars.Series.to_dummies": [[1028, "polars-series-to-dummies"]], "polars.Series.value_counts": [[1039, "polars-series-value-counts"]], "Boolean": [[1046, "boolean"], [634, "boolean"]], "polars.Series.tail": [[1021, "polars-series-tail"]], "Manipulation/selection": [[1054, "manipulation-selection"], [737, "manipulation-selection"], [643, "manipulation-selection"], [256, "manipulation-selection"]], "polars.Series.str.to_datetime": [[1008, "polars-series-str-to-datetime"]], "Export": [[1050, "export"], [252, "export"]], "Struct": [[1056, "struct"], [646, "struct"]], "SQL": [[1058, "sql"]], "Methods": [[1058, "methods"]], "Series": [[1051, "series"]], "polars.Series.struct.field": [[1015, "polars-series-struct-field"]], "Computation": [[1048, "computation"], [637, "computation"], [250, "computation"]], "polars.Series.str.to_uppercase": [[1013, "polars-series-str-to-uppercase"]], "polars.Series.zip_with": [[1042, "polars-series-zip-with"]], "Attributes": [[1044, "attributes"], [732, "attributes"], [249, "attributes"]], "Utils": [[1060, "utils"]], "polars.Series.str.to_lowercase": [[1010, "polars-series-str-to-lowercase"]], "polars.Series.to_frame": [[1029, "polars-series-to-frame"]], "polars.Series.struct.rename_fields": [[1017, "polars-series-struct-rename-fields"]], "polars.Series.str.to_decimal": [[1009, "polars-series-str-to-decimal"]], "polars.Series.struct.unnest": [[1019, "polars-series-struct-unnest"]], "polars.Series.str.to_titlecase": [[1012, "polars-series-str-to-titlecase"]], "polars.Series.top_k": [[1035, "polars-series-top-k"]], "polars.Series.var": [[1040, "polars-series-var"]], "polars.Series.unique_counts": [[1037, "polars-series-unique-counts"]], "String": [[1055, "string"], [645, "string"]], "Array": [[1043, "array"], [632, "array"]], "polars.Series.to_pandas": [[1033, "polars-series-to-pandas"]], "polars.Series.upper_bound": [[1038, "polars-series-upper-bound"]], "Categories": [[1047, "categories"], [635, "categories"]], "polars.Series.view": [[1041, "polars-series-view"]], "polars.Series.take": [[1022, "polars-series-take"]], "polars.Series.to_numpy": [[1032, "polars-series-to-numpy"]], "polars.Series.str.zfill": [[1014, "polars-series-str-zfill"]], "polars.Series.struct.schema": [[1018, "polars-series-struct-schema"]], "polars.Series.to_arrow": [[1027, "polars-series-to-arrow"]], "Temporal": [[1057, "temporal"], [647, "temporal"], [257, "temporal"]], "polars.Series.tan": [[1024, "polars-series-tan"]], "polars.Series.bottom_k": [[766, "polars-series-bottom-k"]], "polars.Series.clip_min": [[777, "polars-series-clip-min"]], "polars.Series.cumsum": [[784, "polars-series-cumsum"]], "polars.Series.cummin": [[782, "polars-series-cummin"]], "polars.Series.all": [[742, "polars-series-all"]], "polars.Series.bin.contains": [[761, "polars-series-bin-contains"]], "polars.Series.bin.encode": [[763, "polars-series-bin-encode"]], "polars.Series.abs": [[740, "polars-series-abs"]], "polars.Series.arctan": [[750, "polars-series-arctan"]], "polars.Series.cast": [[767, "polars-series-cast"]], "polars.Series.clear": [[774, "polars-series-clear"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[727, "polars-lazyframe-groupby-lazygroupby-min"]], "GroupBy": [[734, "groupby"], [253, "groupby"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[729, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.Series.arr.unique": [[760, "polars-series-arr-unique"]], "polars.Series.clip_max": [[776, "polars-series-clip-max"]], "polars.Series.arg_true": [[755, "polars-series-arg-true"]], "polars.Series.cbrt": [[771, "polars-series-cbrt"]], "polars.Series.cumulative_eval": [[785, "polars-series-cumulative-eval"]], "polars.Series.cut": [[786, "polars-series-cut"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[723, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.Series.arr.min": [[758, "polars-series-arr-min"]], "polars.Series.alias": [[741, "polars-series-alias"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[722, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.Series.chunk_lengths": [[773, "polars-series-chunk-lengths"]], "polars.Series.cosh": [[780, "polars-series-cosh"]], "polars.Series.bin.starts_with": [[765, "polars-series-bin-starts-with"]], "polars.Series.cumprod": [[783, "polars-series-cumprod"]], "polars.Series.arccos": [[746, "polars-series-arccos"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[728, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "Selectors": [[738, "selectors"]], "Importing": [[738, "importing"]], "Set operations": [[738, "set-operations"]], "Functions": [[738, "functions"], [649, "functions"], [638, "functions"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[726, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.Series.cummax": [[781, "polars-series-cummax"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[720, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.Series.bin.ends_with": [[764, "polars-series-bin-ends-with"]], "polars.Series.cat.set_ordering": [[770, "polars-series-cat-set-ordering"]], "polars.Series.clip": [[775, "polars-series-clip"]], "polars.Series.clone": [[778, "polars-series-clone"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[730, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.Series.arg_max": [[752, "polars-series-arg-max"]], "polars.Series.arg_min": [[753, "polars-series-arg-min"]], "polars.Series.bin.decode": [[762, "polars-series-bin-decode"]], "polars.Series.arg_unique": [[756, "polars-series-arg-unique"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[724, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.Series.cat": [[768, "polars-series-cat"]], "polars.Series.diff": [[788, "polars-series-diff"]], "polars.Series.drop_nans": [[790, "polars-series-drop-nans"]], "polars.Series.arccosh": [[747, "polars-series-arccosh"]], "polars.Series.arctanh": [[751, "polars-series-arctanh"]], "polars.Series.cat.get_categories": [[769, "polars-series-cat-get-categories"]], "polars.Series.arcsin": [[748, "polars-series-arcsin"]], "polars.Series.describe": [[787, "polars-series-describe"]], "polars.Series.any": [[743, "polars-series-any"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[721, "polars-lazyframe-groupby-lazygroupby-first"]], "Read/write logical plan": [[736, "read-write-logical-plan"]], "polars.Series.arr.max": [[757, "polars-series-arr-max"]], "polars.Series.cos": [[779, "polars-series-cos"]], "polars.Series.apply": [[745, "polars-series-apply"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[725, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.Series.append": [[744, "polars-series-append"]], "polars.Series.arr.sum": [[759, "polars-series-arr-sum"]], "polars.Series.dot": [[789, "polars-series-dot"]], "LazyFrame": [[735, "lazyframe"]], "polars.Series.drop_nulls": [[791, "polars-series-drop-nulls"]], "polars.Series.arg_sort": [[754, "polars-series-arg-sort"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[731, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.ceil": [[772, "polars-series-ceil"]], "polars.Series.arcsinh": [[749, "polars-series-arcsinh"]], "polars.LazyFrame.show_graph": [[700, "polars-lazyframe-show-graph"]], "polars.LazyFrame.explain": [[662, "polars-lazyframe-explain"]], "polars.LazyFrame.profile": [[690, "polars-lazyframe-profile"]], "polars.LazyFrame.head": [[673, "polars-lazyframe-head"]], "polars.LazyFrame.merge_sorted": [[686, "polars-lazyframe-merge-sorted"]], "Input/output": [[651, "input-output"]], "CSV": [[651, "csv"]], "Feather/ IPC": [[651, "feather-ipc"]], "Parquet": [[651, "parquet"]], "Database": [[651, "database"]], "JSON": [[651, "json"]], "AVRO": [[651, "avro"]], "Excel": [[651, "excel"]], "Delta Lake": [[651, "delta-lake"]], "Datasets": [[651, "datasets"]], "BatchedCsvReader": [[651, "batchedcsvreader"]], "polars.LazyFrame.from_json": [[669, "polars-lazyframe-from-json"]], "polars.LazyFrame.shift_and_fill": [[699, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.unnest": [[709, "polars-lazyframe-unnest"]], "polars.LazyFrame.schema": [[695, "polars-lazyframe-schema"]], "polars.LazyFrame.set_sorted": [[697, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.mean": [[683, "polars-lazyframe-mean"]], "polars.LazyFrame.with_row_count": [[715, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.join": [[676, "polars-lazyframe-join"]], "polars.LazyFrame.interpolate": [[675, "polars-lazyframe-interpolate"]], "polars.LazyFrame.groupby_rolling": [[672, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.std": [[703, "polars-lazyframe-std"]], "polars.LazyFrame.drop": [[659, "polars-lazyframe-drop"]], "polars.LazyFrame.update": [[710, "polars-lazyframe-update"]], "polars.LazyFrame.explode": [[663, "polars-lazyframe-explode"]], "polars.LazyFrame.cache": [[654, "polars-lazyframe-cache"]], "polars.LazyFrame.clear": [[655, "polars-lazyframe-clear"]], "polars.LazyFrame.collect": [[657, "polars-lazyframe-collect"]], "polars.LazyFrame.select": [[696, "polars-lazyframe-select"]], "polars.LazyFrame.var": [[711, "polars-lazyframe-var"]], "Conversion": [[649, "conversion"]], "Parallelization": [[649, "parallelization"]], "StringCache": [[649, "stringcache"]], "polars.LazyFrame.width": [[712, "polars-lazyframe-width"]], "polars.LazyFrame.median": [[684, "polars-lazyframe-median"]], "polars.LazyFrame.drop_nulls": [[660, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.tail": [[705, "polars-lazyframe-tail"]], "polars.LazyFrame.limit": [[680, "polars-lazyframe-limit"]], "polars.LazyFrame.pipe": [[689, "polars-lazyframe-pipe"]], "polars.LazyFrame.slice": [[701, "polars-lazyframe-slice"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[717, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.LazyFrame.first": [[668, "polars-lazyframe-first"]], "polars.LazyFrame.fetch": [[664, "polars-lazyframe-fetch"]], "polars.LazyFrame.clone": [[656, "polars-lazyframe-clone"]], "polars.LazyFrame.lazy": [[679, "polars-lazyframe-lazy"]], "polars.LazyFrame.with_context": [[714, "polars-lazyframe-with-context"]], "polars.LazyFrame.sort": [[702, "polars-lazyframe-sort"]], "polars.LazyFrame.map": [[681, "polars-lazyframe-map"]], "polars.LazyFrame.write_json": [[716, "polars-lazyframe-write-json"]], "polars.LazyFrame.unique": [[708, "polars-lazyframe-unique"]], "polars.LazyFrame.last": [[678, "polars-lazyframe-last"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[719, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.LazyFrame.null_count": [[688, "polars-lazyframe-null-count"]], "polars.LazyFrame.sum": [[704, "polars-lazyframe-sum"]], "polars.LazyFrame.reverse": [[694, "polars-lazyframe-reverse"]], "polars.LazyFrame.shift": [[698, "polars-lazyframe-shift"]], "polars.LazyFrame.quantile": [[691, "polars-lazyframe-quantile"]], "API reference": [[650, "api-reference"]], "polars.LazyFrame.dtypes": [[661, "polars-lazyframe-dtypes"]], "polars.LazyFrame.with_columns": [[713, "polars-lazyframe-with-columns"]], "polars.LazyFrame.fill_nan": [[665, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.inspect": [[674, "polars-lazyframe-inspect"]], "polars.LazyFrame.min": [[687, "polars-lazyframe-min"]], "polars.LazyFrame.top_k": [[707, "polars-lazyframe-top-k"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[718, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.LazyFrame.fill_null": [[666, "polars-lazyframe-fill-null"]], "polars.LazyFrame.read_json": [[692, "polars-lazyframe-read-json"]], "polars.LazyFrame.columns": [[658, "polars-lazyframe-columns"]], "polars.LazyFrame.groupby_dynamic": [[671, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.join_asof": [[677, "polars-lazyframe-join-asof"]], "polars.LazyFrame.rename": [[693, "polars-lazyframe-rename"]], "polars.LazyFrame.bottom_k": [[653, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.take_every": [[706, "polars-lazyframe-take-every"]], "polars.LazyFrame.melt": [[685, "polars-lazyframe-melt"]], "polars.LazyFrame.groupby": [[670, "polars-lazyframe-groupby"]], "polars.LazyFrame.filter": [[667, "polars-lazyframe-filter"]], "Window": [[648, "window"]], "polars.LazyFrame.max": [[682, "polars-lazyframe-max"]], "polars.Expr.where": [[562, "polars-expr-where"]], "polars.Expr.str.ends_with": [[514, "polars-expr-str-ends-with"]], "polars.Expr.sub": [[546, "polars-expr-sub"]], "polars.Expr.str.json_extract": [[518, "polars-expr-str-json-extract"]], "polars.Expr.str.lengths": [[520, "polars-expr-str-lengths"]], "polars.Expr.take": [[550, "polars-expr-take"]], "polars.Expr.top_k": [[555, "polars-expr-top-k"]], "polars.Expr.str.to_date": [[536, "polars-expr-str-to-date"]], "polars.Expr.str.lstrip": [[522, "polars-expr-str-lstrip"]], "polars.Expr.str.split": [[530, "polars-expr-str-split"]], "polars.Expr.str.rjust": [[527, "polars-expr-str-rjust"]], "polars.Expr.sort": [[505, "polars-expr-sort"]], "polars.Expr.str.to_decimal": [[538, "polars-expr-str-to-decimal"]], "polars.Expr.str.starts_with": [[533, "polars-expr-str-starts-with"]], "polars.Expr.sum": [[548, "polars-expr-sum"]], "polars.Expr.to_physical": [[554, "polars-expr-to-physical"]], "polars.arg_sort_by": [[573, "polars-arg-sort-by"]], "polars.Expr.slice": [[504, "polars-expr-slice"]], "polars.Expr.str.to_time": [[540, "polars-expr-str-to-time"]], "polars.Expr.str.extract": [[516, "polars-expr-str-extract"]], "polars.Expr.str.strip": [[534, "polars-expr-str-strip"]], "polars.Expr.str.decode": [[512, "polars-expr-str-decode"]], "polars.Expr.str.parse_int": [[524, "polars-expr-str-parse-int"]], "polars.Expr.str.extract_all": [[517, "polars-expr-str-extract-all"]], "polars.Expr.suffix": [[547, "polars-expr-suffix"]], "polars.Expr.tan": [[552, "polars-expr-tan"]], "polars.Expr.truediv": [[556, "polars-expr-truediv"]], "polars.any": [[566, "polars-any"]], "polars.any_horizontal": [[567, "polars-any-horizontal"]], "polars.Expr.value_counts": [[560, "polars-expr-value-counts"]], "polars.Expr.str.explode": [[515, "polars-expr-str-explode"]], "polars.Expr.struct.field": [[544, "polars-expr-struct-field"]], "polars.Expr.str.n_chars": [[523, "polars-expr-str-n-chars"]], "polars.Expr.upper_bound": [[559, "polars-expr-upper-bound"]], "polars.arctan2": [[571, "polars-arctan2"]], "polars.Expr.sort_by": [[506, "polars-expr-sort-by"]], "polars.Expr.tail": [[549, "polars-expr-tail"]], "polars.arctan2d": [[572, "polars-arctan2d"]], "polars.Expr.str.zfill": [[543, "polars-expr-str-zfill"]], "polars.Expr.unique": [[557, "polars-expr-unique"]], "polars.Expr.str.ljust": [[521, "polars-expr-str-ljust"]], "polars.avg": [[575, "polars-avg"]], "polars.Expr.str.to_lowercase": [[539, "polars-expr-str-to-lowercase"]], "polars.Expr.str.to_uppercase": [[542, "polars-expr-str-to-uppercase"]], "polars.Expr.take_every": [[551, "polars-expr-take-every"]], "polars.Expr.std": [[508, "polars-expr-std"]], "polars.Expr.struct.rename_fields": [[545, "polars-expr-struct-rename-fields"]], "polars.apply": [[568, "polars-apply"]], "polars.Expr.str.count_match": [[511, "polars-expr-str-count-match"]], "polars.Expr.str.encode": [[513, "polars-expr-str-encode"]], "polars.Expr.str.concat": [[509, "polars-expr-str-concat"]], "polars.Expr.str.slice": [[529, "polars-expr-str-slice"]], "polars.Expr.str.to_datetime": [[537, "polars-expr-str-to-datetime"]], "polars.Expr.str.json_path_match": [[519, "polars-expr-str-json-path-match"]], "polars.Expr.str.contains": [[510, "polars-expr-str-contains"]], "polars.Expr.unique_counts": [[558, "polars-expr-unique-counts"]], "polars.Expr.sqrt": [[507, "polars-expr-sqrt"]], "polars.Expr.var": [[561, "polars-expr-var"]], "polars.all_horizontal": [[565, "polars-all-horizontal"]], "polars.Expr.str.splitn": [[532, "polars-expr-str-splitn"]], "polars.arg_where": [[574, "polars-arg-where"]], "polars.Expr.str.rstrip": [[528, "polars-expr-str-rstrip"]], "polars.all": [[564, "polars-all"]], "polars.Expr.str.replace": [[525, "polars-expr-str-replace"]], "polars.Expr.str.split_exact": [[531, "polars-expr-str-split-exact"]], "polars.approx_unique": [[569, "polars-approx-unique"]], "polars.Expr.tanh": [[553, "polars-expr-tanh"]], "polars.Expr.str.replace_all": [[526, "polars-expr-str-replace-all"]], "polars.Expr.str.strptime": [[535, "polars-expr-str-strptime"]], "polars.Expr.xor": [[563, "polars-expr-xor"]], "polars.arange": [[570, "polars-arange"]], "polars.Expr.str.to_titlecase": [[541, "polars-expr-str-to-titlecase"]], "polars.Expr.rolling_std": [[489, "polars-expr-rolling-std"]], "polars.Expr.log1p": [[435, "polars-expr-log1p"]], "polars.Expr.meta.is_regex_projection": [[446, "polars-expr-meta-is-regex-projection"]], "polars.Expr.meta.output_name": [[448, "polars-expr-meta-output-name"]], "polars.Expr.shift": [[496, "polars-expr-shift"]], "polars.Expr.sinh": [[502, "polars-expr-sinh"]], "polars.Expr.skew": [[503, "polars-expr-skew"]], "polars.Expr.meta.pop": [[449, "polars-expr-meta-pop"]], "polars.Expr.pipe": [[467, "polars-expr-pipe"]], "polars.Expr.rle_id": [[481, "polars-expr-rle-id"]], "polars.Expr.pct_change": [[466, "polars-expr-pct-change"]], "polars.Expr.map": [[438, "polars-expr-map"]], "polars.Expr.nan_min": [[460, "polars-expr-nan-min"]], "polars.Expr.rolling_mean": [[484, "polars-expr-rolling-mean"]], "polars.Expr.lower_bound": [[436, "polars-expr-lower-bound"]], "polars.Expr.meta.tree_format": [[451, "polars-expr-meta-tree-format"]], "polars.Expr.median": [[443, "polars-expr-median"]], "polars.Expr.rolling_sum": [[490, "polars-expr-rolling-sum"]], "polars.Expr.sign": [[500, "polars-expr-sign"]], "polars.Expr.search_sorted": [[494, "polars-expr-search-sorted"]], "polars.Expr.mul": [[457, "polars-expr-mul"]], "polars.Expr.log10": [[434, "polars-expr-log10"]], "polars.Expr.sin": [[501, "polars-expr-sin"]], "polars.Expr.set_sorted": [[495, "polars-expr-set-sorted"]], "polars.Expr.product": [[470, "polars-expr-product"]], "polars.Expr.meta.has_multiple_outputs": [[445, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.lt": [[437, "polars-expr-lt"]], "polars.Expr.mod": [[455, "polars-expr-mod"]], "polars.Expr.meta.ne": [[447, "polars-expr-meta-ne"]], "polars.Expr.min": [[454, "polars-expr-min"]], "polars.Expr.ne_missing": [[462, "polars-expr-ne-missing"]], "polars.Expr.list.unique": [[432, "polars-expr-list-unique"]], "polars.Expr.rechunk": [[475, "polars-expr-rechunk"]], "polars.Expr.repeat_by": [[477, "polars-expr-repeat-by"]], "polars.Expr.reverse": [[479, "polars-expr-reverse"]], "polars.Expr.rolling_var": [[491, "polars-expr-rolling-var"]], "polars.Expr.shift_and_fill": [[497, "polars-expr-shift-and-fill"]], "polars.Expr.round": [[492, "polars-expr-round"]], "polars.Expr.map_dict": [[440, "polars-expr-map-dict"]], "polars.Expr.rle": [[480, "polars-expr-rle"]], "polars.Expr.rolling_skew": [[488, "polars-expr-rolling-skew"]], "polars.Expr.map_alias": [[439, "polars-expr-map-alias"]], "polars.Expr.pow": [[468, "polars-expr-pow"]], "polars.Expr.prefix": [[469, "polars-expr-prefix"]], "polars.Expr.quantile": [[472, "polars-expr-quantile"]], "polars.Expr.radians": [[473, "polars-expr-radians"]], "polars.Expr.mean": [[442, "polars-expr-mean"]], "polars.Expr.rolling_quantile": [[487, "polars-expr-rolling-quantile"]], "polars.Expr.shrink_dtype": [[498, "polars-expr-shrink-dtype"]], "polars.Expr.null_count": [[463, "polars-expr-null-count"]], "polars.Expr.over": [[465, "polars-expr-over"]], "polars.Expr.reshape": [[478, "polars-expr-reshape"]], "polars.Expr.n_unique": [[458, "polars-expr-n-unique"]], "polars.Expr.rolling_min": [[486, "polars-expr-rolling-min"]], "polars.Expr.shuffle": [[499, "polars-expr-shuffle"]], "polars.Expr.qcut": [[471, "polars-expr-qcut"]], "polars.Expr.meta.eq": [[444, "polars-expr-meta-eq"]], "polars.Expr.ne": [[461, "polars-expr-ne"]], "polars.Expr.rolling_apply": [[482, "polars-expr-rolling-apply"]], "polars.Expr.rank": [[474, "polars-expr-rank"]], "polars.Expr.rolling_median": [[485, "polars-expr-rolling-median"]], "polars.Expr.nan_max": [[459, "polars-expr-nan-max"]], "polars.Expr.meta.undo_aliases": [[452, "polars-expr-meta-undo-aliases"]], "polars.Expr.log": [[433, "polars-expr-log"]], "polars.Expr.mode": [[456, "polars-expr-mode"]], "polars.Expr.or_": [[464, "polars-expr-or"]], "polars.Expr.sample": [[493, "polars-expr-sample"]], "polars.Expr.reinterpret": [[476, "polars-expr-reinterpret"]], "polars.Expr.max": [[441, "polars-expr-max"]], "polars.Expr.rolling_max": [[483, "polars-expr-rolling-max"]], "polars.Expr.meta.root_names": [[450, "polars-expr-meta-root-names"]], "polars.Expr.meta.write_json": [[453, "polars-expr-meta-write-json"]], "polars.Expr.extend_constant": [[366, "polars-expr-extend-constant"]], "polars.Expr.interpolate": [[382, "polars-expr-interpolate"]], "polars.Expr.is_duplicated": [[384, "polars-expr-is-duplicated"]], "polars.Expr.floordiv": [[373, "polars-expr-floordiv"]], "polars.Expr.ge": [[376, "polars-expr-ge"]], "polars.Expr.list.arg_min": [[404, "polars-expr-list-arg-min"]], "polars.Expr.list.contains": [[406, "polars-expr-list-contains"]], "polars.Expr.gt": [[377, "polars-expr-gt"]], "polars.Expr.list.take": [[430, "polars-expr-list-take"]], "polars.Expr.list.slice": [[426, "polars-expr-list-slice"]], "polars.Expr.list.first": [[411, "polars-expr-list-first"]], "polars.Expr.is_infinite": [[388, "polars-expr-is-infinite"]], "polars.Expr.is_first": [[386, "polars-expr-is-first"]], "polars.Expr.len": [[399, "polars-expr-len"]], "polars.Expr.list.sort": [[427, "polars-expr-list-sort"]], "polars.Expr.list.to_struct": [[431, "polars-expr-list-to-struct"]], "polars.Expr.ewm_std": [[361, "polars-expr-ewm-std"]], "polars.Expr.is_unique": [[394, "polars-expr-is-unique"]], "polars.Expr.list.explode": [[410, "polars-expr-list-explode"]], "polars.Expr.list.mean": [[418, "polars-expr-list-mean"]], "polars.Expr.is_nan": [[389, "polars-expr-is-nan"]], "polars.Expr.list.concat": [[405, "polars-expr-list-concat"]], "polars.Expr.implode": [[380, "polars-expr-implode"]], "polars.Expr.list.set_union": [[424, "polars-expr-list-set-union"]], "polars.Expr.list.tail": [[429, "polars-expr-list-tail"]], "polars.Expr.list.last": [[415, "polars-expr-list-last"]], "polars.Expr.list.head": [[413, "polars-expr-list-head"]], "polars.Expr.list.min": [[419, "polars-expr-list-min"]], "polars.Expr.forward_fill": [[374, "polars-expr-forward-fill"]], "polars.Expr.list.max": [[417, "polars-expr-list-max"]], "polars.Expr.list.set_intersection": [[422, "polars-expr-list-set-intersection"]], "polars.Expr.list.eval": [[409, "polars-expr-list-eval"]], "polars.Expr.last": [[397, "polars-expr-last"]], "polars.Expr.kurtosis": [[396, "polars-expr-kurtosis"]], "polars.Expr.from_json": [[375, "polars-expr-from-json"]], "polars.Expr.list.diff": [[408, "polars-expr-list-diff"]], "polars.Expr.is_between": [[383, "polars-expr-is-between"]], "polars.Expr.fill_nan": [[367, "polars-expr-fill-nan"]], "polars.Expr.limit": [[400, "polars-expr-limit"]], "polars.Expr.flatten": [[371, "polars-expr-flatten"]], "polars.Expr.list.join": [[414, "polars-expr-list-join"]], "polars.Expr.explode": [[365, "polars-expr-explode"]], "polars.Expr.list.sum": [[428, "polars-expr-list-sum"]], "polars.Expr.list.reverse": [[420, "polars-expr-list-reverse"]], "polars.Expr.is_not_nan": [[391, "polars-expr-is-not-nan"]], "polars.Expr.is_in": [[387, "polars-expr-is-in"]], "polars.Expr.list.shift": [[425, "polars-expr-list-shift"]], "polars.Expr.filter": [[369, "polars-expr-filter"]], "polars.Expr.floor": [[372, "polars-expr-floor"]], "polars.Expr.le": [[398, "polars-expr-le"]], "polars.Expr.list.arg_max": [[403, "polars-expr-list-arg-max"]], "polars.Expr.list.count_match": [[407, "polars-expr-list-count-match"]], "polars.Expr.ewm_mean": [[360, "polars-expr-ewm-mean"]], "polars.Expr.is_not": [[390, "polars-expr-is-not"]], "polars.Expr.exclude": [[363, "polars-expr-exclude"]], "polars.Expr.inspect": [[381, "polars-expr-inspect"]], "polars.Expr.keep_name": [[395, "polars-expr-keep-name"]], "polars.Expr.fill_null": [[368, "polars-expr-fill-null"]], "polars.Expr.is_finite": [[385, "polars-expr-is-finite"]], "polars.Expr.list.all": [[401, "polars-expr-list-all"]], "polars.Expr.list.lengths": [[416, "polars-expr-list-lengths"]], "polars.Expr.list.set_difference": [[421, "polars-expr-list-set-difference"]], "polars.Expr.list.get": [[412, "polars-expr-list-get"]], "polars.Expr.first": [[370, "polars-expr-first"]], "polars.Expr.hash": [[378, "polars-expr-hash"]], "polars.Expr.head": [[379, "polars-expr-head"]], "polars.Expr.list.set_symmetric_difference": [[423, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.exp": [[364, "polars-expr-exp"]], "polars.Expr.is_not_null": [[392, "polars-expr-is-not-null"]], "polars.Expr.ewm_var": [[362, "polars-expr-ewm-var"]], "polars.Expr.is_null": [[393, "polars-expr-is-null"]], "polars.Expr.list.any": [[402, "polars-expr-list-any"]], "polars.Expr.dt.day": [[322, "polars-expr-dt-day"]], "polars.Expr.cat.get_categories": [[294, "polars-expr-cat-get-categories"]], "polars.Expr.dt.iso_year": [[329, "polars-expr-dt-iso-year"]], "polars.Expr.dt.second": [[346, "polars-expr-dt-second"]], "polars.Expr.dt.dst_offset": [[324, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.offset_by": [[341, "polars-expr-dt-offset-by"]], "polars.Expr.bin.ends_with": [[289, "polars-expr-bin-ends-with"]], "polars.Expr.diff": [[312, "polars-expr-diff"]], "polars.Expr.eq_missing": [[359, "polars-expr-eq-missing"]], "polars.Expr.cumulative_eval": [[309, "polars-expr-cumulative-eval"]], "polars.Expr.cos": [[301, "polars-expr-cos"]], "polars.Expr.dt.month_start": [[338, "polars-expr-dt-month-start"]], "polars.Expr.degrees": [[311, "polars-expr-degrees"]], "polars.Expr.dt.weekday": [[354, "polars-expr-dt-weekday"]], "polars.Expr.dt.millisecond": [[332, "polars-expr-dt-millisecond"]], "polars.Expr.bottom_k": [[291, "polars-expr-bottom-k"]], "polars.Expr.dt.quarter": [[343, "polars-expr-dt-quarter"]], "polars.Expr.dt.hour": [[326, "polars-expr-dt-hour"]], "polars.Expr.dt.year": [[356, "polars-expr-dt-year"]], "polars.Expr.dt.cast_time_unit": [[317, "polars-expr-dt-cast-time-unit"]], "polars.Expr.cbrt": [[296, "polars-expr-cbrt"]], "polars.Expr.dt.epoch": [[325, "polars-expr-dt-epoch"]], "polars.Expr.eq": [[358, "polars-expr-eq"]], "polars.Expr.dt.microseconds": [[331, "polars-expr-dt-microseconds"]], "polars.Expr.cut": [[310, "polars-expr-cut"]], "polars.Expr.dt.replace_time_zone": [[344, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.round": [[345, "polars-expr-dt-round"]], "polars.Expr.dt.combine": [[318, "polars-expr-dt-combine"]], "polars.Expr.dot": [[313, "polars-expr-dot"]], "polars.Expr.dt.strftime": [[348, "polars-expr-dt-strftime"]], "polars.Expr.cumsum": [[308, "polars-expr-cumsum"]], "polars.Expr.count": [[303, "polars-expr-count"]], "polars.Expr.dt.nanoseconds": [[340, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.truncate": [[352, "polars-expr-dt-truncate"]], "polars.Expr.dt.microsecond": [[330, "polars-expr-dt-microsecond"]], "polars.Expr.dt.milliseconds": [[333, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.nanosecond": [[339, "polars-expr-dt-nanosecond"]], "polars.Expr.cumcount": [[304, "polars-expr-cumcount"]], "polars.Expr.dt.with_time_unit": [[355, "polars-expr-dt-with-time-unit"]], "polars.Expr.cache": [[292, "polars-expr-cache"]], "polars.Expr.cummax": [[305, "polars-expr-cummax"]], "polars.Expr.bin.starts_with": [[290, "polars-expr-bin-starts-with"]], "polars.Expr.dt.days": [[323, "polars-expr-dt-days"]], "polars.Expr.dt.ordinal_day": [[342, "polars-expr-dt-ordinal-day"]], "polars.Expr.cat.set_ordering": [[295, "polars-expr-cat-set-ordering"]], "polars.Expr.cummin": [[306, "polars-expr-cummin"]], "polars.Expr.dt.convert_time_zone": [[319, "polars-expr-dt-convert-time-zone"]], "polars.Expr.bin.encode": [[288, "polars-expr-bin-encode"]], "polars.Expr.dt.is_leap_year": [[328, "polars-expr-dt-is-leap-year"]], "polars.Expr.clip_min": [[300, "polars-expr-clip-min"]], "polars.Expr.clip": [[298, "polars-expr-clip"]], "polars.Expr.clip_max": [[299, "polars-expr-clip-max"]], "polars.Expr.drop_nans": [[314, "polars-expr-drop-nans"]], "polars.Expr.dt.date": [[320, "polars-expr-dt-date"]], "polars.Expr.ceil": [[297, "polars-expr-ceil"]], "polars.Expr.dt.base_utc_offset": [[316, "polars-expr-dt-base-utc-offset"]], "polars.Expr.dt.month": [[336, "polars-expr-dt-month"]], "polars.Expr.dt.time": [[349, "polars-expr-dt-time"]], "polars.Expr.entropy": [[357, "polars-expr-entropy"]], "polars.Expr.dt.minute": [[334, "polars-expr-dt-minute"]], "polars.Expr.dt.hours": [[327, "polars-expr-dt-hours"]], "polars.Expr.cast": [[293, "polars-expr-cast"]], "polars.Expr.dt.datetime": [[321, "polars-expr-dt-datetime"]], "polars.Expr.cumprod": [[307, "polars-expr-cumprod"]], "polars.Expr.dt.timestamp": [[350, "polars-expr-dt-timestamp"]], "polars.Expr.dt.to_string": [[351, "polars-expr-dt-to-string"]], "polars.Expr.dt.week": [[353, "polars-expr-dt-week"]], "polars.Expr.drop_nulls": [[315, "polars-expr-drop-nulls"]], "polars.Expr.dt.month_end": [[337, "polars-expr-dt-month-end"]], "polars.Expr.dt.seconds": [[347, "polars-expr-dt-seconds"]], "polars.Expr.cosh": [[302, "polars-expr-cosh"]], "polars.Expr.dt.minutes": [[335, "polars-expr-dt-minutes"]], "polars.head": [[599, "polars-head"]], "polars.var": [[629, "polars-var"]], "polars.corr": [[580, "polars-corr"]], "polars.std": [[621, "polars-std"]], "polars.quantile": [[614, "polars-quantile"]], "Expressions": [[639, "expressions"]], "polars.ones": [[613, "polars-ones"]], "polars.cumreduce": [[584, "polars-cumreduce"]], "polars.date": [[587, "polars-date"]], "polars.cumsum_horizontal": [[586, "polars-cumsum-horizontal"]], "polars.datetime": [[590, "polars-datetime"]], "polars.element": [[592, "polars-element"]], "polars.int_range": [[601, "polars-int-range"]], "polars.median": [[609, "polars-median"]], "polars.sum_horizontal": [[624, "polars-sum-horizontal"]], "polars.concat_str": [[579, "polars-concat-str"]], "polars.first": [[594, "polars-first"]], "polars.col": [[577, "polars-col"]], "polars.rolling_cov": [[618, "polars-rolling-cov"]], "polars.max_horizontal": [[607, "polars-max-horizontal"]], "polars.mean": [[608, "polars-mean"]], "polars.lit": [[604, "polars-lit"]], "polars.min": [[610, "polars-min"]], "polars.select": [[619, "polars-select"]], "polars.duration": [[591, "polars-duration"]], "polars.struct": [[622, "polars-struct"]], "Meta": [[641, "meta"]], "polars.groups": [[598, "polars-groups"]], "polars.reduce": [[615, "polars-reduce"]], "polars.coalesce": [[576, "polars-coalesce"]], "polars.when": [[630, "polars-when"]], "polars.sql_expr": [[620, "polars-sql-expr"]], "polars.time": [[626, "polars-time"]], "polars.map": [[605, "polars-map"]], "polars.max": [[606, "polars-max"]], "polars.n_unique": [[612, "polars-n-unique"]], "polars.time_ranges": [[628, "polars-time-ranges"]], "Columns / names": [[636, "columns-names"]], "polars.rolling_corr": [[617, "polars-rolling-corr"]], "polars.sum": [[623, "polars-sum"]], "Operators": [[644, "operators"]], "Conjunction": [[644, "conjunction"]], "Comparison": [[644, "comparison"]], "Numeric": [[644, "numeric"], [257, "numeric"]], "polars.tail": [[625, "polars-tail"]], "polars.date_ranges": [[589, "polars-date-ranges"]], "polars.cov": [[582, "polars-cov"]], "polars.last": [[603, "polars-last"]], "polars.min_horizontal": [[611, "polars-min-horizontal"]], "polars.repeat": [[616, "polars-repeat"]], "polars.fold": [[595, "polars-fold"]], "polars.from_epoch": [[597, "polars-from-epoch"]], "polars.date_range": [[588, "polars-date-range"]], "polars.cumsum": [[585, "polars-cumsum"]], "polars.exclude": [[593, "polars-exclude"]], "polars.implode": [[600, "polars-implode"]], "polars.format": [[596, "polars-format"]], "polars.int_ranges": [[602, "polars-int-ranges"]], "polars.zeros": [[631, "polars-zeros"]], "polars.time_range": [[627, "polars-time-range"]], "polars.count": [[581, "polars-count"]], "polars.cumfold": [[583, "polars-cumfold"]], "polars.concat_list": [[578, "polars-concat-list"]], "polars.DataFrame.to_dict": [[213, "polars-dataframe-to-dict"]], "polars.DataFrame.height": [[162, "polars-dataframe-height"]], "polars.DataFrame.is_unique": [[168, "polars-dataframe-is-unique"]], "polars.DataFrame.groupby_rolling": [[159, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.insert_at_idx": [[164, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.pivot": [[187, "polars-dataframe-pivot"]], "polars.DataFrame.schema": [[199, "polars-dataframe-schema"]], "polars.DataFrame.shape": [[202, "polars-dataframe-shape"]], "polars.DataFrame.frame_equal": [[153, "polars-dataframe-frame-equal"]], "polars.DataFrame.get_columns": [[155, "polars-dataframe-get-columns"]], "polars.DataFrame.product": [[188, "polars-dataframe-product"]], "polars.DataFrame.slice": [[206, "polars-dataframe-slice"]], "polars.DataFrame.sort": [[207, "polars-dataframe-sort"]], "polars.DataFrame.select": [[200, "polars-dataframe-select"]], "polars.DataFrame.fold": [[152, "polars-dataframe-fold"]], "polars.DataFrame.glimpse": [[156, "polars-dataframe-glimpse"]], "polars.DataFrame.groupby_dynamic": [[158, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.fill_null": [[148, "polars-dataframe-fill-null"]], "polars.DataFrame.is_duplicated": [[166, "polars-dataframe-is-duplicated"]], "polars.DataFrame.join": [[172, "polars-dataframe-join"]], "polars.DataFrame.join_asof": [[173, "polars-dataframe-join-asof"]], "polars.DataFrame.get_column": [[154, "polars-dataframe-get-column"]], "polars.DataFrame.rename": [[191, "polars-dataframe-rename"]], "polars.DataFrame.replace_at_idx": [[193, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.item": [[169, "polars-dataframe-item"]], "polars.DataFrame.median": [[178, "polars-dataframe-median"]], "polars.DataFrame.lazy": [[174, "polars-dataframe-lazy"]], "polars.DataFrame.rows_by_key": [[197, "polars-dataframe-rows-by-key"]], "polars.DataFrame.filter": [[149, "polars-dataframe-filter"]], "polars.DataFrame.merge_sorted": [[180, "polars-dataframe-merge-sorted"]], "polars.DataFrame.estimated_size": [[144, "polars-dataframe-estimated-size"]], "polars.DataFrame.limit": [[175, "polars-dataframe-limit"]], "polars.DataFrame.rechunk": [[190, "polars-dataframe-rechunk"]], "polars.DataFrame.max": [[176, "polars-dataframe-max"]], "polars.DataFrame.replace": [[192, "polars-dataframe-replace"]], "polars.DataFrame.n_chunks": [[182, "polars-dataframe-n-chunks"]], "polars.DataFrame.fill_nan": [[147, "polars-dataframe-fill-nan"]], "polars.DataFrame.n_unique": [[183, "polars-dataframe-n-unique"]], "polars.DataFrame.mean": [[177, "polars-dataframe-mean"]], "polars.DataFrame.iter_rows": [[170, "polars-dataframe-iter-rows"]], "polars.DataFrame.groupby": [[157, "polars-dataframe-groupby"]], "polars.DataFrame.extend": [[146, "polars-dataframe-extend"]], "polars.DataFrame.min": [[181, "polars-dataframe-min"]], "polars.DataFrame.set_sorted": [[201, "polars-dataframe-set-sorted"]], "polars.DataFrame.find_idx_by_name": [[150, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.shift_and_fill": [[204, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.null_count": [[184, "polars-dataframe-null-count"]], "polars.DataFrame.quantile": [[189, "polars-dataframe-quantile"]], "polars.DataFrame.hash_rows": [[160, "polars-dataframe-hash-rows"]], "polars.DataFrame.melt": [[179, "polars-dataframe-melt"]], "polars.DataFrame.to_dicts": [[214, "polars-dataframe-to-dicts"]], "polars.DataFrame.rows": [[196, "polars-dataframe-rows"]], "polars.DataFrame.to_dummies": [[215, "polars-dataframe-to-dummies"]], "polars.DataFrame.interpolate": [[165, "polars-dataframe-interpolate"]], "polars.DataFrame.pipe": [[186, "polars-dataframe-pipe"]], "polars.DataFrame.row": [[195, "polars-dataframe-row"]], "polars.DataFrame.std": [[208, "polars-dataframe-std"]], "polars.DataFrame.sample": [[198, "polars-dataframe-sample"]], "polars.DataFrame.hstack": [[163, "polars-dataframe-hstack"]], "polars.DataFrame.shift": [[203, "polars-dataframe-shift"]], "polars.DataFrame.partition_by": [[185, "polars-dataframe-partition-by"]], "polars.DataFrame.sum": [[209, "polars-dataframe-sum"]], "polars.DataFrame.head": [[161, "polars-dataframe-head"]], "polars.DataFrame.iter_slices": [[171, "polars-dataframe-iter-slices"]], "polars.DataFrame.tail": [[210, "polars-dataframe-tail"]], "polars.DataFrame.flags": [[151, "polars-dataframe-flags"]], "polars.DataFrame.reverse": [[194, "polars-dataframe-reverse"]], "polars.DataFrame.shrink_to_fit": [[205, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.explode": [[145, "polars-dataframe-explode"]], "polars.DataFrame.is_empty": [[167, "polars-dataframe-is-empty"]], "polars.DataFrame.take_every": [[211, "polars-dataframe-take-every"]], "polars.DataFrame.to_arrow": [[212, "polars-dataframe-to-arrow"]], "polars.Expr.apply": [[268, "polars-expr-apply"]], "Exceptions": [[258, "exceptions"]], "polars.Expr.bin.contains": [[286, "polars-expr-bin-contains"]], "Data types": [[257, "data-types"]], "Nested": [[257, "nested"]], "Other": [[257, "other"]], "polars.dataframe.groupby.GroupBy.max": [[241, "polars-dataframe-groupby-groupby-max"]], "polars.DataFrame.var": [[228, "polars-dataframe-var"]], "polars.dataframe.groupby.GroupBy.count": [[237, "polars-dataframe-groupby-groupby-count"]], "polars.dataframe.groupby.GroupBy.apply": [[236, "polars-dataframe-groupby-groupby-apply"]], "polars.Expr.approx_unique": [[269, "polars-expr-approx-unique"]], "polars.DataFrame.unique": [[223, "polars-dataframe-unique"]], "polars.Expr.abs": [[260, "polars-expr-abs"]], "polars.dataframe.groupby.GroupBy.mean": [[242, "polars-dataframe-groupby-groupby-mean"]], "polars.Expr.arg_sort": [[278, "polars-expr-arg-sort"]], "polars.Expr.arr.sum": [[283, "polars-expr-arr-sum"]], "polars.Expr.all": [[264, "polars-expr-all"]], "polars.dataframe.groupby.GroupBy.all": [[235, "polars-dataframe-groupby-groupby-all"]], "polars.DataFrame.unstack": [[225, "polars-dataframe-unstack"]], "polars.Expr.arccos": [[270, "polars-expr-arccos"]], "polars.DataFrame.to_numpy": [[217, "polars-dataframe-to-numpy"]], "polars.Expr.arctanh": [[275, "polars-expr-arctanh"]], "polars.Expr.arg_unique": [[280, "polars-expr-arg-unique"]], "polars.DataFrame.to_series": [[219, "polars-dataframe-to-series"]], "polars.Expr.and_": [[265, "polars-expr-and"]], "polars.DataFrame.with_row_count": [[232, "polars-dataframe-with-row-count"]], "polars.dataframe.groupby.GroupBy.median": [[243, "polars-dataframe-groupby-groupby-median"]], "polars.dataframe.groupby.GroupBy.min": [[244, "polars-dataframe-groupby-groupby-min"]], "polars.DataFrame.to_struct": [[220, "polars-dataframe-to-struct"]], "polars.DataFrame.update": [[226, "polars-dataframe-update"]], "polars.dataframe.groupby.GroupBy.first": [[238, "polars-dataframe-groupby-groupby-first"]], "polars.Expr.arg_min": [[277, "polars-expr-arg-min"]], "polars.Expr.arg_true": [[279, "polars-expr-arg-true"]], "polars.dataframe.groupby.GroupBy.head": [[239, "polars-dataframe-groupby-groupby-head"]], "polars.dataframe.groupby.GroupBy.quantile": [[246, "polars-dataframe-groupby-groupby-quantile"]], "polars.Expr.arr.max": [[281, "polars-expr-arr-max"]], "polars.DataFrame.to_init_repr": [[216, "polars-dataframe-to-init-repr"]], "polars.dataframe.groupby.GroupBy.last": [[240, "polars-dataframe-groupby-groupby-last"]], "polars.DataFrame.upsample": [[227, "polars-dataframe-upsample"]], "polars.Expr.arr.min": [[282, "polars-expr-arr-min"]], "polars.DataFrame.to_pandas": [[218, "polars-dataframe-to-pandas"]], "polars.Expr.alias": [[263, "polars-expr-alias"]], "polars.Expr.agg_groups": [[262, "polars-expr-agg-groups"]], "polars.DataFrame.vstack": [[229, "polars-dataframe-vstack"]], "polars.DataFrame.unnest": [[224, "polars-dataframe-unnest"]], "polars.Expr.any": [[266, "polars-expr-any"]], "polars.Expr.arcsinh": [[273, "polars-expr-arcsinh"]], "polars.dataframe.groupby.GroupBy.n_unique": [[245, "polars-dataframe-groupby-groupby-n-unique"]], "polars.DataFrame.top_k": [[221, "polars-dataframe-top-k"]], "polars.dataframe.groupby.GroupBy.tail": [[248, "polars-dataframe-groupby-groupby-tail"]], "polars.Expr.add": [[261, "polars-expr-add"]], "polars.Expr.arccosh": [[271, "polars-expr-arccosh"]], "polars.Expr.arr.unique": [[284, "polars-expr-arr-unique"]], "polars.Expr.bin.decode": [[287, "polars-expr-bin-decode"]], "polars.Expr.arcsin": [[272, "polars-expr-arcsin"]], "polars.dataframe.groupby.GroupBy.sum": [[247, "polars-dataframe-groupby-groupby-sum"]], "polars.DataFrame.width": [[230, "polars-dataframe-width"]], "polars.dataframe.groupby.GroupBy.__iter__": [[233, "polars-dataframe-groupby-groupby-iter"]], "polars.Expr.arctan": [[274, "polars-expr-arctan"]], "polars.DataFrame.transpose": [[222, "polars-dataframe-transpose"]], "DataFrame": [[254, "dataframe"]], "polars.dataframe.groupby.GroupBy.agg": [[234, "polars-dataframe-groupby-groupby-agg"]], "polars.Expr.append": [[267, "polars-expr-append"]], "polars.DataFrame.with_columns": [[231, "polars-dataframe-with-columns"]], "polars.Expr.arg_max": [[276, "polars-expr-arg-max"]], "polars.Expr.backward_fill": [[285, "polars-expr-backward-fill"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[8, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[9, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[10, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[13, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[14, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[15, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[16, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[17, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[18, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[23, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[24, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[25, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[26, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[27, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[28, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[29, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[30, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[31, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[32, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[33, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[34, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[35, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[36, "polars.DataType"]], "__init__() (polars.datatype method)": [[36, "polars.DataType.__init__"]], "date (class in polars)": [[37, "polars.Date"]], "__init__() (polars.date method)": [[37, "polars.Date.__init__"]], "datetime (class in polars)": [[38, "polars.Datetime"]], "__init__() (polars.datetime method)": [[38, "polars.Datetime.__init__"]], "decimal (class in polars)": [[39, "polars.Decimal"]], "__init__() (polars.decimal method)": [[39, "polars.Decimal.__init__"]], "duration (class in polars)": [[40, "polars.Duration"]], "__init__() (polars.duration method)": [[40, "polars.Duration.__init__"]], "float32 (class in polars)": [[41, "polars.Float32"]], "__init__() (polars.float32 method)": [[41, "polars.Float32.__init__"]], "float64 (class in polars)": [[42, "polars.Float64"]], "__init__() (polars.float64 method)": [[42, "polars.Float64.__init__"]], "int16 (class in polars)": [[43, "polars.Int16"]], "__init__() (polars.int16 method)": [[43, "polars.Int16.__init__"]], "int32 (class in polars)": [[44, "polars.Int32"]], "__init__() (polars.int32 method)": [[44, "polars.Int32.__init__"]], "int64 (class in polars)": [[45, "polars.Int64"]], "__init__() (polars.int64 method)": [[45, "polars.Int64.__init__"]], "int8 (class in polars)": [[46, "polars.Int8"]], "__init__() (polars.int8 method)": [[46, "polars.Int8.__init__"]], "sink_ipc() (polars.lazyframe method)": [[47, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[49, "polars.List"]], "__init__() (polars.list method)": [[49, "polars.List.__init__"]], "null (class in polars)": [[50, "polars.Null"]], "__init__() (polars.null method)": [[50, "polars.Null.__init__"]], "object (class in polars)": [[51, "polars.Object"]], "__init__() (polars.object method)": [[51, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[52, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[53, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[54, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[55, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[56, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[57, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[58, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[58, "polars.StringCache.__init__"]], "struct (class in polars)": [[59, "polars.Struct"]], "__init__() (polars.struct method)": [[59, "polars.Struct.__init__"]], "time (class in polars)": [[60, "polars.Time"]], "__init__() (polars.time method)": [[60, "polars.Time.__init__"]], "uint16 (class in polars)": [[61, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[61, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[62, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[62, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[63, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[63, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[64, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[64, "polars.UInt8.__init__"]], "unknown (class in polars)": [[65, "polars.Unknown"]], "__init__() (polars.unknown method)": [[65, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[66, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[66, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[67, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[68, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[69, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[70, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[71, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[72, "polars.build_info"]], "collect_all() (in module polars)": [[73, "polars.collect_all"]], "concat() (in module polars)": [[74, "polars.concat"]], "enable_string_cache() (in module polars)": [[75, "polars.enable_string_cache"]], "arrowerror": [[76, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[77, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[78, "polars.exceptions.ComputeError"]], "duplicateerror": [[79, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[80, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[81, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[82, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[83, "polars.exceptions.PolarsPanicError"]], "rowserror": [[84, "polars.exceptions.RowsError"]], "schemaerror": [[85, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[86, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[87, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[88, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[89, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[90, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[91, "polars.from_dataframe"]], "from_dict() (in module polars)": [[92, "polars.from_dict"]], "from_dicts() (in module polars)": [[93, "polars.from_dicts"]], "from_numpy() (in module polars)": [[94, "polars.from_numpy"]], "from_pandas() (in module polars)": [[95, "polars.from_pandas"]], "from_records() (in module polars)": [[96, "polars.from_records"]], "from_repr() (in module polars)": [[97, "polars.from_repr"]], "get_index_type() (in module polars)": [[98, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[99, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[100, "polars.read_avro"]], "read_csv() (in module polars)": [[101, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[102, "polars.read_csv_batched"]], "read_database() (in module polars)": [[103, "polars.read_database"]], "read_delta() (in module polars)": [[104, "polars.read_delta"]], "read_excel() (in module polars)": [[105, "polars.read_excel"]], "read_ipc() (in module polars)": [[106, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[107, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[108, "polars.read_json"]], "read_ndjson() (in module polars)": [[109, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[110, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[111, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[112, "polars.scan_csv"]], "scan_delta() (in module polars)": [[113, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[114, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[115, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[116, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[117, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[118, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[119, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[120, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[121, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[121, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[122, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[123, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[124, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[125, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[126, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[127, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[128, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[129, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[132, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[133, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[134, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[135, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[136, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[137, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[138, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[139, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[140, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[141, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[142, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[143, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[144, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[145, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[146, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[147, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[148, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[149, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[150, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[151, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[152, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[153, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[154, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[155, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[156, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[157, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[158, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[159, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[160, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[161, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[162, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[163, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[164, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[165, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[166, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[167, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[168, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[169, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[170, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[171, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[172, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[173, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[174, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[175, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[176, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[177, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[178, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[179, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[180, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[181, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[182, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[183, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[184, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[185, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[186, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[187, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[188, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[189, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[190, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[191, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[192, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[193, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[194, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[195, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[196, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[197, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[198, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[199, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[200, "polars.DataFrame.select"]], "set_sorted() (polars.dataframe method)": [[201, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[202, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[203, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[204, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[205, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[206, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[207, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[208, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[209, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[210, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[211, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[212, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[213, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[214, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[215, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[216, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[217, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[218, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[219, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[220, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[221, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[222, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[223, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[224, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[225, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[226, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[227, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[228, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[229, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[230, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[231, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[232, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[233, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[241, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[242, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[243, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[244, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[245, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[246, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[247, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[248, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[260, "polars.Expr.abs"]], "add() (polars.expr method)": [[261, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[262, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[263, "polars.Expr.alias"]], "all() (polars.expr method)": [[264, "polars.Expr.all"]], "and_() (polars.expr method)": [[265, "polars.Expr.and_"]], "any() (polars.expr method)": [[266, "polars.Expr.any"]], "append() (polars.expr method)": [[267, "polars.Expr.append"]], "apply() (polars.expr method)": [[268, "polars.Expr.apply"]], "approx_unique() (polars.expr method)": [[269, "polars.Expr.approx_unique"]], "arccos() (polars.expr method)": [[270, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[271, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[272, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[273, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[274, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[275, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[276, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[277, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[278, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[279, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[280, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[281, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[282, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[283, "polars.Expr.arr.sum"]], "unique() (polars.expr.arr method)": [[284, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[285, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[286, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[287, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[288, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[289, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[290, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[291, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[292, "polars.Expr.cache"]], "cast() (polars.expr method)": [[293, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[294, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[295, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[296, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[297, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[298, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[299, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[300, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[301, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[302, "polars.Expr.cosh"]], "count() (polars.expr method)": [[303, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[304, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[305, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[306, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[307, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[308, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[309, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[310, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[311, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[312, "polars.Expr.diff"]], "dot() (polars.expr method)": [[313, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[314, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[315, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[316, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[317, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[318, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[319, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[320, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[321, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[322, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[323, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[324, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[325, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[326, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[327, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[328, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[329, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[330, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[331, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[332, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[333, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[334, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[335, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[336, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[337, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[338, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[339, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[340, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[341, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[342, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[343, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[344, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[345, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[346, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[347, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[348, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[349, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[350, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[351, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[352, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[353, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[354, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[355, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[356, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[357, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[358, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[359, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[360, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[361, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[362, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[363, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[364, "polars.Expr.exp"]], "explode() (polars.expr method)": [[365, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[366, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[367, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[368, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[369, "polars.Expr.filter"]], "first() (polars.expr method)": [[370, "polars.Expr.first"]], "flatten() (polars.expr method)": [[371, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[372, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[373, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[374, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[375, "polars.Expr.from_json"]], "ge() (polars.expr method)": [[376, "polars.Expr.ge"]], "gt() (polars.expr method)": [[377, "polars.Expr.gt"]], "hash() (polars.expr method)": [[378, "polars.Expr.hash"]], "head() (polars.expr method)": [[379, "polars.Expr.head"]], "implode() (polars.expr method)": [[380, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[381, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[382, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[383, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[384, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[385, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[386, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[387, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[388, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[389, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[390, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[391, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[392, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[393, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[394, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[395, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[396, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[397, "polars.Expr.last"]], "le() (polars.expr method)": [[398, "polars.Expr.le"]], "len() (polars.expr method)": [[399, "polars.Expr.len"]], "limit() (polars.expr method)": [[400, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[401, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[402, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[403, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[404, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[405, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[406, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[407, "polars.Expr.list.count_match"]], "diff() (polars.expr.list method)": [[408, "polars.Expr.list.diff"]], "eval() (polars.expr.list method)": [[409, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[410, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[411, "polars.Expr.list.first"]], "get() (polars.expr.list method)": [[412, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[413, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[414, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[415, "polars.Expr.list.last"]], "lengths() (polars.expr.list method)": [[416, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[417, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[418, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[419, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[420, "polars.Expr.list.reverse"]], "set_difference() (polars.expr.list method)": [[421, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[422, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[423, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[424, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[425, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[426, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[427, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[428, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[429, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[430, "polars.Expr.list.take"]], "to_struct() (polars.expr.list method)": [[431, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[432, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[433, "polars.Expr.log"]], "log10() (polars.expr method)": [[434, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[435, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[436, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[437, "polars.Expr.lt"]], "map() (polars.expr method)": [[438, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[439, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[440, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[441, "polars.Expr.max"]], "mean() (polars.expr method)": [[442, "polars.Expr.mean"]], "median() (polars.expr method)": [[443, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[444, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[445, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[446, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[447, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[448, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[449, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[450, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[451, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[452, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[453, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[454, "polars.Expr.min"]], "mod() (polars.expr method)": [[455, "polars.Expr.mod"]], "mode() (polars.expr method)": [[456, "polars.Expr.mode"]], "mul() (polars.expr method)": [[457, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[458, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[459, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[460, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[461, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[462, "polars.Expr.ne_missing"]], "null_count() (polars.expr method)": [[463, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[464, "polars.Expr.or_"]], "over() (polars.expr method)": [[465, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[466, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[467, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[468, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[469, "polars.Expr.prefix"]], "product() (polars.expr method)": [[470, "polars.Expr.product"]], "qcut() (polars.expr method)": [[471, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[472, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[473, "polars.Expr.radians"]], "rank() (polars.expr method)": [[474, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[475, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[476, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[477, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[478, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[479, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[480, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[481, "polars.Expr.rle_id"]], "rolling_apply() (polars.expr method)": [[482, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[483, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[484, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[485, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[486, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[487, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[488, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[489, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[490, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[491, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[492, "polars.Expr.round"]], "sample() (polars.expr method)": [[493, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[494, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[495, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[496, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[497, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[498, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[499, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[500, "polars.Expr.sign"]], "sin() (polars.expr method)": [[501, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[502, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[503, "polars.Expr.skew"]], "slice() (polars.expr method)": [[504, "polars.Expr.slice"]], "sort() (polars.expr method)": [[505, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[506, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[507, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[508, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[509, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[510, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[511, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[512, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[513, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[514, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[515, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[516, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[517, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[518, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[519, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[520, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[521, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[522, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[523, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[524, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[525, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[526, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[527, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[528, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[529, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[530, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[531, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[532, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[533, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[534, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[535, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[536, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[537, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[538, "polars.Expr.str.to_decimal"]], "to_lowercase() (polars.expr.str method)": [[539, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[540, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[541, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[542, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[543, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[544, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[545, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[546, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[547, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[548, "polars.Expr.sum"]], "tail() (polars.expr method)": [[549, "polars.Expr.tail"]], "take() (polars.expr method)": [[550, "polars.Expr.take"]], "take_every() (polars.expr method)": [[551, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[552, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[553, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[554, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[555, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[556, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[557, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[558, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[559, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[560, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[561, "polars.Expr.var"]], "where() (polars.expr method)": [[562, "polars.Expr.where"]], "xor() (polars.expr method)": [[563, "polars.Expr.xor"]], "all() (in module polars)": [[564, "polars.all"]], "all_horizontal() (in module polars)": [[565, "polars.all_horizontal"]], "any() (in module polars)": [[566, "polars.any"]], "any_horizontal() (in module polars)": [[567, "polars.any_horizontal"]], "apply() (in module polars)": [[568, "polars.apply"]], "approx_unique() (in module polars)": [[569, "polars.approx_unique"]], "arange() (in module polars)": [[570, "polars.arange"]], "arctan2() (in module polars)": [[571, "polars.arctan2"]], "arctan2d() (in module polars)": [[572, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[573, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[574, "polars.arg_where"]], "avg() (in module polars)": [[575, "polars.avg"]], "coalesce() (in module polars)": [[576, "polars.coalesce"]], "col() (in module polars)": [[577, "polars.col"]], "concat_list() (in module polars)": [[578, "polars.concat_list"]], "concat_str() (in module polars)": [[579, "polars.concat_str"]], "corr() (in module polars)": [[580, "polars.corr"]], "count() (in module polars)": [[581, "polars.count"]], "cov() (in module polars)": [[582, "polars.cov"]], "cumfold() (in module polars)": [[583, "polars.cumfold"]], "cumreduce() (in module polars)": [[584, "polars.cumreduce"]], "cumsum() (in module polars)": [[585, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[586, "polars.cumsum_horizontal"]], "date() (in module polars)": [[587, "polars.date"]], "date_range() (in module polars)": [[588, "polars.date_range"]], "date_ranges() (in module polars)": [[589, "polars.date_ranges"]], "datetime() (in module polars)": [[590, "polars.datetime"]], "duration() (in module polars)": [[591, "polars.duration"]], "element() (in module polars)": [[592, "polars.element"]], "exclude() (in module polars)": [[593, "polars.exclude"]], "first() (in module polars)": [[594, "polars.first"]], "fold() (in module polars)": [[595, "polars.fold"]], "format() (in module polars)": [[596, "polars.format"]], "from_epoch() (in module polars)": [[597, "polars.from_epoch"]], "groups() (in module polars)": [[598, "polars.groups"]], "head() (in module polars)": [[599, "polars.head"]], "implode() (in module polars)": [[600, "polars.implode"]], "int_range() (in module polars)": [[601, "polars.int_range"]], "int_ranges() (in module polars)": [[602, "polars.int_ranges"]], "last() (in module polars)": [[603, "polars.last"]], "lit() (in module polars)": [[604, "polars.lit"]], "map() (in module polars)": [[605, "polars.map"]], "max() (in module polars)": [[606, "polars.max"]], "max_horizontal() (in module polars)": [[607, "polars.max_horizontal"]], "mean() (in module polars)": [[608, "polars.mean"]], "median() (in module polars)": [[609, "polars.median"]], "min() (in module polars)": [[610, "polars.min"]], "min_horizontal() (in module polars)": [[611, "polars.min_horizontal"]], "n_unique() (in module polars)": [[612, "polars.n_unique"]], "ones() (in module polars)": [[613, "polars.ones"]], "quantile() (in module polars)": [[614, "polars.quantile"]], "reduce() (in module polars)": [[615, "polars.reduce"]], "repeat() (in module polars)": [[616, "polars.repeat"]], "rolling_corr() (in module polars)": [[617, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[618, "polars.rolling_cov"]], "select() (in module polars)": [[619, "polars.select"]], "sql_expr() (in module polars)": [[620, "polars.sql_expr"]], "std() (in module polars)": [[621, "polars.std"]], "struct() (in module polars)": [[622, "polars.struct"]], "sum() (in module polars)": [[623, "polars.sum"]], "sum_horizontal() (in module polars)": [[624, "polars.sum_horizontal"]], "tail() (in module polars)": [[625, "polars.tail"]], "time() (in module polars)": [[626, "polars.time"]], "time_range() (in module polars)": [[627, "polars.time_range"]], "time_ranges() (in module polars)": [[628, "polars.time_ranges"]], "var() (in module polars)": [[629, "polars.var"]], "when() (in module polars)": [[630, "polars.when"]], "zeros() (in module polars)": [[631, "polars.zeros"]], "bottom_k() (polars.lazyframe method)": [[653, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[654, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[655, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[656, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[657, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[658, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[659, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[660, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[661, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[662, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[663, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[664, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[665, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[666, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[667, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[668, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[669, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[670, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[671, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[672, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[673, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[674, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[675, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[676, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[677, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[678, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[679, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[680, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[681, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[682, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[683, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[684, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[685, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[686, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[687, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[688, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[689, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[690, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[691, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[692, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[693, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[694, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[695, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[696, "polars.LazyFrame.select"]], "set_sorted() (polars.lazyframe method)": [[697, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[698, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[699, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[700, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[701, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[702, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[703, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[704, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[705, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[706, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[707, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[708, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[709, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[710, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[711, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[712, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[713, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[714, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[715, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[716, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[717, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[718, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[719, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[720, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[721, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[722, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[723, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[724, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[725, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[726, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[727, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[728, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[729, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[730, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[731, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[738, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[738, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[738, "polars.selectors.by_name"]], "contains() (in module polars.selectors)": [[738, "polars.selectors.contains"]], "datetime() (in module polars.selectors)": [[738, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[738, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[738, "polars.selectors.ends_with"]], "first() (in module polars.selectors)": [[738, "polars.selectors.first"]], "float() (in module polars.selectors)": [[738, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[738, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[738, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[738, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[738, "polars.selectors.matches"]], "module": [[738, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[738, "polars.selectors.numeric"]], "polars.selectors": [[738, "module-polars.selectors"]], "selector_column_names() (in module polars.selectors)": [[738, "polars.selectors.selector_column_names"]], "starts_with() (in module polars.selectors)": [[738, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[738, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[738, "polars.selectors.temporal"]], "abs() (polars.series method)": [[740, "polars.Series.abs"]], "alias() (polars.series method)": [[741, "polars.Series.alias"]], "all() (polars.series method)": [[742, "polars.Series.all"]], "any() (polars.series method)": [[743, "polars.Series.any"]], "append() (polars.series method)": [[744, "polars.Series.append"]], "apply() (polars.series method)": [[745, "polars.Series.apply"]], "arccos() (polars.series method)": [[746, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[747, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[748, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[749, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[750, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[751, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[752, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[753, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[754, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[755, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[756, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[757, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[758, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[759, "polars.Series.arr.sum"]], "unique() (polars.series.arr method)": [[760, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[761, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[762, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[763, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[764, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[765, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[766, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[767, "polars.Series.cast"]], "cat (polars.series attribute)": [[768, "polars.Series.cat"]], "get_categories() (polars.series.cat method)": [[769, "polars.Series.cat.get_categories"]], "set_ordering() (polars.series.cat method)": [[770, "polars.Series.cat.set_ordering"]], "cbrt() (polars.series method)": [[771, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[772, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[773, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[774, "polars.Series.clear"]], "clip() (polars.series method)": [[775, "polars.Series.clip"]], "clip_max() (polars.series method)": [[776, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[777, "polars.Series.clip_min"]], "clone() (polars.series method)": [[778, "polars.Series.clone"]], "cos() (polars.series method)": [[779, "polars.Series.cos"]], "cosh() (polars.series method)": [[780, "polars.Series.cosh"]], "cummax() (polars.series method)": [[781, "polars.Series.cummax"]], "cummin() (polars.series method)": [[782, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[783, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[784, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[785, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[786, "polars.Series.cut"]], "describe() (polars.series method)": [[787, "polars.Series.describe"]], "diff() (polars.series method)": [[788, "polars.Series.diff"]], "dot() (polars.series method)": [[789, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[790, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[791, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[792, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[793, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[794, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[795, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[796, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[797, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[798, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[799, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[800, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[801, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[802, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[803, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[804, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[805, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[806, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[807, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[808, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[809, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[810, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[811, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[812, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[813, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[814, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[815, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[816, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[817, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[818, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[819, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[820, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[821, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[822, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[823, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[824, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[825, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[826, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[827, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[828, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[829, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[830, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[831, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[832, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[833, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[834, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[835, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[836, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[837, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[838, "polars.Series.dtype"]], "entropy() (polars.series method)": [[839, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[840, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[841, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[842, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[843, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[844, "polars.Series.exp"]], "explode() (polars.series method)": [[845, "polars.Series.explode"]], "extend() (polars.series method)": [[846, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[847, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[848, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[849, "polars.Series.fill_null"]], "filter() (polars.series method)": [[850, "polars.Series.filter"]], "flags (polars.series attribute)": [[851, "polars.Series.flags"]], "floor() (polars.series method)": [[852, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[853, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[854, "polars.Series.has_validity"]], "hash() (polars.series method)": [[855, "polars.Series.hash"]], "head() (polars.series method)": [[856, "polars.Series.head"]], "hist() (polars.series method)": [[857, "polars.Series.hist"]], "implode() (polars.series method)": [[858, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[859, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[860, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[861, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[862, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[863, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[864, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[865, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[866, "polars.Series.is_first"]], "is_float() (polars.series method)": [[867, "polars.Series.is_float"]], "is_in() (polars.series method)": [[868, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[869, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[870, "polars.Series.is_integer"]], "is_nan() (polars.series method)": [[871, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[872, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[873, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[874, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[875, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[876, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[877, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[878, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[879, "polars.Series.is_utf8"]], "item() (polars.series method)": [[880, "polars.Series.item"]], "kurtosis() (polars.series method)": [[881, "polars.Series.kurtosis"]], "len() (polars.series method)": [[882, "polars.Series.len"]], "limit() (polars.series method)": [[883, "polars.Series.limit"]], "list (polars.series attribute)": [[884, "polars.Series.list"]], "all() (polars.series.list method)": [[885, "polars.Series.list.all"]], "any() (polars.series.list method)": [[886, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[887, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[888, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[889, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[890, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[891, "polars.Series.list.count_match"]], "diff() (polars.series.list method)": [[892, "polars.Series.list.diff"]], "eval() (polars.series.list method)": [[893, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[894, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[895, "polars.Series.list.first"]], "get() (polars.series.list method)": [[896, "polars.Series.list.get"]], "head() (polars.series.list method)": [[897, "polars.Series.list.head"]], "join() (polars.series.list method)": [[898, "polars.Series.list.join"]], "last() (polars.series.list method)": [[899, "polars.Series.list.last"]], "lengths() (polars.series.list method)": [[900, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[901, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[902, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[903, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[904, "polars.Series.list.reverse"]], "set_difference() (polars.series.list method)": [[905, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[906, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[907, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[908, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[909, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[910, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[911, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[912, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[913, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[914, "polars.Series.list.take"]], "to_struct() (polars.series.list method)": [[915, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[916, "polars.Series.list.unique"]], "log() (polars.series method)": [[917, "polars.Series.log"]], "log10() (polars.series method)": [[918, "polars.Series.log10"]], "log1p() (polars.series method)": [[919, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[920, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[921, "polars.Series.map_dict"]], "max() (polars.series method)": [[922, "polars.Series.max"]], "mean() (polars.series method)": [[923, "polars.Series.mean"]], "median() (polars.series method)": [[924, "polars.Series.median"]], "min() (polars.series method)": [[925, "polars.Series.min"]], "mode() (polars.series method)": [[926, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[927, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[928, "polars.Series.n_unique"]], "name (polars.series attribute)": [[929, "polars.Series.name"]], "nan_max() (polars.series method)": [[930, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[931, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[932, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[933, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[934, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[935, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[936, "polars.Series.peak_min"]], "product() (polars.series method)": [[937, "polars.Series.product"]], "qcut() (polars.series method)": [[938, "polars.Series.qcut"]], "quantile() (polars.series method)": [[939, "polars.Series.quantile"]], "rank() (polars.series method)": [[940, "polars.Series.rank"]], "rechunk() (polars.series method)": [[941, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[942, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[943, "polars.Series.rename"]], "reshape() (polars.series method)": [[944, "polars.Series.reshape"]], "reverse() (polars.series method)": [[945, "polars.Series.reverse"]], "rle() (polars.series method)": [[946, "polars.Series.rle"]], "rle_id() (polars.series method)": [[947, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[948, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[949, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[950, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[951, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[952, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[953, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[954, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[955, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[956, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[957, "polars.Series.rolling_var"]], "round() (polars.series method)": [[958, "polars.Series.round"]], "sample() (polars.series method)": [[959, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[960, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[961, "polars.Series.series_equal"]], "set() (polars.series method)": [[962, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[963, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[964, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[965, "polars.Series.shape"]], "shift() (polars.series method)": [[966, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[967, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[968, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[969, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[970, "polars.Series.shuffle"]], "sign() (polars.series method)": [[971, "polars.Series.sign"]], "sin() (polars.series method)": [[972, "polars.Series.sin"]], "sinh() (polars.series method)": [[973, "polars.Series.sinh"]], "skew() (polars.series method)": [[974, "polars.Series.skew"]], "slice() (polars.series method)": [[975, "polars.Series.slice"]], "sort() (polars.series method)": [[976, "polars.Series.sort"]], "sqrt() (polars.series method)": [[977, "polars.Series.sqrt"]], "std() (polars.series method)": [[978, "polars.Series.std"]], "str (polars.series attribute)": [[979, "polars.Series.str"]], "concat() (polars.series.str method)": [[980, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[981, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[982, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[983, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[984, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[985, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[986, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[987, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[988, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[989, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[990, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[991, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[992, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[993, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[994, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[995, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[996, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[997, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[998, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[999, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1000, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1001, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1002, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1003, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1004, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1005, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[1006, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1007, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1008, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1009, "polars.Series.str.to_decimal"]], "to_lowercase() (polars.series.str method)": [[1010, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1011, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1012, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1013, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1014, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1015, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1016, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[1017, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1018, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1019, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1020, "polars.Series.sum"]], "tail() (polars.series method)": [[1021, "polars.Series.tail"]], "take() (polars.series method)": [[1022, "polars.Series.take"]], "take_every() (polars.series method)": [[1023, "polars.Series.take_every"]], "tan() (polars.series method)": [[1024, "polars.Series.tan"]], "tanh() (polars.series method)": [[1025, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[1026, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[1027, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1028, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1029, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1030, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1031, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1032, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1033, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1034, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1035, "polars.Series.top_k"]], "unique() (polars.series method)": [[1036, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1037, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1038, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1039, "polars.Series.value_counts"]], "var() (polars.series method)": [[1040, "polars.Series.var"]], "view() (polars.series method)": [[1041, "polars.Series.view"]], "zip_with() (polars.series method)": [[1042, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1058, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1058, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1058, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1058, "polars.SQLContext.__init__"]]}})